<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>yannesposito.com</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/feed/feed.xml" rel="self" />
    <link href="http://yannesposito.com" />
    <id>http://yannesposito.com/Scratch/fr/blog/feed/feed.xml</id>
    <author>
        <name>Yann Esposito</name>
        <email>yann.esposito@gmail.com</email>
    </author>
    <updated>2013-08-06T00:00:00Z</updated>
    <entry>
    <title>Rational Web Framework Choice</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Rational-Web-Framework-Choice/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Rational-Web-Framework-Choice/index.html</id>
    <published>2013-08-06T00:00:00Z</published>
    <updated>2013-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Rational-Web-Framework-Choice/battle-of-lepanto-vicentino-andrea.jpg" alt="Main image"/>
</div>

<div class="intro">


<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> Comment déterminer de la façon la plus rationnelle possible le meilleur framework work relativement à vos besoins. <a href="#the-result">Cliquez ici pour aller au résultats</a>. Cet article n’est disponible qu’en anglais.</p>
</div>

<p>This is it.<br />You’ve got the next big idea.<br />You just need to make a very simple web application.</p>
<p>It sounds easy! You just need to choose a good modern web framework, when suddenly:</p>
<figure>
<img src="/Scratch/img/blog/Rational-Web-Framework-Choice/choice_paralysis.gif" alt="[Choice Paralysis][choice_paralysis]"/>
<figcaption>
<a href="https://en.wikipedia.org/wiki/Analysis_paralysis">Choice Paralysis</a>
</figcaption>
</figure>

<p>After your brain stack overflowed, you decide to use a very simple methodology. Answer two questions:</p>
<p><strong>Which language am I familiar with?<br />What is the most popular web framework for this language?</strong></p>
<p>Great! This is it.</p>
<p>But, you continually hear this little voice.</p>
<blockquote>
<p><strong>“You didn’t made a bad choice, yes. But …<br />you hadn’t made the best either.”</strong></p>
</blockquote>
<p>This article try to determine in the most objective and rational way the best(s) web framework(s) depending on your needs. To reach this goal, I will provide a decision tool in the result section.</p>
<p>I will use the following methodology:</p>
<p><strong>Methodology</strong></p>
<ol style="list-style-type: decimal">
<li>Model how to make choice
<ol style="list-style-type: lower-alpha">
<li>choose important parameters</li>
<li>organize (hierarchize) them</li>
<li>write down an objective chooser</li>
</ol></li>
<li>Grab objective quantified informations about web frameworks relatively to choosen parameters</li>
<li>Sanitize your data in order to handle imprecisions, lack of informations…</li>
<li>Apply the model of choice to your informations</li>
</ol>
<blockquote>
<p><strong>☞ Important Note</strong><br />I am far from happy to the actual result. There are a lot of biases, for example in the choice of the parameters. The same can be said about the data I gathered. I am using very imprecise informations. But, as far as I know, this is the only article which use many different parameters to help you choose a web framework.</p>
<p>This is why I made a very flexible decision tool:</p>
<p><a href="#the-result">Decision tool</a>.</p>
</blockquote>
<h2 id="model">Model</h2>
<p>Here are the important features (properties/parameters) I selected to make the choice:</p>
<ol style="list-style-type: decimal">
<li><em><strong>Popularity</strong></em>, which correlate with:
<ul>
<li>number of tested libraries</li>
<li>facility to find learning material</li>
<li>ability to find another developer to work with</li>
</ul></li>
<li><em><strong>Efficiency</strong></em>, which is generally correlated to:
<ul>
<li>how much processing power you’ll need per user</li>
<li>maintenance price per user</li>
<li>how long the user will wait to see/update data</li>
</ul></li>
<li><em><strong>Expressiveness</strong></em>, which is generally correlated to:
<ul>
<li>faster development</li>
<li>flexibility, adaptability</li>
</ul></li>
<li><em><strong>Robustness</strong></em>, which correlate with:
<ul>
<li>security</li>
<li>fewer bugs</li>
</ul></li>
</ol>
<p>Each feature is quite important and mostly independant from each other. I tried to embrace most important topics concerning web frameworks with these four properties. I am fully concious some people might lack another important feature. Nonetheless the methodology used here can be easily replicated. If you lack an important property add it at will and use this choice method.</p>
<p>Also each feature is very hard to measure with precision. This is why we will only focus on order of magnitude.</p>
<p>For each property a framework could have one of the six possible values: Excellent, Very Good, Good, Medium, Bad or Very Bad</p>
<p>So how to make a decision model from these informations?</p>
<p>One of the most versatile method is to give a weight for each cluster value. And to select the framework maximizing this score:</p>
<pre><code>score(framework) = efficiency + robustness + expressiveness + popularity</code></pre>
<blockquote>
<p>For example:</p>
<table>
<tbody>
<tr class="odd">
<td align="left">Expressiveness</td>
<td align="right">10</td>
<td align="right">7</td>
<td align="right">1</td>
<td align="right">-∞</td>
<td align="right">-∞</td>
<td align="right">-∞</td>
</tr>
<tr class="even">
<td align="left">Popularity</td>
<td align="right">5</td>
<td align="right">5</td>
<td align="right">4</td>
<td align="right">3</td>
<td align="right">2</td>
<td align="right">1</td>
</tr>
<tr class="odd">
<td align="left">Efficiency</td>
<td align="right">10</td>
<td align="right">8</td>
<td align="right">6</td>
<td align="right">4</td>
<td align="right">2</td>
<td align="right">1</td>
</tr>
<tr class="even">
<td align="left">Robustness</td>
<td align="right">10</td>
<td align="right">8</td>
<td align="right">6</td>
<td align="right">4</td>
<td align="right">2</td>
<td align="right">1</td>
</tr>
</tbody>
</table>
<p>Using this weighted table, that means:</p>
<ul>
<li>we discard the three least expressive clusters.</li>
<li>We don’t make any difference between excellent and very good in popularity.</li>
<li>Concerning efficient framework in excellent cluster will have 2 more points than the “very good” cluster.</li>
</ul>
<p>So for each framework we compute its score relatively to a weighted table. And we select the best(s).</p>
<p><strong>Example</strong>: Using this hypothetic framework and the preceeding table.</p>
<table>
<thead>
<tr class="header">
<th align="left"></th>
<th align="left">Expressiveness</th>
<th align="left">Popularity</th>
<th align="left">Efficiency</th>
<th align="left">Robustness</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">yog</td>
<td align="left">Excellent</td>
<td align="left">Very Bad</td>
<td align="left">Medium</td>
<td align="left">Very Good</td>
</tr>
</tbody>
</table>
<pre><code>score(yog) = 10 + 0 + 4 + 8 = 22</code></pre>
</blockquote>
<p>Most needs should be expressed by such a weighted table. In the result section, we will discuss this further.</p>
<p>It is now time to try to get these measures.</p>
<h2 id="objective-measures">Objective measures</h2>
<p>None of the four properties I choosen can be measured with perfect precision. But we could get the order of magnitude for each.</p>
<p>I tried to focus on the framework only. But it is often easier to start by studying the language first.</p>
<p>For example, I have datas about popularity by language and I also have different datas concerning popularity by framework. Even if I use only the framework focused datas in my final decision model, it seemed important to me to discuss about the datas for the languages. The goal is to provide a tool to help decision not to give a decision for you.</p>
<h3 id="popularity">Popularity</h3>
<p><a href="http://redmonk.com/sogrady/2013/02/28/language-rankings-1-13/">RedMonk Programming Language Rankings (January 2013)</a> provide an apparent good measure of popularity. While not perfect the current measure feel mostly right. They create an image using stack overflow and github data. Vertical correspond to the number of questions on stackoverflow. Horizontal correspond to the number of projects on github.</p>
<p>If you look at the image, your eye can see about four clusters. The 1<sup>ﬆ</sup> cluster correspond to mainstream languages:</p>
<figure>
<img src="/Scratch/img/blog/Rational-Web-Framework-Choice/mainstreamlanguages.png" alt="Mainstream Languages Cluster from [RedMonk][redmonk]"/>
<figcaption>
Mainstream Languages Cluster from <a href="http://redmonk.com/sogrady/2013/02/28/language-rankings-1-13/">RedMonk</a>
</figcaption>
</figure>

<p>Most developer know at least one of these language.</p>
<p>The second cluster is quite bigger. It seems to correspond to languages with a solid community behind them.</p>
<figure>
<img src="/Scratch/img/blog/Rational-Web-Framework-Choice/secondtierlanguages.png" alt="Second tier languages from [RedMonk][redmonk]"/>
<figcaption>
Second tier languages from <a href="http://redmonk.com/sogrady/2013/02/28/language-rankings-1-13/">RedMonk</a>
</figcaption>
</figure>

<p>I don’t get into detail, but you could also see third and fourth tier popular languages.</p>
<p>So:</p>
<p><strong>Mainstream</strong>: JavaScript, Java, PHP, Python, Ruby, <code>C#</code>, <code>C++</code>, <code>C</code>, Objective-C, Perl, Shell</p>
<p><strong>Good</strong>: Scala, Haskell, Visual Basic, Assembly, R, Matlab, ASP, ActionScript, Coffeescript, Groovy, Clojure, Lua, Prolog</p>
<p><strong>Medium</strong>: Erlang, Go, Delphi, D, Racket, Scheme, ColdFusion, F#, FORTRAN, Arduino, Tcl, Ocaml</p>
<p><strong>Bad</strong>: third tier <strong>Very Bad</strong>: fourth tier</p>
<p>I don’t thing I could find easily web frameworks for third or fourth tier languages.</p>
<p>For now, I only talked about language popularity. But what about framework popularity? I made a test using number of question on stackoverflow only. Then by dividing by two for each 6 cluster:</p>
<table>
<thead>
<tr class="header">
<th align="left">Cluster</th>
<th align="left">Language</th>
<th align="left">Framework</th>
<th align="right">#nb</th>
<th align="right">%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Excellent</td>
<td align="left">Ruby</td>
<td align="left">Rails</td>
<td align="right">176208</td>
<td align="right">100%</td>
</tr>
<tr class="even">
<td align="left">Very Good</td>
<td align="left">Python</td>
<td align="left">Django</td>
<td align="right">57385</td>
<td align="right">&lt;50%</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Servlet</td>
<td align="right">54139</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Spring</td>
<td align="right">31641</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Node.js</td>
<td align="left">node.js</td>
<td align="right">27243</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Codeigniter</td>
<td align="right">21503</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Groovy</td>
<td align="left">Grails</td>
<td align="right">20222</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left">Good</td>
<td align="left">Ruby</td>
<td align="left">Sinatra</td>
<td align="right">8631</td>
<td align="right">&lt;25%</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Python</td>
<td align="left">Flask</td>
<td align="right">7062</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Laravel</td>
<td align="right">6982</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Kohana</td>
<td align="right">5959</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Node.js</td>
<td align="left">Express</td>
<td align="right">5009</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left">Medium</td>
<td align="left">PHP</td>
<td align="left">Cake</td>
<td align="right">4554</td>
<td align="right">&lt;13%</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C♯</td>
<td align="left">ServiceStack</td>
<td align="right">3838</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Scala</td>
<td align="left">Play</td>
<td align="right">3823</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Wicket</td>
<td align="right">3819</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Dart</td>
<td align="left">Dart</td>
<td align="right">3753</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Slim</td>
<td align="right">3361</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Python</td>
<td align="left">Tornado</td>
<td align="right">3321</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Scala</td>
<td align="left">Lift</td>
<td align="right">2844</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">Go</td>
<td align="right">2689</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left">Bad</td>
<td align="left">Java</td>
<td align="left">Tapestry</td>
<td align="right">1197</td>
<td align="right">&lt;6%</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C♯</td>
<td align="left">aspnet</td>
<td align="right">1000</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Haskell</td>
<td align="left">Yesod</td>
<td align="right">889</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Silex</td>
<td align="right">750</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Lithium</td>
<td align="right">732</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C♯</td>
<td align="left">nancy</td>
<td align="right">705</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left">Very bad</td>
<td align="left">Java</td>
<td align="left">Grizzly</td>
<td align="right">622</td>
<td align="right">&lt;3%</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Erlang</td>
<td align="left">Cowboy</td>
<td align="right">568</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Perl</td>
<td align="left">Dancer</td>
<td align="right">496</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Symphony2</td>
<td align="right">491</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">Revel</td>
<td align="right">459</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Clojure</td>
<td align="left">Compojure</td>
<td align="right">391</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Perl</td>
<td align="left">Mojolicious</td>
<td align="right">376</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Scala</td>
<td align="left">Scalatra</td>
<td align="right">349</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Scala</td>
<td align="left">Finagle</td>
<td align="right">336</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Phalcon</td>
<td align="right">299</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">js</td>
<td align="left">Ringo</td>
<td align="right">299</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Gemini</td>
<td align="right">276</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Haskell</td>
<td align="left">Snap</td>
<td align="right">263</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Perl</td>
<td align="left">Plack</td>
<td align="right">257</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Erlang</td>
<td align="left">Elli</td>
<td align="right">230</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Dropwizard</td>
<td align="right">188</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Yaf</td>
<td align="right">146</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Play1</td>
<td align="right">133</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Node.js</td>
<td align="left">Hapi</td>
<td align="right">131</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Java</td>
<td align="left">Vertx</td>
<td align="right">60</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Scala</td>
<td align="left">Unfiltered</td>
<td align="right">42</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C</td>
<td align="left">onion</td>
<td align="right">18</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Clojure</td>
<td align="left">http-kit</td>
<td align="right">17</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Perl</td>
<td align="left">Kelp</td>
<td align="right">16</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Micromvc</td>
<td align="right">13</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Lua</td>
<td align="left">Openresty</td>
<td align="right">8</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C++</td>
<td align="left">cpoll-cppsp</td>
<td align="right">5</td>
<td align="right"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Clojure</td>
<td align="left">Luminus</td>
<td align="right">3</td>
<td align="right"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">Phreeze</td>
<td align="right">1</td>
<td align="right"></td>
</tr>
</tbody>
</table>
<p>As we can see, our framework popularity indicator can be quite different from its language popularity. For now I didn’t found a nice way to merge the results from RedMonk with these one. So I’ll use these unperfect one. Hopefully the order of magninute is mostly correct for most framework.</p>
<h3 id="efficiency">Efficiency</h3>
<p>Another objective measure is efficiency. We all know benchmarks are all flawed. But they are the only indicators concerning efficiency we have.</p>
<p>I used the benchmark from <a href="http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=all&amp;data=u64q">benchmarksgame</a>. Mainly, there are five clusters:</p>
<table>
<tbody>
<tr class="odd">
<td align="left">1x→2x</td>
<td align="left"><code>C</code>, <code>C++</code></td>
</tr>
<tr class="even">
<td align="left">2x→3x</td>
<td align="left">Java 7, Scala, OCamL, Haskell, Go, Common LISP</td>
</tr>
<tr class="odd">
<td align="left">3x→10x</td>
<td align="left">C♯, Clojure, Racket, Dart</td>
</tr>
<tr class="even">
<td align="left">10x→30x</td>
<td align="left">Erlang</td>
</tr>
<tr class="odd">
<td align="left">30x→</td>
<td align="left">PHP, Python, Perl, Ruby, JRuby</td>
</tr>
</tbody>
</table>
<p>Remarks concerning some very slow languages:</p>
<ul>
<li>PHP ; huge variations, can be about 1.5x C speed in best case.</li>
<li>Python ; huge variations, can be about 1.5x C speed in best case</li>
<li>Perl ; Can be about 3x C speed in best case</li>
<li>Ruby, JRuby ; mostly very slow.</li>
</ul>
<p>This is a first approach. The speed of the language for basic benchmarks. But, here we are interrested in web programming. Fortunately techempower has made some tests focused on most web frameworks:</p>
<p><a href="http://www.techempower.com/blog/2013/07/02/frameworks-round-6/">Web framework benchmarks</a>.</p>
<p>These benchmark doesn’t fit well with our needs. The values are certainly quite imprecise to your real usage. The goal is just to get an order of magnitude for each framework. Another problem is the high number of informations.</p>
<p>As always, we should remember these informations are also imprecise. So I simply made some classes of efficiency.</p>
<p>Remark: I separated the clusters by using power of 2 relatively to the fastest.</p>
<table>
<thead>
<tr class="header">
<th align="left">Cluster</th>
<th align="left">Language</th>
<th align="left">Framework</th>
<th align="center">#nb</th>
<th align="left">slowness</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Excellent</td>
<td align="left">C++</td>
<td align="left">cpoll-cppsp</td>
<td align="center">114,711</td>
<td align="left">1×</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">gemini</td>
<td align="center">105,204</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Lua</td>
<td align="left">openresty</td>
<td align="center">93,882</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">servlet</td>
<td align="center">90,580</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C++</td>
<td align="left">cpoll-pool</td>
<td align="center">89,167</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">go</td>
<td align="center">76,024</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">finagle</td>
<td align="center">68,413</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">revel</td>
<td align="center">66,990</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">rest-express</td>
<td align="center">63,209</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left">Very Good</td>
<td align="left">Jav</td>
<td align="left">wicket</td>
<td align="center">48,772</td>
<td align="left">&gt;2×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">scalatra</td>
<td align="center">48,594</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">http-kit</td>
<td align="center">42,703</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">spring</td>
<td align="center">36,643</td>
<td align="left">&gt;3×</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">php</td>
<td align="center">36,605</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">tapestry</td>
<td align="center">35,032</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">compojure</td>
<td align="center">32,088</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">ringo</td>
<td align="center">31,962</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">dropwizard</td>
<td align="center">31,514</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">luminus</td>
<td align="center">30,672</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left">Good</td>
<td align="left">Sca</td>
<td align="left">play-slick</td>
<td align="center">29,950</td>
<td align="left">&gt;4×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">unfiltered</td>
<td align="center">29,782</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Erl</td>
<td align="left">elli</td>
<td align="center">28,862</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">vertx</td>
<td align="center">28,075</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">nodejs</td>
<td align="center">27,598</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Erl</td>
<td align="left">cowboy</td>
<td align="center">24,669</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C</td>
<td align="left">onion</td>
<td align="center">23,649</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Hkl</td>
<td align="left">yesod</td>
<td align="center">23,304</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">express</td>
<td align="center">22,856</td>
<td align="left">&gt;5×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">play-scala</td>
<td align="center">22,372</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav g</td>
<td align="left">rizzly-jersey</td>
<td align="center">20,550</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">tornado</td>
<td align="center">20,372</td>
<td align="left">&gt;6×</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">phalcon</td>
<td align="center">18,481</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Grv</td>
<td align="left">grails</td>
<td align="center">18,467</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">plack</td>
<td align="center">16,647</td>
<td align="left">&gt;7×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">yaf</td>
<td align="center">14,388</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left">Medium</td>
<td align="left">JS</td>
<td align="left">hapi</td>
<td align="center">11,235</td>
<td align="left">&gt;10×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play1</td>
<td align="center">9,979</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Hkl</td>
<td align="left">snap</td>
<td align="center">9,196</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">kelp</td>
<td align="center">8,250</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">flask</td>
<td align="center">8,167</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play-java</td>
<td align="center">7,905</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav p</td>
<td align="left">lay-java-jpa</td>
<td align="center">7,846</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">micromvc</td>
<td align="center">7,387</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">dancer</td>
<td align="center">5,040</td>
<td align="left">&gt;20×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">mojolicious</td>
<td align="center">4,371</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">ringo-conv</td>
<td align="center">4,249</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">django</td>
<td align="center">4,026</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">codeigniter</td>
<td align="center">3,809</td>
<td align="left">&gt;30×</td>
</tr>
<tr class="odd">
<td align="left">Bad</td>
<td align="left">Rby</td>
<td align="left">rails</td>
<td align="center">3,445</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">lift</td>
<td align="center">3,311</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">slim</td>
<td align="center">3,112</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">kohana</td>
<td align="center">2,378</td>
<td align="left">&gt;40×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">silex</td>
<td align="center">2,364</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left">Very Bad</td>
<td align="left">PHP</td>
<td align="left">laravel</td>
<td align="center">1,639</td>
<td align="left">&gt;60×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">phreeze</td>
<td align="center">1,410</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">lithium</td>
<td align="center">1,410</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">fuel</td>
<td align="center">1,410</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">cake</td>
<td align="center">1,287</td>
<td align="left">&gt;80×</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">symfony2</td>
<td align="center">879</td>
<td align="left">&gt;100×</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">aspnet-mvc</td>
<td align="center">871</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Rby</td>
<td align="left">sinatra</td>
<td align="center">561</td>
<td align="left">&gt;200×</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">servicestack</td>
<td align="center">51</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Dar</td>
<td align="left">dart</td>
<td align="center">0</td>
<td align="left"></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">nancy</td>
<td align="center">0</td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">web-simple</td>
<td align="center">0</td>
<td align="left"></td>
</tr>
</tbody>
</table>
<p>These are manually made clusters. But you get the idea. Certainly, some framework could jump between two different clusters. So this is something to remember. But as always, the order of magnitude is certainly mostly right.</p>
<h1 id="expressiveness">Expressiveness</h1>
<p>Now, how to objectively measure expressiveness?</p>
<p>RedMonk had a very good idea to find an objective (while imprecise) measure of each language expressiveness. Read this <a href="http://redmonk.com/dberkholz/2013/03/25/programming-languages-ranked-by-expressiveness/">article</a> for details.</p>
<p>After filtering languages suitable for web development, we end up with some clusters:</p>
<table>
<col width="13%" />
<col width="13%" />
<thead>
<tr class="header">
<th align="left">Cluster</th>
<th align="left">Languages</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Excellent</td>
<td align="left">Coffeescript, Clojure, Haskell</td>
</tr>
<tr class="even">
<td align="left">Very Good</td>
<td align="left">Racket, Groovy, R, Scala, OCamL, F♯, Erlang, Lisp, Go</td>
</tr>
<tr class="odd">
<td align="left">Medium</td>
<td align="left">Perl, Python, Objective-C, Scheme, Tcl, Ruby</td>
</tr>
<tr class="even">
<td align="left">Bad</td>
<td align="left">Lua, Fortran (free-format) PHP, Java, C++, C♯</td>
</tr>
<tr class="odd">
<td align="left">Very Bad</td>
<td align="left">Assembly, C, Javascript,</td>
</tr>
</tbody>
</table>
<p>Unfortunately there is no information about dart. So I simply give a very fast look at the syntax. As it looked a lot like javascript and js is quite low. I decided to put it close to java.</p>
<p>Also an important remark, javascript score very badly here while coffeescript (compiling to js) score “excellent”. So if you intend to use a javascript framework but only with coffescript that should change substantially the score. As I don’t believe it is the standard. Javascript oriented framework score very badly regarding expressiveness.</p>
<div id="toggle-expressiveness-table" class="button">
Click here to show/hide the table for frameworks
</div>
<div id="expressiveness-table">

<table>
<thead>
<tr class="header">
<th align="left">Cluster</th>
<th align="left">Language</th>
<th align="left">Framework</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Excellent</td>
<td align="left">Clj</td>
<td align="left">luminus</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">http-kit</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">compojure</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Hkl</td>
<td align="left">snap</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Hkl</td>
<td align="left">yesod</td>
</tr>
<tr class="even">
<td align="left">Very Good</td>
<td align="left">Erl</td>
<td align="left">elli</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Erl</td>
<td align="left">cowboy</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">go</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">revel</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Grv</td>
<td align="left">grails</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">lift</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">finagle</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">scalatra</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">play-scala</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">play-slick</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">unfiltered</td>
</tr>
<tr class="odd">
<td align="left">Medium</td>
<td align="left">Prl</td>
<td align="left">kelp</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">plack</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">dancer</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">web-simple</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">mojolicious</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">flask</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">django</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">tornado</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Rby</td>
<td align="left">rails</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Rby</td>
<td align="left">sinatra</td>
</tr>
<tr class="odd">
<td align="left">Bad</td>
<td align="left">C#</td>
<td align="left">nancy</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">aspnet-mvc</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">servicestack</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C++</td>
<td align="left">cpoll-pool</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C++</td>
<td align="left">cpoll-cppsp</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Dar</td>
<td align="left">dart</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play1</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">vertx</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">gemini</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">spring</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">wicket</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">servlet</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">tapestry</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play-java</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">dropwizard</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">rest-express</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play-java-jpa</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">grizzly-jersey</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Lua</td>
<td align="left">openresty</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">php</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">yaf</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">cake</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">fuel</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">slim</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">silex</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">kohana</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">laravel</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">lithium</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">phalcon</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">phreeze</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">micromvc</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">symfony2</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">codeigniter</td>
</tr>
<tr class="even">
<td align="left">Very Bad</td>
<td align="left">C</td>
<td align="left">onion</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">hapi</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">ringo</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">nodejs</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">express</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">ringo-conv</td>
</tr>
</tbody>
</table>
</div>

<h3 id="robustness">Robustness</h3>
<p>I couldn’t find any complete study to give the number of bug relatively to each framework/language.</p>
<p>But one thing I saw from experience is the more powerful the type system the safest your application is. While the type system doesn’t remove completely the need to test your application a very good type system tend to remove complete classes of bug.</p>
<p>Typically, not using pointer help to reduce the number of bugs due to bad references. Also, using a garbage collector, reduce greatly the probability to access unallocated space.</p>
<figure>
<img src="/Scratch/img/blog/Rational-Web-Framework-Choice/languagesafety.png" alt="Static Type Properties from [James IRY Blog][typesanalysis]"/>
<figcaption>
Static Type Properties from <a href="http://james-iry.blogspot.fr/2010/05/types-la-chart.html">James IRY Blog</a>
</figcaption>
</figure>

<p>From my point of view, robustness is mostly identical to safety.</p>
<p>Here are the clusters:</p>
<table>
<tbody>
<tr class="odd">
<td align="left">Excellent</td>
<td align="left">Haskell, Scheme, Erlang</td>
</tr>
<tr class="even">
<td align="left">Very Good</td>
<td align="left">Scala, Java, Clojure</td>
</tr>
<tr class="odd">
<td align="left">Good</td>
<td align="left">Ruby, Python, Groovy, javascript, PHP</td>
</tr>
<tr class="even">
<td align="left">Medium</td>
<td align="left">C++, C#, Perl, Objective-C, Go, C</td>
</tr>
</tbody>
</table>
<p>So applying this to frameworks gives the following clusters:</p>
<div id="toggle-robustness-table" class="button">
Click here to show/hide the table for frameworks
</div>
<div id="robustness-table">

<table>
<thead>
<tr class="header">
<th align="left">Cluster</th>
<th align="left">Language</th>
<th align="left">Framework</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Excellent</td>
<td align="left">Erl</td>
<td align="left">elli</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Erl</td>
<td align="left">cowboy</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Hkl</td>
<td align="left">snap</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Hkl</td>
<td align="left">yesod</td>
</tr>
<tr class="odd">
<td align="left">Very Good</td>
<td align="left">Clj</td>
<td align="left">luminus</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">http-kit</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Clj</td>
<td align="left">compojure</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play1</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">vertx</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">gemini</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">spring</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">wicket</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">servlet</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">tapestry</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play-java</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">dropwizard</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">rest-express</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">play-java-jpa</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Jav</td>
<td align="left">grizzly-jersey</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">lift</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">finagle</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">scalatra</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">play-scala</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">play-slick</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Sca</td>
<td align="left">unfiltered</td>
</tr>
<tr class="even">
<td align="left">Good</td>
<td align="left">Grv</td>
<td align="left">grails</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">hapi</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">ringo</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">nodejs</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">express</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">JS</td>
<td align="left">ringo-conv</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Lua</td>
<td align="left">openresty</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">php</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">yaf</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">cake</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">fuel</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">slim</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">silex</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">kohana</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">laravel</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">lithium</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">phalcon</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">phreeze</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">micromvc</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">symfony2</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">PHP</td>
<td align="left">codeigniter</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">flask</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">django</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Py</td>
<td align="left">tornado</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Rby</td>
<td align="left">rails</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Rby</td>
<td align="left">sinatra</td>
</tr>
<tr class="even">
<td align="left">Medium</td>
<td align="left">C</td>
<td align="left">onion</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">nancy</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">aspnet-mvc</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C#</td>
<td align="left">servicestack</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">C++</td>
<td align="left">cpoll-pool</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">C++</td>
<td align="left">cpoll-cppsp</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Dar</td>
<td align="left">dart</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">go</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Go</td>
<td align="left">revel</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">kelp</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">plack</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">dancer</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">web-simple</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left">Prl</td>
<td align="left">mojolicious</td>
</tr>
</tbody>
</table>
</div>

<h2 id="the-result">The result</h2>
<p>For the result I initialized the table with my own needs.</p>
<p>And I am quite happy it confirms my current choice. I sware I didn’t given yesod any bonus point. I tried to be the most objective and factual as possible.</p>
<p>Now, it is up to you to enter your preferences.</p>
<p>On each line you could change how important a feature is for you. From essential to unsignificant. Of course you could change the matrix at will.</p>
<p>I just show a top 10 frameworks. In order to give a more understandable measure I provide the log of the score.</p>
<table id="choice-matrix">
<tr>
    <th></th>
    <th>
Excellent
</th>
    <th>
Very good
</th>
    <th>
Good
</th>
    <th>
Medium
</th>
    <th>
Bad
</th>
    <th>
Very bad
</th>
    <th>
Importance
</th>
</tr>
<tr id="t-expressiveness"><th>
Expressiveness
</th></tr>
<tr id="t-popularity"><th>
Popularity
</th></tr>
<tr id="t-efficiency"><th>
Efficiency
</th></tr>
<tr id="t-robustness"><th>
Robustness
</th></tr>
</table>

<div id="compute" class="button">
Click to force refresh
</div>
<div id="result"></div>

<script>// <![CDATA[ // <![CDATA[
    function lt(x,y){return (x < y);}
    function bal(balname,str){return '<'+balname+'>'+str+'</'+balname+'>';}
    function ret(){return '<br/>';}
// ]]> // ]]></script>
<script>// <![CDATA[
    String.prototype.repeat = function(num){return new Array(num+1).join(this);};
    (function(){function run(){if (window.$){

     var languageOf={};
languageOf["elli"]="Erlang";
languageOf["cowboy"]="Erlang";
languageOf["snap"]="Haskell";
languageOf["yesod"]="Haskell";
languageOf["luminus"]="Clojure";
languageOf["http-kit"]="Clojure";
languageOf["compojure"]="Clojure";
languageOf["play1"]="Java";
languageOf["vertx"]="Java";
languageOf["gemini"]="Java";
languageOf["spring"]="Java";
languageOf["wicket"]="Java";
languageOf["servlet"]="Java";
languageOf["tapestry"]="Java";
languageOf["play-java"]="Java";
languageOf["dropwizard"]="Java";
languageOf["rest-express"]="Java";
languageOf["play-java-jpa"]="Java";
languageOf["grizzly-jersey"]="Java";
languageOf["lift"]="Scala";
languageOf["finagle"]="Scala";
languageOf["scalatra"]="Scala";
languageOf["play-scala"]="Scala";
languageOf["play-slick"]="Scala";
languageOf["unfiltered"]="Scala";
languageOf["grails"]="Groovy";
languageOf["hapi"]="javascript";
languageOf["ringo"]="javascript";
languageOf["nodejs"]="javascript";
languageOf["express"]="javascript";
languageOf["ringo-conv"]="javascript";
languageOf["openresty"]="Lua";
languageOf["php"]="PHP";
languageOf["yaf"]="PHP";
languageOf["cake"]="PHP";
languageOf["fuel"]="PHP";
languageOf["slim"]="PHP";
languageOf["silex"]="PHP";
languageOf["kohana"]="PHP";
languageOf["laravel"]="PHP";
languageOf["lithium"]="PHP";
languageOf["phalcon"]="PHP";
languageOf["phreeze"]="PHP";
languageOf["micromvc"]="PHP";
languageOf["symfony2"]="PHP";
languageOf["codeigniter"]="PHP";
languageOf["flask"]="Python";
languageOf["django"]="Python";
languageOf["tornado"]="Python";
languageOf["rails"]="Ruby";
languageOf["sinatra"]="Ruby";
languageOf["onion"]="C";
languageOf["nancy"]="C#";
languageOf["aspnet-mvc"]="C#";
languageOf["servicestack"]="C#";
languageOf["cpoll-pool"]="C++";
languageOf["cpoll-cppsp"]="C++";
languageOf["dart"]="Dart";
languageOf["go"]=" Go";
languageOf["revel"]=" Go";
languageOf["kelp"]="Perl";
languageOf["plack"]="Perl";
languageOf["dancer"]="Perl";
languageOf["web-simple"]="Perl";
languageOf["mojolicious"]="Perl";


popularityClusters=[[ "rails", "php"
],[ "django" , "servlet" , "spring" , "nodejs" , "codeigniter" , "grails"
],[ "sinatra" , "flask" , "laravel" , "kohana" , "rest-express", "express"
],[ "cake" , "servicestack" , "play-java", "play-slick"
, "wicket" , "dart" , "slim" , "tornado" , "lift" , "go"
],[ "tapestry" , "aspnet-mvc" , "yesod" , "silex" , "lithium" , "nancy"
],[ "grizzly" , "cowboy" , "dancer" , "symfony2" , "revel"
, "compojure" , "mojolicious" , "scalatra" , "finagle" , "phalcon"
, "ringo" , "gemini" , "snap" , "plack" , "elli" , "dropwizard"
, "yaf" , "play1" , "hapi" , "vertx" , "unfiltered" , "onion"
, "http-kit" , "kelp" , "micromvc" , "openresty" , "cpoll-pool"
,  "cpoll-cppsp" , "luminus" , "phreeze"
]];


efficiencyClusters=[[ "cpoll-cppsp" , "gemini" , "openresty" , "servlet"
, "cpoll-pool" , "go" , "finagle" , "revel" , "rest-express"
],[ "wicket" , "scalatra" , "http-kit" , "spring" , "php" , "tapestry"
, "compojure" , "ringo" , "dropwizard" , "luminus"
],[ "play-slick" , "unfiltered" , "elli" , "vertx" , "nodejs" , "cowboy"
, "onion" , "yesod" , "express" , "play-scala" , "grizzly"
, "tornado" , "phalcon" , "grails" , "plack" , "yaf"
],[ "hapi" , "play1" , "snap" , "kelp" , "flask" , "play-java"
, "play-java-jpa" , "micromvc" , "dancer" , "mojolicious" , "ringo-conv"
, "django" , "codeigniter"
],[ "rails" , "lift" , "slim" , "kohana" , "silex"
],[ "laravel" , "phreeze" , "lithium" , "fuel" , "cake" , "symfony2"
, "aspnet-mvc" , "sinatra" , "servicestack" , "dart" , "nancy" , "web-simple"
]];


expressivenessClusters=[[
"luminus" , "http-kit" , "compojure" , "snap" , "yesod"
],[ "elli" , "cowboy" , "go" , "revel" , "grails" , "lift" , "finagle"
, "scalatra" , "play-scala" , "play-slick" , "unfiltered"
],[ "kelp" , "plack" , "dancer" , "web-simple" , "mojolicious" , "flask"
, "django" , "tornado" , "rails" , "sinatra"
],[ "nancy" , "aspnet-mvc" , "servicestack" , "cpoll-pool" , "cpoll-cppsp"
, "dart" , "play1" , "vertx" , "gemini" , "spring" , "wicket" , "servlet"
, "tapestry" , "play-java" , "dropwizard" , "rest-express" , "play-java-jpa"
, "grizzly" , "openresty" , "php" , "yaf" , "cake" , "fuel" , "slim"
, "silex" , "kohana" , "laravel" , "lithium" , "phalcon" , "phreeze"
, "micromvc" , "symfony2" , "codeigniter"
],[ "onion" , "hapi" , "ringo" , "nodejs" , "express" , "ringo-conv"
]];

robustnessClusters=[[ "elli" , "cowboy" , "snap" , "yesod"
],[ "luminus" , "http-kit" , "compojure" , "play1" , "vertx" , "gemini"
, "spring" , "wicket" , "servlet" , "tapestry" , "play-java" , "dropwizard"
, "rest-express" , "play-java-jpa" , "grizzly" , "lift" , "finagle"
, "scalatra" , "play-scala" , "play-slick" , "unfiltered"
],[ "grails" , "hapi" , "ringo" , "nodejs" , "express" , "ringo-conv"
, "openresty" , "php" , "yaf" , "cake" , "fuel" , "slim" , "silex"
, "kohana" , "laravel" , "lithium" , "phalcon" , "phreeze" , "micromvc"
, "symfony2" , "codeigniter" , "flask" , "django" , "tornado" , "rails"
, "sinatra"
],[ "onion" , "nancy" , "aspnet-mvc" , "servicestack" , "cpoll-pool"
, "cpoll-cppsp" , "dart" , "go" , "revel" , "kelp" , "plack"
, "dancer" , "web-simple" , "mojolicious"
],[
],[
]];

        // var essentialVector=[10000,100,1,0,0,0];
        // var importantVector=[1024,256,64,16,4,1];
        // var normalVector=[32,16,8,4,2,1];
        // var somehowVector=[10,8,6,4,2,1];
        // var whateverVector=[1,1,1,1,1,1];

        var ninfty=Number.NEGATIVE_INFINITY;
        var essentialVector=[11,7,0,-1000,-1000,-1000];
        var importantVector=[10,8,6,4,2,0];
        var normalVector=[5,4,3,2,1,0];
        var somehowVector=[2,2,1,1,0,0];
        var whateverVector=[0,0,0,0,0,0];

        var framework=[];

        for (var i=0;lt(i,efficiencyClusters.length);i++) {
            for (var j=0;lt(j,efficiencyClusters[i].length);j++) {
                framework[efficiencyClusters[i][j]]={};
            }
        }
        $(["efficiency"
          ,"popularity"
          ,"expressiveness"
          ,"robustness"]).each(function(){
            var tab;
            eval("tab = "+this+"Clusters;");
            for (var i=0;lt(i,tab.length);i++) {
                for (var j=0;lt(j,tab[i].length);j++) {
                    eval("framework[tab[i][j]]."+this+"= i;");
                }
            }
          });

        function setLine(name,vector) {
            $('#' + name+' td input').each(function(i){
                var len = vector.length;
                if (lt(i,len)) {
                    $(this).val(vector[i]); }});}
        $(['t-expressiveness'
          ,'t-popularity'
          ,'t-efficiency'
          ,'t-robustness']).each(function(){
                    var name='#'+this;
                    var tdinput=$('<td align="right"><input style="display: inline-block;width:3.2em;text-align:right" type="text"></input></td>'.repeat(6));
                    $(name).append(tdinput);
                    $(name).append($('<td>'+
                        '<select style="width:6em" id="s-'+this+'">' +
                        '<option value="essential">Essential</option>' +
                        '<option value="important">Important</option>' +
                        '<option value="normal" selected="t">Normal</option>' +
                        '<option value="somehow">Somehow</option>' +
                        '<option value="whatever">Unsignificant</option>' +
                        '</select>' +
                        '</td>' ));
                    if (this == "t-expressiveness") {
                        setLine(this,essentialVector);
                        $(name+' select').val("essential");
                    } else if (this == "t-popularity") {
                        setLine(this,normalVector);
                        $(name+' select').val("normal");
                    } else if (this == "t-efficiency") {
                        setLine(this,importantVector);
                        $(name+' select').val("important");
                    } else if (this == "t-robustness") {
                        setLine(this,importantVector);
                        $(name+' select').val("important");
                    }
                    var strthis=''+this;
                    $("#s-"+this).change(function(){
                            var val=$("#s-"+strthis+" option:selected").val();
                            var tab;
                            eval('tab='+val+'Vector');
                            setLine(strthis,tab);
                            updateResult();
                        });
                });
        function updateResult(){
            var scoreMatrix=[[0,0,0,0,0,0]
                            ,[0,0,0,0,0,0]
                            ,[0,0,0,0,0,0]
                            ,[0,0,0,0,0,0]
                            ];
            $(['t-expressiveness'
              ,'t-popularity'
              ,'t-efficiency'
              ,'t-robustness']).each(function(i){
                $("#"+this+" td input").each(function(j){
                    scoreMatrix[i][j]=$(this).val(); }) });
            var result=[];
            for (key in framework) {
                framework[key].score =
                    parseInt(scoreMatrix[0][framework[key].expressiveness]) +
                    parseInt(scoreMatrix[1][framework[key].popularity]) +
                    parseInt(scoreMatrix[2][framework[key].efficiency]) +
                    parseInt(scoreMatrix[3][framework[key].robustness]);
                result.push([key,framework[key].score]);
            }
            result.sort(function(a,b){return b[1] - a[1];});
            var winners=[];
            var i=0;
            var maxscore=result[0][1];
            while ((lt(i,result.length)) && (result[i][1]==maxscore)){
                winners.push(result[i]);
                i+=1;
            }
            if (winners.length == 1) {
                $('#result').html('<'+'p style="text-align: center">And the winner is<'+'br/><'+'strong>'+result[0][0]+'<'+'/strong> ('+languageOf[result[0][0]]+')<'+'/p><'+'table><'+'tr><'+'th>position<'+'/th><'+'th>framework<'+'/th><'+'th>language<'+'/th><'+'th align="right">score<'+'/th><'+'/tr><'+'/table>');
            } else {
                var listwinners=new String;
                for (i=0;lt(i,winners.length);i++){
                    listwinners=listwinners+bal('strong', winners[i][0] ) + " ("+languageOf[winners[i][0]]+")"+ret();}
                $('#result').html('<'+'p style="text-align: center">And the winners are<'+'br/>' + listwinners + '<'+'table><'+'tr><'+'th>position<'+'/th><'+'th>framework<'+'/th><'+'th>language<'+'/th><'+'th align="right">score<'+'/th><'+'/tr><'+'/table>');
            }
            for (k=0;lt(k,10);k++){
                $('#result table').append('<'+'tr><'+'td>'+(k+1)+'<'+'/td><'+'td>'+result[k][0]+'<'+'/td><'+'td>'+languageOf[result[k][0]]+'<'+'/td><'+'td><'+'code>'+result[k][1]+'<'+'/code><'+'/td><'+'/tr>');
            }
        }
        $('#compute').click(updateResult);
        $("#choice-matrix input[type='text']").change(updateResult);
        $("#choice-matrix input[type='text']").keyup(updateResult);
        updateResult();

        // Show hide tables in the article
        $('#toggle-expressiveness-table').click(function(){
                                        $('#expressiveness-table').toggle();
                                        });
        $('#toggle-robustness-table').click(function(){
                                        $('#robustness-table').toggle();
                                        });
        $('#expressiveness-table').toggle();
        $('#robustness-table').toggle();

    } else {
        setTimeout(run,50);
    }
        }
        run();
    })();
// ]]></script>

<p>I didn’t had the courage in explaining in what the scoring system is good. Mostly, if you use product instead of sum for the score you could use power of <span class="math"><em>e</em></span> for the values in the matrix. And you could see the matrix as a probability matrix (each line sum to 1). Which provide a slighly better intuition on whats going on.</p>
<p>Remember only that values are exponential. Do not double an already big value for example the effect would be extreme.</p>
<h2 id="conclusion">Conclusion</h2>
<p>All of this is based as most as I could on objective data. The choice method seems both rather rational and classical. It is now up to you to edit the score matrix to set your needs.</p>
<p>I know that in the current state there are many flaws. But it is a first system to help make a choice rationally.</p>
<p>I encourage you to go further if you are not satisfied by my method.</p>
<p>The source code for the matrix shouldn’t be too hard to read. Just read the source of this webpage. You could change the positionning of some frameworks if you believe I made some mistake by placing them in some bad clusters.</p>
<p>So I hope this tool will help you in making your life easier.</p>]]></summary>
</entry>
<entry>
    <title>Hakyll setup</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Hakyll-setup/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Hakyll-setup/index.html</id>
    <published>2013-03-16T00:00:00Z</published>
    <updated>2013-03-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Hakyll-setup/main.png" alt="Main image"/>
</div>

<div class="intro">


<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> Comment j’utilise <a href="http://jaspervdj.be/hakyll">hakyll</a>. Abréviations, corrections typographiques, multi-language, utilisation d’<code>index.html</code>, etc…</p>
</div>

<p>Ce site web est fait avec <a href="http://jaspervdj.be/hakyll">Hakyll</a>.</p>
<p><a href="http://jaspervdj.be/hakyll">Hakyll</a> peut être vu comme un <span class="sc"><abbr title="Content Management System">cms</abbr></span> minimaliste. D’une façon plus générale, il s’agit d’une bibliothèque qui facilite la création automatique de fichiers.</p>
<p>D’un point de vue utilisateur voici comment j’écris mes articles&nbsp;:</p>
<ol style="list-style-type: decimal">
<li>J’ouvre un éditeur de texte (vim dans mon cas). J’édite un fichier markdow qui ressemble à ça :</li>
</ol>
<pre class="markdown"><code>Un titre de page
================

Un titre de chapitre
--------------------

Azur, nos bêtes sont bondées d&#39;un cri.
Je m&#39;éveille songeant au fruit noir de l&#39;anibe dans sa cupule
véruqueuse et tronquée.

Saint John Perse.

### Titre 3

&gt; C&#39;est un blockquote.
&gt;
&gt; C&#39;est un second paragraphe dans le blockquote
&gt;
&gt; ## C&#39;est un H2 dans un blockquote</code></pre>
<ol start="2" style="list-style-type: decimal">
<li>J’ouvre mon navigateur et je rafraichis de temps en temps pour voir les changements.</li>
<li>Une fois satisfait, je lance un script minimal qui fait grosso modo un simple <code>git push</code>. Mon blog est hébergé sur <a href="http://github.com">github</a>.</li>
</ol>
<p>A ne pas y regarder de trop près, on peut réduire le rôle d’Hakyll à&nbsp;:</p>
<blockquote>
<p>Créer (resp. mettre à jour) un fichier <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> lorsque je crée (resp. modifie) un fichier markdown.</p>
</blockquote>
<p>Bien que cela semble facile, il y a de nombreux détails cachés&nbsp;:</p>
<ul>
<li>Ajouter des métadatas comme des mots clés</li>
<li>Créer un page archive qui contient la liste de tous les articles</li>
<li>Gérer les fichier statiques</li>
<li>Créer un flux <span class="sc"><abbr title="Rich Site Summary">rss</abbr></span></li>
<li>Filtrer le contenu</li>
<li>Gérer les dépendances</li>
</ul>
<p>Le travail d’Hakyll est de vous aider avec tout ça. Commençons par expliquer les concepts basiques.</p>
<h2 id="les-concepts-et-la-syntaxe">Les concepts et la syntaxe</h2>
<div>
<img src="/Scratch/img/blog/Hakyll-setup/overview.png" alt="Overview"/>
</div>

<p>Pour chaque fichier que vous créer, il faut fournir&nbsp;:</p>
<ul>
<li>un chemin de destination</li>
<li>une liste de filtres du contenu</li>
</ul>
<p>Commençons par le cas le plus simple ; les fichiers statiques (images, fontes, etc…) Généralement, vous avec un répertoire source (ici le répertoire courant) et une répertoire destination <code>_site</code>.</p>
<p>Le code Hakyll est&nbsp;:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- pour chaque fichier dans le répertoire static</span>
match <span class="st">&quot;static/*&quot;</span> <span class="kw">do</span>
  <span class="co">-- on ne change pas le nom ni le répertoire</span>
  route   idRoute
  <span class="co">-- on ne modifie pas le contenu</span>
  compile copyFileCompiler</code></pre>
<p>Ce programme va copier <code>static/foo.jpg</code> dans <code>_site/static/foo.jpg</code>. C’est un peu lourd pour un simple <code>cp</code>. Maintenant comment faire pour transformer automatiquement un fichier markdown dans le bon <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span>?</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- pour chaque fichier avec un extension md</span>
match <span class="st">&quot;posts/*.md&quot;</span> <span class="kw">do</span>
  <span class="co">-- changer son extension en html</span>
  route <span class="fu">$</span> setExtension <span class="st">&quot;html&quot;</span>
  <span class="co">-- utiliser la librairie pandoc pour compiler le markdown en html</span>
  compile <span class="fu">$</span> pandocCompiler</code></pre>
<p>Si vous créez un fichier <code>posts/toto.md</code>, cela créera un fichier <code>_site/posts/toto.html</code>.</p>
<p>Si le fichier <code>posts/foo.md</code> contient</p>
<pre class="markdown"><code># Cthulhu

ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah&#39;nagl fhtagn</code></pre>
<p>le fichier <code>_site/posts/foo.html</code>, contiendra</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;h1&gt;</span>Cthulhu<span class="kw">&lt;/h1&gt;</span>
<span class="kw">&lt;p&gt;</span>ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah&#39;nagl fhtagn<span class="kw">&lt;/p&gt;</span></code></pre>
<p>Mais horreur ! <code>_site/posts/cthulhu.html</code> n’est pas un <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> complet. Il ne possède ni header, ni footer, etc… C’est ici que nous utilisons des templates. J’ajoute une nouvelle directive dans le bloc “compile”.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;posts/*.md&quot;</span> <span class="kw">do</span>
  route <span class="fu">$</span> setExtension <span class="st">&quot;html&quot;</span>
  compile <span class="fu">$</span> pandocCompiler
    <span class="co">-- use the template with the current content</span>
    <span class="highlight"><span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> defaultContext</span></code></pre>
<p>Maintenant si <code>templates/posts.html</code> contient:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;html&gt;</span>
  <span class="kw">&lt;head&gt;</span>
    <span class="kw">&lt;title&gt;</span>How could I get the title?<span class="kw">&lt;/title&gt;</span>
  <span class="kw">&lt;/head&gt;</span>
  <span class="kw">&lt;body&gt;</span>
    <span class="highlight">$body$</span>
  <span class="kw">&lt;/body&gt;</span>
<span class="kw">&lt;/html&gt;</span></code></pre>
<p>Maintenant notre <code>ctuhlhu.html</code> contient</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;html&gt;</span>
  <span class="kw">&lt;head&gt;</span>
    <span class="kw">&lt;title&gt;</span>How could I get the title?<span class="kw">&lt;/title&gt;</span>
  <span class="kw">&lt;/head&gt;</span>
  <span class="kw">&lt;body&gt;</span>
    <span class="highlight"><span class="kw">&lt;h1&gt;</span>Cthulhu<span class="kw">&lt;/h1&gt;</span></span>
    <span class="highlight"><span class="kw">&lt;p&gt;</span>ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah&#39;nagl fhtagn<span class="kw">&lt;/p&gt;</span></span>
  <span class="kw">&lt;/body&gt;</span>
<span class="kw">&lt;/html&gt;</span></code></pre>
<p>C’est facile. Mais il reste un problème à résoudre. Comment pouvons-nous changer le titre ? Ou par exemple, ajouter des mots clés ?</p>
<p>La solution est d’utiliser les <code>Context</code>s. Pour cela, nous devrons ajouter des <em>metadonnées</em> à notre markdown<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup>.</p>
<pre class="markdown"><code><span class="highlight">--- </span>
<span class="highlight">title: Cthulhu</span>
<span class="highlight">--- </span>
# Cthulhu

ph&#39;nglui mglw&#39;nafh Cthulhu R&#39;lyeh wgah&#39;nagl fhtagn</code></pre>
<p>Et modifier légèrement notre template&nbsp;:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;html&gt;</span>
  <span class="kw">&lt;head&gt;</span>
    <span class="kw">&lt;title&gt;</span><span class="highlight">$title$</span><span class="kw">&lt;/title&gt;</span>
  <span class="kw">&lt;/head&gt;</span>
  <span class="kw">&lt;body&gt;</span>
    $body$
  <span class="kw">&lt;/body&gt;</span>
<span class="kw">&lt;/html&gt;</span></code></pre>
<p>Super facile!</p>
<p>La suite de l’article est en Anglais. Je la traduirai volontier si suffisamment de personnes me le demande gentillement.</p>
<h2 id="real-customization">Real customization</h2>
<p>Now that we understand the basic functionality. How to:</p>
<ul>
<li>use SASS?</li>
<li>add keywords?</li>
<li>simplify <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span>?</li>
<li>create an archive page?</li>
<li>create an <span class="sc"><abbr title="Rich Site Summary">rss</abbr></span> feed?</li>
<li>filter the content?</li>
<li>add abbreviations support?</li>
<li>manage two languages?</li>
</ul>
<h3 id="use-sass">Use SASS</h3>
<p>That’s easy. Simply call the executable using <code>unixFilter</code>. Of course you’ll have to install SASS (<code>gem install sass</code>). And we also use compressCss to gain some space.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;css/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
    route   <span class="fu">$</span> setExtension <span class="st">&quot;css&quot;</span>
    compile <span class="fu">$</span> getResourceString <span class="fu">&gt;&gt;=</span>
              withItemBody (unixFilter <span class="st">&quot;sass&quot;</span> [<span class="st">&quot;--trace&quot;</span>]) <span class="fu">&gt;&gt;=</span>
              return <span class="fu">.</span> fmap compressCss</code></pre>
<h3 id="add-keywords">Add keywords</h3>
<p>In order to help to reference your website on the web, it is nice to add some keywords as meta datas to your <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> page.</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;meta</span><span class="ot"> name=</span><span class="st">&quot;keywords&quot;</span>
<span class="ot">      content=</span><span class="st">&quot;Cthulhu, Yog-Sothoth, Shub-Niggurath&quot;</span><span class="kw">&gt;</span></code></pre>
<p>In order to add keywords, we could not directly use the markdown metadatas. Because, without any, there should be any meta tag in the <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span>.</p>
<p>An easy answer is to create a <code>Context</code> that will contains the meta tag.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- metaKeywordContext will return a Context containing a String</span>
<span class="ot">metaKeywordContext ::</span> <span class="dt">Context</span> <span class="dt">String</span>
<span class="co">-- can be reached using $metaKeywords$ in the templates</span>
<span class="co">-- Use the current item (markdown file)</span>
metaKeywordContext <span class="fu">=</span> field <span class="st">&quot;metaKeywords&quot;</span> <span class="fu">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span>
  <span class="co">-- tags contains the content of the &quot;tags&quot; metadata</span>
  <span class="co">-- inside the item (understand the source)</span>
  tags <span class="ot">&lt;-</span> getMetadataField (itemIdentifier item) <span class="st">&quot;tags&quot;</span>
  <span class="co">-- if tags is empty return an empty string</span>
  <span class="co">-- in the other case return</span>
  <span class="co">--   &lt;meta name=&quot;keywords&quot; content=&quot;$tags$&quot;&gt;</span>
  return <span class="fu">$</span> maybe <span class="st">&quot;&quot;</span> showMetaTags tags
    <span class="kw">where</span>
      showMetaTags t <span class="fu">=</span> <span class="st">&quot;&lt;meta name=\&quot;keywords\&quot; content=\&quot;&quot;</span>
                       <span class="fu">++</span> t <span class="fu">++</span> <span class="st">&quot;\&quot;&gt;\n&quot;</span></code></pre>
<p>Then we pass this <code>Context</code> to the <code>loadAndApplyTemplate</code> function:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;posts/*.md&quot;</span> <span class="kw">do</span>
  route <span class="fu">$</span> setExtension <span class="st">&quot;html&quot;</span>
  compile <span class="fu">$</span> pandocCompiler
    <span class="co">-- use the template with the current content</span>
    <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>
            (defaultContext <span class="highlight"><span class="fu">&lt;&gt;</span> metaKeywordContext</span>)</code></pre>
<blockquote>
<p>☞ Here are the imports I use for this tutorial.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="kw">import</span>           Control.Monad          (forM,forM_)
<span class="kw">import</span>           Data.List              (sortBy,isInfixOf)
<span class="kw">import</span>           Data.Monoid            ((&lt;&gt;),mconcat)
<span class="kw">import</span>           Data.Ord               (comparing)
<span class="kw">import</span>           Hakyll
<span class="kw">import</span>           System.Locale          (defaultTimeLocale)
<span class="kw">import</span>           System.FilePath.Posix  (takeBaseName,takeDirectory
                                         ,(<span class="fu">&lt;/&gt;</span>),splitFileName)</code></pre>
</blockquote>
<h3 id="simplify-url">Simplify <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span></h3>
<p>What I mean is to use url of the form:</p>
<pre><code>http://domain.name/post/title-of-the-post/</code></pre>
<p>I prefer this than having to add file with <code>.html</code> extension. We have to change the default Hakyll route behavior. We create another function <code>niceRoute</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- replace a foo/bar.md by foo/bar/index.html</span>
<span class="co">-- this way the url looks like: foo/bar in most browsers</span>
<span class="ot">niceRoute ::</span> <span class="dt">Routes</span>
niceRoute <span class="fu">=</span> customRoute createIndexRoute
  <span class="kw">where</span>
    createIndexRoute ident <span class="fu">=</span>
        takeDirectory p <span class="fu">&lt;/&gt;</span> takeBaseName p <span class="fu">&lt;/&gt;</span> <span class="st">&quot;index.html&quot;</span>
    <span class="kw">where</span> p<span class="fu">=</span>toFilePath ident</code></pre>
<p>Not too difficult. But! There might be a problem. What if there is a <code>foo/index.html</code> link instead of a clean <code>foo/</code> in some content?</p>
<p>Very simple, we simply remove all ‘/index.html’ to all our links.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- replace url of the form foo/bar/index.html by foo/bar</span>
<span class="ot">removeIndexHtml ::</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)
removeIndexHtml item <span class="fu">=</span> return <span class="fu">$</span> fmap (withUrls removeIndexStr) item
  <span class="kw">where</span>
<span class="ot">    removeIndexStr ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
    removeIndexStr url <span class="fu">=</span> <span class="kw">case</span> splitFileName url <span class="kw">of</span>
        (dir, <span class="st">&quot;index.html&quot;</span>) <span class="fu">|</span> isLocal dir <span class="ot">-&gt;</span> dir
        _                                 <span class="ot">-&gt;</span> dir
        <span class="kw">where</span> islocal uri <span class="fu">=</span> not (isInfixOf <span class="st">&quot;://&quot;</span> uri)</code></pre>
<p>And we apply this filter at the end of our compilation</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;posts/*.md&quot;</span> <span class="kw">do</span>
  <span class="highlight">route <span class="fu">$</span> niceRoute</span>
  compile <span class="fu">$</span> pandocCompiler
    <span class="co">-- use the template with the current content</span>
    <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> defaultContext
    <span class="highlight"><span class="fu">&gt;&gt;=</span> removeIndexStr</span></code></pre>
<h3 id="create-an-archive-page">Create an archive page</h3>
<p>Creating an archive start to be difficult. There is an example in the default Hakyll example. Unfortunately, it assumes all posts prefix their name with a date like in <code>2013-03-20-My-New-Post.md</code>.</p>
<p>I migrated from an older blog and didn’t want to change my <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span>. Also I prefer not to use any filename convention. Therefore, I add the date information in the metadata <code>published</code>. And the solution is here:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;archive.md&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
  route <span class="fu">$</span> niceRoute
  compile <span class="fu">$</span> <span class="kw">do</span>
    body <span class="ot">&lt;-</span> getResourceBody
    return <span class="fu">$</span> renderPandoc body
      <span class="highlight"><span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/archive.html&quot;</span> archiveCtx</span>
      <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="highlight"><span class="st">&quot;templates/base.html&quot;</span></span> defaultContext
      <span class="fu">&gt;&gt;=</span> removeIndexHtml</code></pre>
<p>Where <code>templates/archive.html</code> contains</p>
<pre class="sourceCode html"><code class="sourceCode html">$body$

<span class="kw">&lt;ul&gt;</span>
    $posts$
<span class="kw">&lt;/ul&gt;</span></code></pre>
<p>And <code>base.html</code> is a standard template (simpler than <code>post.html</code>).</p>
<p><code>archiveCtx</code> provide a context containing an <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> representation of a list of posts in the metadata named <code>posts</code>. It will be used in the <code>templates/archive.html</code> file with <code>$posts$</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">archiveCtx <span class="fu">=</span>
  defaultContext <span class="fu">&lt;&gt;</span>
  metaKeywordContext <span class="fu">&lt;&gt;</span>
  <span class="highlight">field <span class="st">&quot;posts&quot;</span> (\_ <span class="ot">-&gt;</span> postList createdFirst)</span></code></pre>
<p><code>postList</code> returns an <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> representation of a list of posts given an Item sort function. The representation will apply a minimal template on all posts. Then it concatenate all the results. The template is <code>post-item.html</code>:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;li&gt;&lt;a</span><span class="ot"> href=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$published$ - $title$<span class="kw">&lt;/a&gt;&lt;/li&gt;</span></code></pre>
<p>Here is how it is done:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">postList ::</span> [<span class="dt">Item</span> <span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Compiler</span> [<span class="dt">Item</span> <span class="dt">String</span>]
            <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span>
postList sortFilter <span class="fu">=</span> <span class="kw">do</span>
    <span class="co">-- sorted posts</span>
    posts   <span class="ot">&lt;-</span> loadAll <span class="st">&quot;post/*&quot;</span> <span class="fu">&gt;&gt;=</span> sortFilter
    itemTpl <span class="ot">&lt;-</span> loadBody <span class="st">&quot;templates/post-item.html&quot;</span>
    <span class="co">-- we apply the template to all post</span>
    <span class="co">-- and we concatenate the result.</span>
    <span class="co">-- list is a string</span>
    list    <span class="ot">&lt;-</span> applyTemplateList itemTpl defaultContext posts
    return list</code></pre>
<p><code>createdFirst</code> sort a list of item and put it inside <code>Compiler</code> context. We need to be in the <code>Compiler</code> context to access metadatas.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">createdFirst ::</span> [<span class="dt">Item</span> <span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Compiler</span> [<span class="dt">Item</span> <span class="dt">String</span>]
createdFirst items <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- itemsWithTime is a list of couple (date,item)</span>
  itemsWithTime <span class="ot">&lt;-</span> forM items <span class="fu">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span>
    <span class="co">-- getItemUTC will look for the metadata &quot;published&quot; or &quot;date&quot;</span>
    <span class="co">-- then it will try to get the date from some standard formats</span>
    utc <span class="ot">&lt;-</span> getItemUTC defaultTimeLocale <span class="fu">$</span> itemIdentifier item
    return (utc,item)
  <span class="co">-- we return a sorted item list</span>
  return <span class="fu">$</span> map snd <span class="fu">$</span> reverse <span class="fu">$</span> sortBy (comparing fst) itemsWithTime</code></pre>
<p>It wasn’t so easy. But it works pretty well.</p>
<h3 id="create-an-rss-feed">Create an <span class="sc"><abbr title="Rich Site Summary">rss</abbr></span> feed</h3>
<p>To create an <span class="sc"><abbr title="Rich Site Summary">rss</abbr></span> feed, we have to:</p>
<ul>
<li>select only the lasts posts.</li>
<li>generate partially rendered posts (no css, js, etc…)</li>
</ul>
<p>We could then render the posts twice. One for <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> rendering and another time for <span class="sc"><abbr title="Rich Site Summary">rss</abbr></span>. Remark we need to generate the <span class="sc"><abbr title="Rich Site Summary">rss</abbr></span> version to create the <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> one.</p>
<p>One of the great feature of Hakyll is to be able to save snapshots. Here is how:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">match <span class="st">&quot;posts/*.md&quot;</span> <span class="kw">do</span>
  route <span class="fu">$</span> setExtension <span class="st">&quot;html&quot;</span>
  compile <span class="fu">$</span> pandocCompiler
    <span class="co">-- save a snapshot to be used later in rss generation</span>
    <span class="highlight"><span class="fu">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
    <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> defaultContext</code></pre>
<p>Now for each post there is a snapshot named “content” associated. The snapshots are created before applying a template and after applying pandoc. Furthermore feed don’t need a source markdown file. Then we create a new file from no one. Instead of using <code>match</code>, we use <code>create</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">create [<span class="st">&quot;feed.xml&quot;</span>] <span class="fu">$</span> <span class="kw">do</span>
      route idRoute
      compile <span class="fu">$</span> <span class="kw">do</span>
        <span class="co">-- load all &quot;content&quot; snapshots of all posts</span>
        loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span>
        <span class="co">-- take the latest 10</span>
        <span class="fu">&gt;&gt;=</span> (fmap (take <span class="dv">10</span>)) <span class="fu">.</span> createdFirst
        <span class="co">-- renderAntom feed using some configuration</span>
        <span class="fu">&gt;&gt;=</span> renderAtom feedConfiguration feedCtx
      <span class="kw">where</span>
<span class="ot">        feedCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span>
        feedCtx <span class="fu">=</span>  defaultContext <span class="fu">&lt;&gt;</span>
                   <span class="co">-- $description$ will render as the post body</span>
                   <span class="highlight">bodyField <span class="st">&quot;description&quot;</span></span></code></pre>
<p>The <code>feedConfiguration</code> contains some general informations about the feed.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">feedConfiguration ::</span> <span class="dt">FeedConfiguration</span>
feedConfiguration <span class="fu">=</span> <span class="dt">FeedConfiguration</span>
  { feedTitle <span class="fu">=</span> <span class="st">&quot;Great Old Ones&quot;</span>
  , feedDescription <span class="fu">=</span> <span class="st">&quot;This feed provide information about Great Old Ones&quot;</span>
  , feedAuthorName <span class="fu">=</span> <span class="st">&quot;Abdul Alhazred&quot;</span>
  , feedAuthorEmail <span class="fu">=</span> <span class="st">&quot;abdul.alhazred@great-old-ones.com&quot;</span>
  , feedRoot <span class="fu">=</span> <span class="st">&quot;http://great-old-ones.com&quot;</span>
  }</code></pre>
<p>Great idea certainly steal from <a href="http://nanoc.ws">nanoc</a> (my previous blog engine)!</p>
<h3 id="filter-the-content">Filter the content</h3>
<p>As I just said, <a href="http://nanoc.ws">nanoc</a> was my preceding blog engine. It is written in Ruby and as Hakyll, it is quite awesome. And one thing Ruby does more naturally than Haskell is regular expressions. I had a <em>lot</em> of filters in nanoc. I lost some because I don’t use them much. But I wanted to keep some. Generally, filtering the content is just a way to apply to the body a function of type <code>String -&gt; String</code>.</p>
<p>Also we generally want prefilters (to filter the markdown) and postfilters (to filter the <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> after the pandoc compilation).</p>
<p>Here is how I do it:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">markdownPostBehavior <span class="fu">=</span> <span class="kw">do</span>
  route <span class="fu">$</span> niceRoute
  compile <span class="fu">$</span> <span class="kw">do</span>
    body <span class="ot">&lt;-</span> getResourceBody
    <span class="highlight">prefilteredText <span class="ot">&lt;-</span> return <span class="fu">$</span> (fmap preFilters body)</span>
    <span class="highlight">return <span class="fu">$</span> renderPandoc prefilteredText</span>
    <span class="highlight"><span class="fu">&gt;&gt;=</span> applyFilter postFilters</span>
    <span class="fu">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span>
    <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    yContext
    <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/boilerplate.html&quot;</span> yContext
    <span class="fu">&gt;&gt;=</span> relativizeUrls
    <span class="fu">&gt;&gt;=</span> removeIndexHtml</code></pre>
<p>Where</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">applyFilter strfilter str <span class="fu">=</span> return <span class="fu">$</span> (fmap <span class="fu">$</span> strfilter) str
<span class="ot">preFilters ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
<span class="ot">postFilters ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></code></pre>
<p>Now we have a simple way to filter the content. Let’s augment the markdown ability.</p>
<h3 id="add-abbreviations-support">Add abbreviations support</h3>
<p>Comparing to <span style="text-transform: uppercase">L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span>, a very annoying markdown limitation is the lack of abbreviations.</p>
<p>Fortunately we can filter our content. And here is the filter I use:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">abbreviationFilter ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
abbreviationFilter <span class="fu">=</span> replaceAll <span class="st">&quot;%[a-zA-Z0-9_]*&quot;</span> newnaming
  <span class="kw">where</span>
    newnaming matched <span class="fu">=</span> <span class="kw">case</span> M.lookup (tail matched) abbreviations <span class="kw">of</span>
                          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> matched
                          <span class="dt">Just</span> v <span class="ot">-&gt;</span> v
<span class="ot">abbreviations ::</span> <span class="dt">Map</span> <span class="dt">String</span> <span class="dt">String</span>
abbreviations <span class="fu">=</span> M.fromList
    [ (<span class="st">&quot;html&quot;</span>, <span class="st">&quot;&lt;span class=\&quot;sc\&quot;&gt;html&lt;/span&gt;&quot;</span>)
    , (<span class="st">&quot;css&quot;</span>, <span class="st">&quot;&lt;span class=\&quot;sc\&quot;&gt;css&lt;/span&gt;&quot;</span>)
    , (<span class="st">&quot;svg&quot;</span>, <span class="st">&quot;&lt;span class=\&quot;sc\&quot;&gt;svg&lt;/span&gt;&quot;</span>)
    , (<span class="st">&quot;xml&quot;</span>, <span class="st">&quot;&lt;span class=\&quot;sc\&quot;&gt;xml&lt;/span&gt;&quot;</span>)
    , (<span class="st">&quot;xslt&quot;</span>, <span class="st">&quot;&lt;span class=\&quot;sc\&quot;&gt;xslt&lt;/span&gt;&quot;</span>) ]</code></pre>
<p>It will search for all string starting by ‘%’ and it will search in the <code>Map</code> if there is a corresponding abbreviation. If there is one, we replace the content. Otherwise we do nothing.</p>
<p>Do you really believe I type</p>
<pre class="sourceCode html wrap"><code class="sourceCode html"><span class="kw">&lt;span</span><span class="ot"> style=</span><span class="st">&quot;text-transform: uppercase&quot;</span><span class="kw">&gt;</span>L<span class="kw">&lt;sup</span><span class="ot"> style=</span><span class="st">&quot;vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em&quot;</span><span class="kw">&gt;</span>a<span class="kw">&lt;/sup&gt;</span>T<span class="kw">&lt;sub</span><span class="ot"> style=</span><span class="st">&quot;vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em&quot;</span><span class="kw">&gt;</span>e<span class="kw">&lt;/sub&gt;</span>X<span class="kw">&lt;/span&gt;</span></code></pre>
<p>each time I write <span style="text-transform: uppercase">L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span>?</p>
<h3 id="manage-two-languages">Manage two languages</h3>
<p>Generally I write my post in English and French. And this is more difficult than it appears. For example, I need to filter the language in order to get the right list of posts. I also use some words in the templates and I want them to be translated.</p>
<p>A nice tip is to pass arguments to a context and use it in the template. Typically I write:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;$otherLanguagePath$&quot;</span>
<span class="ot">	onclick=</span><span class="st">&quot;setLanguage(&#39;$otherlanguage$&#39;)&quot;</span><span class="kw">&gt;</span>
	<span class="highlight">$trad changeLanguage$</span> <span class="kw">&lt;/a&gt;</span></code></pre>
<p>First I create a Map containing all translations.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Trad</span> <span class="fu">=</span> <span class="dt">Trad</span> {<span class="ot"> frTrad ::</span> <span class="dt">String</span>,<span class="ot"> enTrad ::</span> <span class="dt">String</span> }

<span class="ot">trads ::</span> <span class="dt">Map</span> <span class="dt">String</span> <span class="dt">Trad</span>
trads <span class="fu">=</span> M.fromList <span class="fu">$</span> map toTrad [
   (<span class="st">&quot;changeLanguage&quot;</span>,
      (<span class="st">&quot;English&quot;</span>
      , <span class="st">&quot;Français&quot;</span>))
  ,(<span class="st">&quot;switchCss&quot;</span>,
      (<span class="st">&quot;Changer de theme&quot;</span>
      ,<span class="st">&quot;Change Theme&quot;</span>))
  ,(<span class="st">&quot;socialPrivacy&quot;</span>,
      (<span class="st">&quot;Ces liens sociaux préservent votre vie privée&quot;</span>
      ,<span class="st">&quot;These social sharing links preserve your privacy&quot;</span>))
  ]
  <span class="kw">where</span>
    toTrad (key,(french,english)) <span class="fu">=</span>
      (key, <span class="dt">Trad</span> { frTrad <span class="fu">=</span> french , enTrad <span class="fu">=</span> english })</code></pre>
<p>Then I create a context taking an argument:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">tradsContext ::</span> <span class="dt">Context</span> a
tradsContext <span class="fu">=</span> functionField <span class="st">&quot;trad&quot;</span> <span class="fu">$</span> \args item <span class="ot">-&gt;</span> <span class="kw">do</span>
  <span class="co">-- get the key</span>
  k <span class="ot">&lt;-</span> getArgs args
  <span class="co">-- get its value (a Trad object)</span>
  v <span class="ot">&lt;-</span> getValue k trads
  <span class="co">-- get the current item language</span>
  lang <span class="ot">&lt;-</span> itemLang item
  <span class="kw">case</span> lang <span class="kw">of</span>
    <span class="st">&quot;en&quot;</span> <span class="ot">-&gt;</span> return (enTrad v)
    <span class="st">&quot;fr&quot;</span> <span class="ot">-&gt;</span> return (frTrad v)
    _    <span class="ot">-&gt;</span> fail <span class="fu">$</span> lang <span class="fu">++</span> <span class="st">&quot; is not a supported language&quot;</span>
  <span class="kw">where</span>
    getArgs [k] <span class="fu">=</span> return k
    getArgs _   <span class="fu">=</span> fail <span class="st">&quot;Wrong arg for trad&quot;</span>
    <span class="co">-- search the Trad associated the key</span>
    getValue key hmap <span class="fu">=</span>
        <span class="kw">case</span> M.lookup key hmap <span class="kw">of</span>
          <span class="dt">Just</span> value <span class="ot">-&gt;</span> return value
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> fail <span class="st">&quot;Traduction not found&quot;</span></code></pre>
<p>In the real code source I also need more functions. But I just wanted to show how to pass parameters to a metadata tag.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The full code is <a href="http://github.com/yogsototh/yblog.git">here</a>. And except from the main file, I use literate Haskell. This way the code should be easier to understand.</p>
<p>If you want to know why I switched from nanoc:</p>
<p>My preceding nanoc website was a bit too messy. So much in fact, that the dependency system recompiled the entire website for any change.</p>
<p>So I had to do something about it. I had two choices:</p>
<ol style="list-style-type: decimal">
<li>Correct my old code (in Ruby)</li>
<li>Duplicate the core functionalities with Hakyll (in Haskell)</li>
</ol>
<p>I added too much functionalities in my nanoc system. Starting from scratch (almost) remove efficiently a lot of unused crap.</p>
<p>So far I am very happy with the switch. A complete build is about 4x faster. I didn’t broke the dependency system this time. As soon as I modify and save the markdown source, I can reload the page in the browser.</p>
<p>I removed a lot of feature thought. Some of them will be difficult to achieve with Hakyll. A typical example:</p>
<p>In nanoc I could take a file like this as source:</p>
<pre class="markdown"><code># Title

content

&lt;code file=&quot;foo.hs&quot;&gt;
main = putStrLn &quot;Cthulhu!&quot;
&lt;/code&gt;</code></pre>
<p>And it will create a file <code>foo.hs</code> which could then be downloaded.</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;h1&gt;</span>Title<span class="kw">&lt;/h1&gt;</span>

<span class="kw">&lt;p&gt;</span>content<span class="kw">&lt;/p&gt;</span>

<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;code/foo.hs&quot;</span><span class="kw">&gt;</span>Download foo.hs<span class="kw">&lt;/a&gt;</span>
<span class="kw">&lt;pre&gt;&lt;code&gt;</span>main = putStrLn &quot;Cthulhu!&quot;<span class="kw">&lt;/code&gt;&lt;/pre&gt;</span></code></pre>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Nous pouvons aussi ajouter ces métadonnées dans un fichier externe (<code>toto.md.metadata</code>).<a href="#fnref1">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>Être correct avec les boutons share</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Social-link-the-right-way/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Social-link-the-right-way/index.html</id>
    <published>2013-03-14T00:00:00Z</published>
    <updated>2013-03-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Social-link-the-right-way/main.png" alt="Main image"/>
</div>

<div class="intro">


<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> Les boutons des réseaux sociaux traquent vos utilisateurs, ont un design incohérent avec celui de votre site, utilisent des ressources, ralentissent le rendu de vos pages.</p>
<p>Faite les choses bien. Utilisez des liens statiques.</p>
<p>Si vous n’avez pas envie de lire, copiez et collez simplement le code suivant dans votre <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span>&nbsp;:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;sociallinks&quot;</span><span class="kw">&gt;</span>
  <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://twitter.com/home?status=$url$&quot;</span>
<span class="ot">     target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Tweet this<span class="kw">&lt;/a&gt;</span> -
  <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://www.facebook.com/sharer/sharer.php?u=$url$&quot;</span>
<span class="ot">     target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Like this<span class="kw">&lt;/a&gt;</span> -
  <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://plus.google.com/share?url=$url$&quot;</span>
<span class="ot">     target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Share on G+<span class="kw">&lt;/a&gt;</span>
<span class="kw">&lt;/div&gt;</span>
<span class="kw">&lt;script&gt;</span>
(<span class="kw">function</span>(){<span class="ot">window</span>.<span class="fu">addEventListener</span>(<span class="st">&quot;DOMContentLoaded&quot;</span>,<span class="kw">function</span>(){
    <span class="kw">var</span> url=<span class="ot">document</span>.<span class="fu">location</span>;
    <span class="kw">var</span> links=<span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;sociallinks&quot;</span>)
                      .<span class="fu">getElementsByTagName</span>(<span class="st">&#39;a&#39;</span>);
    <span class="kw">for</span> (<span class="kw">var</span> i=<span class="dv">0</span>;i!=<span class="ot">links</span>.<span class="fu">length</span>;i++){
        links[i].<span class="fu">setAttribute</span>(<span class="st">&quot;href&quot;</span>,
<span class="er">            links[i].href.replace(&#39;$url$&#39;,url));}})})();</span>
&lt;<span class="ot">/script&gt;</span></code></pre>
</div>

<h2 id="the-problem">The problem</h2>
<p>Ever been on a website and want to tweet about it? Fortunately, the website might have a button to help you. But do you really know what this button do?</p>
<p>The “Like”, “Tweet” and “+1” buttons will call a javascript. It will get access to your cookies. It helps the provider of the button to know who you are.</p>
<p>In plain English, the “+1” button will inform Google you are visiting the website, <strong>even if you don’t click on “+1”</strong>. The same is true for the “like” button for facebook and the “tweet this” button for twitter.</p>
<p>The problem is not only a privacy issue. In fact (sadly <span class="sc"><abbr title="In my Humble Opinion">imho</abbr></span>) this isn’t an issue for most people. These button consume computer ressources. Far more than a simple link. It thus slow down a bit the computer and consume energy. These button could also slow down the rendering of your web page.</p>
<p>Another aspect is their design. Their look and feel is mostly imposed by the provider.</p>
<p>The most problematic aspect in my opinion is to use a third party js on your website. What if tomorrow twitter update their tweet button? If the upgrade broke something for only a minority of people, they won’t fix it. This could occur anytime without any notification. They just have to add a <code>document.write</code> in their <code>js</code> you call asynchronously and BAM! Your website is just an empty blank page. And as you call many external ressources, it can be very difficult to find the origin of the problem.</p>
<p><strong>Using social network buttons:</strong></p>
<ul>
<li>Pros:
<ul>
<li>help user share your website,</li>
<li>can provide a popularity indicator to your users.</li>
</ul></li>
<li>Cons:
<ul>
<li>you help tracking your users,</li>
<li>generally doesn’t follow the design of your website,</li>
<li>use more computer ressources,</li>
<li>slow down your website,</li>
<li>executing third party js can break things silently.</li>
</ul></li>
</ul>
<h2 id="solutions">Solutions</h2>
<p>I will provide you two solutions with the following properties:</p>
<ul>
<li>Pros:
<ul>
<li>help user share your website,</li>
<li>doesn’t follow your user,</li>
<li>use almost no computer ressource,</li>
<li>doesn’t slow down your website,</li>
<li>doesn’t execute any third party js on your website.</li>
</ul></li>
<li>Cons:
<ul>
<li>doesn’t provide any popularity information.</li>
</ul></li>
</ul>
<p><strong>Solution 1 (no js):</strong></p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://twitter.com/home?status=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Tweet this<span class="kw">&lt;/a&gt;</span>

<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://www.facebook.com/sharer/sharer.php?u=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Like this<span class="kw">&lt;/a&gt;</span>

<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://plus.google.com/share?url=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Share on G+<span class="kw">&lt;/a&gt;</span></code></pre>
<p>But you have to replace <code>$url$</code> by the current <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span>.</p>
<p><strong>Solution 2 (Just copy/paste):</strong></p>
<p>If you don’t want to write the <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> yourself, you could use some minimal js:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;sociallinks&quot;</span><span class="kw">&gt;</span>
  <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://twitter.com/home?status=$url$&quot;</span>
<span class="ot">     target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Tweet this<span class="kw">&lt;/a&gt;</span> -
  <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://www.facebook.com/sharer/sharer.php?u=$url$&quot;</span>
<span class="ot">     target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Like this<span class="kw">&lt;/a&gt;</span> -
  <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://plus.google.com/share?url=$url$&quot;</span>
<span class="ot">     target=</span><span class="st">&quot;_blank&quot;</span><span class="kw">&gt;</span>Share on G+<span class="kw">&lt;/a&gt;</span>
<span class="kw">&lt;/div&gt;</span>
<span class="kw">&lt;script&gt;</span>
(<span class="kw">function</span>(){<span class="ot">window</span>.<span class="fu">addEventListener</span>(<span class="st">&quot;DOMContentLoaded&quot;</span>,<span class="kw">function</span>(){
    <span class="kw">var</span> url=<span class="ot">document</span>.<span class="fu">location</span>;
    <span class="kw">var</span> links=<span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;sociallinks&quot;</span>)
                      .<span class="fu">getElementsByTagName</span>(<span class="st">&#39;a&#39;</span>);
    <span class="kw">for</span> (<span class="kw">var</span> i=<span class="dv">0</span>;i!=<span class="ot">links</span>.<span class="fu">length</span>;i++){
        links[i].<span class="fu">setAttribute</span>(<span class="st">&quot;href&quot;</span>,
<span class="er">            links[i].href.replace(&#39;$url$&#39;,url));}})})();</span>
&lt;<span class="ot">/script&gt;</span></code></pre>
<p>Here is the result:</p>
<div style="text-align:center" class="nostar">

<div id="sociallinks">
  
<a href="https://twitter.com/home?status=$url$"
     target="_blank">Tweet this</a> - <a href="http://www.facebook.com/sharer/sharer.php?u=$url$"
     target="_blank">Like this</a> - <a href="https://plus.google.com/share?url=$url$"
     target="_blank">Share on G+</a>
</div>
<script>
(function(){window.addEventListener("DOMContentLoaded",function(){
    var url=document.location;
    var links=document.getElementById("sociallinks")
                      .getElementsByTagName('a');
    for (var i=0;i!=links.length;i++){
        links[i].setAttribute("href",
            links[i].href.replace('$url$',url));}})})();
</script>

</div>

<h2 id="good-looking-solutions">Good looking solutions</h2>
<p>If you don’t want just text but nice icons. You have many choices:</p>
<ul>
<li>Use images <code>&lt;img src=&quot;...&quot;/&gt;</code> in the links.</li>
<li>Use icon fonts</li>
</ul>
<p>As the first solution is pretty straightforward, I’ll explain the second one.</p>
<ol style="list-style-type: decimal">
<li>Download the icon font <a href="http://blog.martianwabbit.com/post/4344642365.html">here</a></li>
<li>put the font file(s) at some place (here ‘fonts/social_font.ttf’ relatively to your <span class="sc">css</span> file)</li>
<li>Add this to your <span class="sc">css</span></li>
</ol>
<pre class="sourceCode css"><code class="sourceCode css"><span class="dv">@font-face</span>
  font-family<span class="dv">:</span> <span class="st">&#39;social&#39;</span>
  src<span class="dv">:</span> url(<span class="st">&#39;fonts/social_font.ttf&#39;</span>) format(<span class="st">&#39;truetype&#39;</span>)
  font-weight<span class="dv">:</span> normal
  font-style<span class="dv">:</span> normal
<span class="fl">.social</span>
  font-family<span class="dv">:</span> social</code></pre>
<p>Now add this to your <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span>:</p>
<p><strong>Solution 1 (without js):</strong></p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://twitter.com/home?status=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span>
<span class="ot">    class=</span><span class="st">&quot;social&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;#116;</span><span class="kw">&lt;/a&gt;</span>
·
<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://www.facebook.com/sharer/sharer.php?u=$url$&quot;</span>
<span class="ot">   target=</span><span class="st">&quot;_blank&quot;</span>
<span class="ot">   class=</span><span class="st">&quot;social&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;#0096;</span><span class="kw">&lt;/a&gt;</span>
·
<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://plus.google.com/share?url=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span>
<span class="ot">    class=</span><span class="st">&quot;social&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;#0103;</span><span class="kw">&lt;/a&gt;</span></code></pre>
<p><strong>Solution 2 (same with a bit more js):</strong></p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;sociallinksunicode&quot;</span><span class="kw">&gt;</span>
<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://twitter.com/home?status=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span>
<span class="ot">    class=</span><span class="st">&quot;social&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;#116;</span><span class="kw">&lt;/a&gt;</span>
·
<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://www.facebook.com/sharer/sharer.php?u=$url$&quot;</span>
<span class="ot">   target=</span><span class="st">&quot;_blank&quot;</span>
<span class="ot">   class=</span><span class="st">&quot;social&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;#0096;</span><span class="kw">&lt;/a&gt;</span>
·
<span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://plus.google.com/share?url=$url$&quot;</span>
<span class="ot">    target=</span><span class="st">&quot;_blank&quot;</span>
<span class="ot">    class=</span><span class="st">&quot;social&quot;</span><span class="kw">&gt;</span><span class="dv">&amp;#0103;</span><span class="kw">&lt;/a&gt;</span>
<span class="kw">&lt;/div&gt;</span>
<span class="kw">&lt;script&gt;</span>
(<span class="kw">function</span>(){<span class="ot">window</span>.<span class="fu">addEventListener</span>(<span class="st">&quot;DOMContentLoaded&quot;</span>,<span class="kw">function</span>(){
    <span class="kw">var</span> url=<span class="ot">document</span>.<span class="fu">location</span>;
    <span class="kw">var</span> links=<span class="ot">document</span>.<span class="fu">getElementById</span>(<span class="st">&quot;sociallinksunicode&quot;</span>)
                      .<span class="fu">getElementsByTagName</span>(<span class="st">&#39;a&#39;</span>);
    <span class="kw">for</span> (<span class="kw">var</span> i=<span class="dv">0</span>;i!=<span class="ot">links</span>.<span class="fu">length</span>;i++){
        links[i].<span class="fu">setAttribute</span>(<span class="st">&quot;href&quot;</span>,
<span class="er">            links[i].href.replace(&#39;$url$&#39;,url));}})})();</span>
&lt;<span class="ot">/script&gt;</span></code></pre>
<p>Here is the result:</p>
<div style="font-size: 2em; text-align: center;" class="nostar">
<div id="sociallinksunicode">
<a href="https://twitter.com/home?status=$url$"
    target="_blank"
    class="social">t</a> · <a href="http://www.facebook.com/sharer/sharer.php?u=$url$"
   target="_blank"
   class="social">`</a> · <a href="https://plus.google.com/share?url=$url$"
    target="_blank"
    class="social">g</a>
</div>
<script>
(function(){window.addEventListener("DOMContentLoaded",function(){
    var url=document.location;
    var links=document.getElementById("sociallinksunicode")
                      .getElementsByTagName('a');
    for (var i=0;i!=links.length;i++){
        links[i].setAttribute("href",
            links[i].href.replace('$url$',url));}})})();
</script>
</div>

<h2 id="conclusion">Conclusion</h2>
<ol style="list-style-type: decimal">
<li>You get your design back,</li>
<li>You stop to help tracking people,</li>
<li>You use less computer ressources and more generally power ressources which is good for the planet,</li>
<li>Your web pages will load faster.</li>
</ol>
<p><em>ps</em>: On my personal website I continue to use Google analytics. Therefore, Google (and only Google, not facebook nor twitter) can track you here. But I might change this in the future.</p>]]></summary>
</entry>
<entry>
    <title>Category Theory Presentation</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Category-Theory-Presentation/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Category-Theory-Presentation/index.html</id>
    <published>2012-12-12T00:00:00Z</published>
    <updated>2012-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-hask-endofunctor.png" alt="Cateogry of Hask's endofunctors"/>

<p>Yesterday I was happy to make a presentation about Category Theory at <a href="http://www.meetup.com/riviera-scala-clojure">Riviera Scala Clojure Meetup</a> (note I used only Haskell for my examples).</p>

<ul><li><a href="http://yogsototh.github.com/Category-Theory-Presentation/categories.html">Click here to go to the HTML presentation.</a>
</li><li><a href="http://yogsototh.github.com/Category-Theory-Presentation/categories.pdf">Click Here to download the PDF slides (<span style="text-transform: uppercase">L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span> not rendered properly)</a>
</li></ul>

<p>If you don't want to read them through an HTML presentations framework or downloading a big PDF
just continue to read as a standard web page.
</p>

<div style="display:none">
\(\newcommand{\F}{\mathbf{F}}\)
\(\newcommand{\E}{\mathbf{E}}\)
\(\newcommand{\C}{\mathcal{C}}\)
\(\newcommand{\D}{\mathcal{D}}\)
\(\newcommand{\id}{\mathrm{id}}\)
\(\newcommand{\ob}[1]{\mathrm{ob}(#1)}\)
\(\newcommand{\hom}[1]{\mathrm{hom}(#1)}\)
\(\newcommand{\Set}{\mathbf{Set}}\)
\(\newcommand{\Mon}{\mathbf{Mon}}\)
\(\newcommand{\Vec}{\mathbf{Vec}}\)
\(\newcommand{\Grp}{\mathbf{Grp}}\)
\(\newcommand{\Rng}{\mathbf{Rng}}\)
\(\newcommand{\ML}{\mathbf{ML}}\)
\(\newcommand{\Hask}{\mathbf{Hask}}\)
\(\newcommand{\Cat}{\mathbf{Cat}}\)
\(\newcommand{\fmap}{\mathtt{fmap}}\)
</div>

<section class="slide" style="text-align: center;">
<h1 style="position: relative;">Category Theory <span class="and">&amp;</span> Programming</h1>
<div><em class="base01">for</em> <a href="http://www.meetup.com/riviera-scala-clojure">Rivieria Scala Clojure</a> (Note this presentation uses Haskell)</div>
<author><em class="base01">by</em> <a href="http://yannesposito.com">Yann Esposito</a></author>
<div style="font-size:.8em; margin: 5em auto">
    <twitter>
        <a href="http://twitter.com/yogsototh">@yogsototh</a>,
     </twitter>
     <googleplus>
        <a href="https://plus.google.com/117858550730178181663">+yogsototh</a>
     </googleplus>
</div>
<div class="flush"></div></section>
<section class="slide">
<h2>Plan</h2>
<ul style="font-size: 2em; font-weight:bold">
    <li><span class="orange">General overview</li>
    <li>Definitions</li>
    <li>Applications</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="not-really-about-cat-glory">Not really about: Cat <span class="and">&amp;</span> glory</h2>
<figure>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/categlory.jpg" alt="Cat n glory" /> <figcaption>credit to Tokuhiro Kawai (川井徳寛)</figcaption>
</figure>

<div class="flush"></div></section>
<section class="slide">
<h2 id="general-overview">General Overview</h2>
<div style="float:right; width: 18%">
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/eilenberg.gif" alt="Samuel Eilenberg"/> <img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/maclaine.jpg" alt="Saunders Mac Lane"/>
</div>

<p><em>Recent Math Field</em><br />1942-45, Samuel Eilenberg <span class="and">&amp;</span> Saunders Mac Lane</p>
<p>Certainly one of the more abstract branches of math</p>
<ul>
<li><em>New math foundation</em><br /> formalism abstraction, package entire theory<sup>★</sup></li>
<li><em>Bridge between disciplines</em><br /> Physics, Quantum Physics, Topology, Logic, Computer Science<sup>☆</sup></li>
</ul>
<p  class="base01" style="border-top: solid 1px; width: 70%; font-size: 0.7em">
★: <a href="http://www.math.harvard.edu/~mazur/preprints/when_is_one.pdf">When is one thing equal to some other thing?, Barry Mazur, 2007</a><br/> ☆: <a href="http://math.ucr.edu/home/baez/rosetta.pdf">Physics, Topology, Logic and Computation: A Rosetta Stone, John C. Baez, Mike Stay, 2009</a>
</p>

<div class="flush"></div></section>
<section class="slide">
<h2 id="from-a-programmer-perspective">From a Programmer perspective</h2>
<blockquote>
<p>Category Theory is a new language/framework for Math</p>
</blockquote>
<ul>
<li>Another way of thinking</li>
<li>Extremely efficient for generalization</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="math-programming-relation">Math Programming relation</h2>
<img class="right" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/buddha.gif" alt="Buddha Fractal"/>
<p>Programming <em><span class="orange">is</span></em> doing Math</p>
<p>Strong relations between type theory and category theory.</p>
<p>Not convinced?<br />Certainly a <em>vocabulary</em> problem.</p>
<p>One of the goal of Category Theory is to create a <em>homogeneous vocabulary</em> between different disciplines.</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="vocabulary">Vocabulary</h2>
<img class="right" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mindblown.gif" alt="mind blown"/>
<p>Math vocabulary used in this presentation:</p>
<blockquote style="width:55%">
<p>Category, Morphism, Associativity, Preorder, Functor, Endofunctor, Categorial property, Commutative diagram, Isomorph, Initial, Dual, Monoid, Natural transformation, Monad, Klesli arrows, κατα-morphism, ...</p>
</blockquote>
<div class="flush"></div></section>
<section class="slide">
<h2 id="programmer-translation">Programmer Translation</h2>
<img class="right" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/readingcat.jpg" alt="lolcat"/>
<table style="width:50%">
<tr><th>
Mathematician
</th><th>
Programmer
</th></tr>
<tr><td>
Morphism
</td><td>
Arrow
</td></tr>
<tr><td>
Monoid
</td><td>
String-like
</td></tr>
<tr><td>
Preorder
</td><td>
Acyclic graph
</td></tr>
<tr><td>
Isomorph
</td><td>
The same
</td></tr>
<tr><td>
Natural transformation
</td><td>
rearrangement function
</td></tr>
<tr><td>
Funny Category
</td><td>
LOLCat
</td></tr>
</table>

<div class="flush"></div></section>
<section class="slide">
<h2>Plan</h2>
<ul style="font-size: 2em; font-weight: bold">
    <li>General overview</li>
    <li> <span class="orange">Definitions</span>
<ul class="base01" style="border-left: 2px solid; padding-left: 1em; font-size: .6em; float: right; font-weight: bold; margin: 0 0 0 1em; width: 17em">
    <li>Category</li>
    <li>Intuition</li>
    <li>Examples</li>
    <li>Functor</li>
    <li>Examples</li>
</ul>
    </li>
    <li>Applications</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Category</h2>

<p>A way of representing <strong><em>things</em></strong> and <strong><em>ways to go between things</em></strong>.</p>

<p> A Category \(\mathcal{C}\) is defined by:</p>
<ul>
	<li> <em>Objects <span class="orange">\(\ob{C}\)</span></em>,</li>
	<li> <em>Morphisms <span class="orange">\(\hom{C}\)</span></em>,</li>
	<li> a <em>Composition law <span class="orange">(∘)</span></em></li>
    <li> obeying some <em>Properties</em>.</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Category: Objects</h2>

<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/objects.png" alt="objects" />

<p>\(\ob{\mathcal{C}}\) is a collection</p>
<div class="flush"></div></section>
<section class="slide">
<h2>Category: Morphisms</h2>

<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/morphisms.png" alt="morphisms"/>

<p>\(A\) and \(B\) objects of \(\C\)<br/>
\(\hom{A,B}\) is a collection of morphisms<br/>
\(f:A→B\) denote the fact \(f\) belongs to \(\hom{A,B}\)</p>
<p>\(\hom{\C}\) the collection of all morphisms of \(\C\)</p>
<div class="flush"></div></section>
<section class="slide">
<h2>Category: Composition</h2>
<p>Composition (∘): associate to each couple \(f:A→B, g:B→C\)
    $$g∘f:A\rightarrow C$$
</p>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/composition.png" alt="composition"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Category laws: neutral element</h2>
<p>for each object \(X\), there is an \(\id_X:X→X\),<br/>
such that for each \(f:A→B\):</p>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/identity.png" alt="identity"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Category laws: Associativity</h2>
<p> Composition is associative:</p>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/associativecomposition.png" alt="associative composition"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Commutative diagrams</h2>

<p>Two path with the same source and destination are equal.</p>
<figure class="left" style="max-width: 40%;margin-left: 5%;">
    <img
      src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/commutative-diagram-assoc.png"
      alt="Commutative Diagram (Associativity)"/>
    <figcaption>
    \((h∘g)∘f = h∘(g∘f) \)
    </figcaption>
</figure>
<figure class="right" style="max-width:31%;margin-right: 10%;">
    <img
      src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/commutative-diagram-id.png"
      alt="Commutative Diagram (Identity law)"/>
    <figcaption>
    \(id_B∘f = f = f∘id_A \)
    </figcaption>
</figure>
<div class="flush"></div></section>
<section class="slide">
<h2>Question Time!</h2>

<figure style="width:70%; margin:0 auto">
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/batquestion.jpg" width="100%"/>
<figcaption>
<em>- French-only joke -</em>
</figcaption>
</figure>
<div class="flush"></div></section>
<section class="slide">
<h2>Can this be a category?</h2>
<p>\(\ob{\C},\hom{\C}\) fixed, is there a valid ∘?</p>
<figure class="left">
    <img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-example1.png" alt="Category example 1"/>
    <figcaption class="slide">
        <span class="green">YES</span>
    </figcaption>
</figure>
<figure class="left">
    <img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-example2.png" alt="Category example 2"/>
    <figcaption class="slide">
        no candidate for \(g∘f\)
        <br/><span class="red">NO</span>
    </figcaption>
</figure>
<figure class="left">
    <img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-example3.png" alt="Category example 3"/>
    <figcaption class="slide">
    <span class="green">YES</span>
    </figcaption>
</figure>
<div class="flush"></div></section>
<section class="slide">
<h2>Can this be a category?</h2>
<figure class="left">
    <img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-example4.png" alt="Category example 4"/>
    <figcaption class="slide">
        no candidate for \(f:C→B\)
        <br/><span class="red">NO</span>
    </figcaption>
</figure>
<figure class="right" style="min-width: 50%">
    <img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-example5.png" alt="Category example 5"/>
    <figcaption class="slide">
    \((h∘g)∘f=\id_B∘f=f\)<br/>
    \(h∘(g∘f)=h∘\id_A=h\)<br/>
    but \(h≠f\)<br/>
    <span class="red">NO</span>
    </figcaption>
</figure>
<div class="flush"></div></section>
<section class="slide">
<h2>Categories Examples</h2>

<figure style="width:70%; margin:0 auto">
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/basket_of_cats.jpg" alt="Basket of cats"/>
<figcaption>
<em>- Basket of Cats -</em>
</figcaption>
</figure>
<div class="flush"></div></section>
<section class="slide">
<h2>Category \(\Set\)</h2>

<ul>
	<li> \(\ob{\Set}\) are <em>all</em> the sets</li>
    <li> \(\hom{E,F}\) are <em>all</em> functions from \(E\) to \(F\)</li>
    <li> ∘ is functions composition </li>
</ul>

<ul class="slide">
    <li>\(\ob{\Set}\) is a proper class ; not a set</li>
    <li>\(\hom{E,F}\) is a set</li>
	<li>\(\Set\) is then a <em>locally <b>small</b> category</em></li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Categories Everywhere?</h2>
<img class="right" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/cats-everywhere.jpg" alt="Cats everywhere"/>
<ul>
    <li>\(\Mon\): (monoids, monoid morphisms,∘)</li>
    <li>\(\Vec\): (Vectorial spaces, linear functions,∘)</li>
    <li>\(\Grp\): (groups, group morphisms,∘)</li>
    <li>\(\Rng\): (rings, ring morphisms,∘)</li>
    <li>Any deductive system <i>T</i>: (theorems, proofs, proof concatenation)</li>
    <li>\( \Hask\): (Haskell types, functions, <code>(.)</code> )</li>
    <li>...</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Smaller Examples</h2>

<h3>Strings</h3>
<img class="right" style="max-width:17%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/strings.png" alt="Monoids are one object categories"/>
<ul>
    <li> \(\ob{Str}\) is a singleton </li>
    <li> \(\hom{Str}\) each string </li>
    <li> ∘ is concatenation <code>(++)</code> </li>
</ul>
<ul>
    <li> <code>"" ++ u = u = u ++ ""</code> </li>
    <li> <code>(u ++ v) ++ w = u ++ (v ++ w)</code> </li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Finite Example?</h2>

<h3>Graph</h3>
<figure class="right" style="max-width:40%" >
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/graph-category.png" alt="Each graph is a category"/>
</figure>
<ul>
    <li> \(\ob{G}\) are vertices</li>
    <li> \(\hom{G}\) each path</li>
    <li> ∘ is path concatenation</li>
</ul>
<ul><li>\(\ob{G}=\{X,Y,Z\}\),
    </li><li>\(\hom{G}=\{ε,α,β,γ,αβ,βγ,...\}\)
    </li><li>\(αβ∘γ=αβγ\)
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Number construction</h2>

<h3>Each Numbers as a whole category</h3>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/numbers.png" alt="Each number as a category"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Degenerated Categories: Monoids</h2>

<img class="right" style="max-width:17%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/monoid.png" alt="Monoids are one object categories"/>
<p>Each Monoid \((M,e,⊙): \ob{M}=\{∙\},\hom{M}=M,\circ = ⊙\)</p>
<p class="orange">Only one object.</p>
<p>Examples:</p>
<ul><li><code>(Integer,0,+)</code>, <code>(Integer,1,*)</code>,
</li><li><code>(Strings,"",++)</code>, for each <code>a</code>, <code>([a],[],++)</code>
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Degenerated Categories: Preorders \((P,≤)\)</h2>

<ul><li>\(\ob{P}={P}\),
</li><li>\(\hom{x,y}=\{x≤y\} ⇔ x≤y\),
</li><li>\((y≤z) \circ (x≤y) = (x≤z) \)
</li></ul>

<p><em class="orange">At most one morphism between two objects.</em></p>

<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/preorder.png" alt="preorder category"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Degenerated Categories: Discrete Categories</h2>

<img class="right" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/set.png" alt="Any set can be a category"/>
<h3>Any Set</h3>
<p>Any set \(E: \ob{E}=E, \hom{x,y}=\{x\} ⇔  x=y \)</p>
<p class="orange">Only identities</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="choice">Choice</h2>
<p>The same object can be seen in many different way as a category.</p>
<p>You can choose what are object, morphisms and composition.</p>
<p>ex: <strong>Str</strong> and discrete(Σ<sup>*</sup>)</p>
<div class="flush"></div></section>
<section class="slide">
<h2 class="base1">Categorical Properties</h2>

<p class="base1">Any property which can be expressed in term of category, objects, morphism and composition.</p>

<ul><li> <em class="orange">Dual</em>: \(\D\) is \(\C\) with reversed morphisms.
</li><li> <em class="orange">Initial</em>: \(Z\in\ob{\C}\) s.t. \(∀Y∈\ob{\C}, \#\hom{Z,Y}=1\)
	<br/> Unique ("up to isormophism")
</li><li> <em class="orange">Terminal</em>: \(T\in\ob{\C}\) s.t. \(T\) is initial in the dual of \(\C\)
</li><li> <em class="orange">Functor</em>: structure preserving mapping between categories
</li><li> ...
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="isomorph">Isomorph</h2>
<p><img class="right" alt="isomorph cats" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/isomorph-cats.jpg" /> <em class="orange">isomorphism</em>: \(f:A→B\) which can be &quot;undone&quot; <em>i.e.</em><br />\(∃g:B→A\), \(g∘f=id_A\) <span class="and">&amp;</span> \(f∘g=id_B\)<br />in this case, \(A\) <span class="and">&amp;</span> \(B\) are <em class="orange">isomorphic</em>.</p>
<p><span class="orange">A≌B</span> means A and B are essentially the same.<br />In Category Theory, <span class="orange">=</span> is in fact mostly <span class="orange">≌</span>.<br />For example in commutative diagrams.</p>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor</h2>

<p> A functor is a mapping between two categories.
Let \(\C\) and \(\D\) be two categories.
A <em>functor</em> <span class="orange">\(\F\)</span> from <span class="blue">\(\C\)</span> to <span class="green">\(\D\)</span>:</p>
<ul>
	<li> Associate objects: <span class="backblue">\(A\in\ob{\C}\)</span> to <span class="backgreen">\(\F(A)\in\ob{\D}\)</span> </li>
	<li> Associate morphisms: <span class="backblue">\(f:A\to B\)</span> to <span class="backgreen">\(\F(f) : \F(A) \to \F(B)\)</span>
        such that
        <ul>
			<li>\( \F (\)<span class="backblue blue">\(\id_X\)</span>\()= \)<span class="backgreen"><span class="green">\(\id\)</span>\(\vphantom{\id}_{\F(}\)<span class="blue">\(\vphantom{\id}_X\)</span>\(\vphantom{\id}_{)} \)</span>,</li>
			<li>\( \F (\)<span class="backblue blue">\(g∘f\)</span>\()= \)<span class="backgreen">\( \F(\)<span class="blue">\(g\)</span>\() \)<span class="green">\(\circ\)</span>\( \F(\)<span class="blue">\(f\)</span>\() \)</span></li>
        </ul>
    </li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor Example (ob → ob)</h2>

<img width="65%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/functor.png" alt="Functor"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor Example (hom → hom)</h2>

<img width="65%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/functor-morphism.png" alt="Functor"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor Example</h2>

<img width="65%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/functor-morphism-color.png" alt="Functor"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Endofunctors</h2>

<p>An <em>endofunctor</em> for \(\C\) is a functor \(F:\C→\C\).</p>
<img width="75%"  src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/endofunctor.png" alt="Endofunctor"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Category of Categories</h2>

<img style="min-width:43%; width: 43%" class="right" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/fractalcat.jpg" />

<p>Categories and functors form a category: \(\Cat\)</p>
<ul><li>\(\ob{\Cat}\) are categories
</li><li>\(\hom{\Cat}\) are functors
</li><li>∘ is functor composition
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Plan</h2>
<ul style="font-size: 2em; font-weight:bold">
    <li>General overview</li>
    <li>Definitions</li>
    <li><span class="orange">Applications
        <ul class="base01" style="border-left: 2px solid; padding-left: 1em; font-size: .6em; float: right; font-weight: bold; margin: -4em 0 0 1em; width: 17em">
            <li>\(\Hask\) category
            </li><li> Functors
            </li><li> Natural transformations
            </li><li> Monads
            </li><li> κατα-morphisms
            </li></ul>
    </li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Hask</h2>

<p>Category \(\Hask\):</p>

<img class="right" style="max-width:30%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/hask.png" alt="Haskell Category Representation"/>

<ul><li>
\(\ob{\Hask} = \) Haskell types
</li><li>
\(\hom{\Hask} = \) Haskell functions
</li><li>
∘ = <code>(.)</code> Haskell function composition
</li></ul>

<p>Forget glitches because of <code>undefined</code>.</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="haskell-kinds">Haskell Kinds</h2>
<p>In Haskell some types can take type variable(s). Typically: <code>[a]</code>.</p>
<p>Types have <em>kinds</em>; The kind is to type what type is to function. Kind are the types for types (so meta).</p>
<pre><code>Int, Char :: *
[], Maybe :: * -&gt; *
(,), (-&gt;) :: * -&gt; * -&gt; *
[Int], Maybe Char, Maybe [Int] :: *</code></pre>
<div class="flush"></div></section>
<section class="slide">
<h2 id="haskell-types">Haskell Types</h2>
<p>Sometimes, the type determine a lot about the function<sup>★</sup>:</p>
<pre class="haskell"><code>fst :: (a,b) -> a -- Only one choice
snd :: (a,b) -> b -- Only one choice
f :: a -> [a]     -- Many choices
-- Possibilities: f x=[], or [x], or [x,x] or [x,...,x]

? :: [a] -> [a] -- Many choices
-- can only rearrange: duplicate/remove/reorder elements
-- for example: the type of addOne isn't [a] -> [a]
addOne l = map <span class="red">(+1)</span> l
-- The (+1) force 'a' to be a Num.</code></pre>

<p>
<p><span class="small base01">★:<a href="http://ttic.uchicago.edu/~dreyer/course/papers/wadler.pdf">Theorems for free!, Philip Wadler, 1989</a></span></p>
<div class="flush"></div></section>
<section class="slide">
<h2>Haskell Functor vs \(\Hask\) Functor</h2>

<p>A Haskell Functor is a type <code>F :: * -> *</code> which belong to the type class <code>Functor</code> ; thus instantiate
<code>fmap :: (a -> b) -> (F a -> F b)</code>.

<p><span style="visibility:hidden"><span class="and">&amp;</span></span> <code>F</code>: \(\ob{\Hask}→\ob{\Hask}\)<br/> <span class="and">&amp;</span> <code>fmap</code>: \(\hom{\Hask}→\hom{\Hask}\)

<p>The couple <code>(F,fmap)</code> is a \(\Hask\)'s functor if for any <code>x :: F a</code>:</p>
<ul><li><code>fmap id x = x</code>
</li><li><code>fmap (f.g) x= (fmap f . fmap g) x</code>
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Haskell Functors Example: Maybe</h2>

<pre class="haskell"><code>data Maybe a = Just a | Nothing
instance Functor Maybe where
    fmap :: (a -> b) -> (Maybe a -> Maybe b)
    fmap f (Just a) = Just (f a)
    fmap f Nothing = Nothing</code></pre>
<pre class="haskell"><code>fmap (+1) (Just 1) == Just 2
fmap (+1) Nothing  == Nothing
fmap head (Just [1,2,3]) == Just 1</code></pre>
<div class="flush"></div></section>
<section class="slide">
<h2>Haskell Functors Example: List</h2>

<pre class="haskell"><code>instance Functor ([]) where
	fmap :: (a -> b) -> [a] -> [b]
	fmap = map</pre></code>
<pre class="haskell"><code>fmap (+1) [1,2,3]           == [2,3,4]
fmap (+1) []                == []
fmap head [[1,2,3],[4,5,6]] == [1,4]</code></pre>
<div class="flush"></div></section>
<section class="slide">
<h2 id="haskell-functors-for-the-programmer">Haskell Functors for the programmer</h2>
<p><code>Functor</code> is a type class used for types that can be mapped over.</p>
<ul>
<li>Containers: <code>[]</code>, Trees, Map, HashMap...</li>
<li>&quot;Feature Type&quot;:
<ul>
<li><code>Maybe a</code>: help to handle absence of <code>a</code>.<br />Ex: <code>safeDiv x 0 ⇒ Nothing</code></li>
<li><code>Either String a</code>: help to handle errors<br />Ex: <code>reportDiv x 0 ⇒ Left &quot;Division by 0!&quot;</code></li>
</ul></li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Haskell Functor intuition</h2>

<p>Put normal function inside a container. Ex: list, trees...<p>

<img width="70%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/boxfunctor.png" alt="Haskell Functor as a box play"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Haskell Functor properties</h2>

<p>Haskell Functors are:</p>

<ul><li><em>endofunctors</em> ; \(F:\C→\C\) here \(\C = \Hask\),
</li><li>a couple <b>(Object,Morphism)</b> in \(\Hask\).
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor as boxes</h2>

<p>Haskell functor can be seen as boxes containing all Haskell types and functions.
Haskell types look like a fractal:</p>

<img width="70%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/hask-endofunctor.png" alt="Haskell functor representation"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor as boxes</h2>

<p>Haskell functor can be seen as boxes containing all Haskell types and functions.
Haskell types look like a fractal:</p>

<img width="70%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/hask-endofunctor-objects.png" alt="Haskell functor representation"/>
<div class="flush"></div></section>
<section class="slide">
<h2>Functor as boxes</h2>

<p>Haskell functor can be seen as boxes containing all Haskell types and functions.
Haskell types look like a fractal:</p>

<img width="70%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/hask-endofunctor-morphisms.png" alt="Haskell functor representation"/>
<div class="flush"></div></section>
<section class="slide">
<h2 id="non-haskell-hasks-functors">&quot;Non Haskell&quot; Hask's Functors</h2>
<p>A simple basic example is the \(id_\Hask\) functor. It simply cannot be expressed as a couple (<code>F</code>,<code>fmap</code>) where</p>
<ul>
<li><code>F::* -&gt; *</code></li>
<li><code>fmap :: (a -&gt; b) -&gt; (F a) -&gt; (F b)</code></li>
</ul>
<p>Another example:</p>
<ul>
<li>F(<code>T</code>)=<code>Int</code></li>
<li>F(<code>f</code>)=<code>\_-&gt;0</code></li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="also-functor-inside-hask">Also Functor inside \(\Hask\)</h2>
<p>\(\mathtt{[a]}∈\ob{\Hask}\)</code> but is also a category. Idem for <code>Int</code>.</p>
<p><code>length</code> is a Functor from the category <code>[a]</code> to the category <code>Int</code>:</p>
<ul class="left" style="max-width:40%">
<li>\(\ob{\mathtt{[a]}}=\{∙\}\)</li>
<li>\(\hom{\mathtt{[a]}}=\mathtt{[a]}\)</li>
<li>\(∘=\mathtt{(++)}\)</li>
</ul>
<p class="left" style="margin:2em 3em">⇒</p>
<ul class="left" style="max-width:40%">
<li>\(\ob{\mathtt{Int}}=\{∙\}\)</li>
<li>\(\hom{\mathtt{Int}}=\mathtt{Int}\)</li>
<li>\(∘=\mathtt{(+)}\)</li>
</ul>
<div class="flush"></div>
<ul><li>id: <code>length [] = 0</code>
</li><li>comp: <code>length (l ++ l') = (length l) + (length l')</code>
</li></ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="category-of-hask-endofunctors">Category of \(\Hask\) Endofunctors</h2>
<img width="50%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/cat-hask-endofunctor.png" alt="Category of Hask endofunctors" />
<div class="flush"></div></section>
<section class="slide">
<h2 id="category-of-functors">Category of Functors</h2>
<p>If \(\C\) is <em>small</em> (\(\hom{\C}\) is a set). All functors from \(\C\) to some category \(\D\) form the category \(\mathrm{Func}(\C,\D)\).</p>
<ul>
<li>\(\ob{\mathrm{Func}(\C,\D)}\): Functors \(F:\C→\D\)</li>
<li>\(\hom{\mathrm{Func}(\C,\D)}\): <em>natural transformations</em></li>
<li>∘: Functor composition</li>
</ul>
<p>\(\mathrm{Func}(\C,\C)\) is the category of endofunctors of \(\C\).</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="natural-transformations">Natural Transformations</h2>
<p>Let \(F\) and \(G\) be two functors from \(\C\) to \(\D\).</p>
<p><img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/natural-transformation.png" alt="Natural transformation commutative diagram" class="right"/> <em>A natural transformation:</em> familly η ; \(η_X\in\hom{\D}\) for \(X\in\ob{\C}\) s.t.</p>
<p>ex: between Haskell functors; <code>F a -&gt; G a</code><br />Rearragement functions only.</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="natural-transformation-examples-14">Natural Transformation Examples (1/4)</h2>
<pre><code class="haskell small">data List a = Nil | Cons a (List a)
toList :: [a] -> List a
toList [] = Nil
toList (x:xs) = Cons x (toList xs)</code></pre>
<p><code>toList</code> is a natural transformation. It is also a morphism from <code>[]</code> to <code>List</code> in the Category of \(\Hask\) endofunctors.</p>
<img style="float:left;width:30%;margin-left: 1em;" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/nattrans-list-tree.png" alt="natural transformation commutative diagram"/>
<figure style="float:right;width:50%">
<img style="width:40%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/list-tree-endofunctor-morphism.png" alt="natural transformation commutative diagram"/>
</figure>

<div class="flush"></div></section>
<section class="slide">
<h2 id="natural-transformation-examples-24">Natural Transformation Examples (2/4)</h2>
<pre><code class="haskell small">data List a = Nil | Cons a (List a)
toHList :: List a -> [a]
toHList Nil = []
toHList (Cons x xs) = x:toHList xs</code></pre>
<p><code>toHList</code> is a natural transformation. It is also a morphism from <code>List</code> to <code>[]</code> in the Category of \(\Hask\) endofunctors.</p>
<img style="float:left;width:30%;margin-left:1em" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/nattrans-tree-list.png" alt="natural transformation commutative diagram"/>
<figure style="float:right;width:50%">
<img style="width:40%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/tree-list-endofunctor-morphism.png" alt="natural transformation commutative diagram"/> <figcaption><code>toList . toHList = id</code> <span class="and">&amp;</span> <code>toHList . toList = id</code> <span style="visibility:hidden"><span class="and">&amp;</span></span><br/> therefore <code>[]</code> <span class="and">&amp;</span> <code>List</code> are <span class="orange">isomorph</span>. </figcaption>
</figure>

<div class="flush"></div></section>
<section class="slide">
<h2 id="natural-transformation-examples-34">Natural Transformation Examples (3/4)</h2>
<pre><code class="haskell small">toMaybe :: [a] -> Maybe a
toMaybe [] = Nothing
toMaybe (x:xs) = Just x</code></pre>
<p><code>toMaybe</code> is a natural transformation. It is also a morphism from <code>[]</code> to <code>Maybe</code> in the Category of \(\Hask\) endofunctors.</p>
<img style="float:left;width:30%;margin-left:1em;" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/nattrans-list-maybe.png" alt="natural transformation commutative diagram"/>
<figure style="float:right;width:50%">
<img style="width:40%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/list-maybe-endofunctor-morphism.png" alt="natural transformation commutative diagram"/>
</figure>

<div class="flush"></div></section>
<section class="slide">
<h2 id="natural-transformation-examples-44">Natural Transformation Examples (4/4)</h2>
<pre><code class="haskell small">mToList :: Maybe a -> [a]
mToList Nothing = []
mToList Just x  = [x]</code></pre>
<p><code>toMaybe</code> is a natural transformation. It is also a morphism from <code>[]</code> to <code>Maybe</code> in the Category of \(\Hask\) endofunctors.</p>
<img style="float:left;width:30%;margin-left:1em;" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/nattrans-maybe-list.png" alt="natural transformation commutative diagram"/>
<figure style="float:right;width:50%">
<img style="width:40%" src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/mp/maybe-list-endofunctor-morphsm.png" alt="relation between [] and Maybe"/> <figcaption>There is <span class="red">no isomorphism</span>.<br/> Hint: <code>Bool</code> lists longer than 1. </figcaption>
</figure>

<div class="flush"></div></section>
<section class="slide">
<h2 id="composition-problem">Composition problem</h2>
<p>The Problem; example with lists:</p>
<pre class="haskell"><code>f x = [x]       ⇒ f 1 = [1]   ⇒ (f.f) 1 = [[1]] ✗
g x = [x+1]     ⇒ g 1 = [2]   ⇒ (g.g) 1 = ERROR [2]+1 ✗
h x = [x+1,x*3] ⇒ h 1 = [2,3] ⇒ (h.h) 1 = ERROR [2,3]+1 ✗ </code></pre>

<p>The same problem with most <code>f :: a -&gt; F a</code> functions and functor <code>F</code>.</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="composition-fixable">Composition Fixable?</h2>
<p>How to fix that? We want to construct an operator which is able to compose:</p>
<p><code>f :: a -&gt; F b</code> <span class="and">&amp;</span> <code>g :: b -&gt; F c</code>.</p>
<p>More specifically we want to create an operator ◎ of type</p>
<p><code>◎ :: (b -&gt; F c) -&gt; (a -&gt; F b) -&gt; (a -&gt; F c)</code></p>
<p>Note: if <code>F</code> = I, ◎ = <code>(.)</code>.</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="fix-composition-12">Fix Composition (1/2)</h2>
<p>Goal, find: <code>◎ :: (b -&gt; F c) -&gt; (a -&gt; F b) -&gt; (a -&gt; F c)</code><br /><code>f :: a -&gt; F b</code>, <code>g :: b -&gt; F c</code>:</p>
<ul>
<li><code>(g ◎ f) x</code> ???</li>
<li>First apply <code>f</code> to <code>x</code> ⇒ <code>f x :: F b</code></li>
<li>Then how to apply <code>g</code> properly to an element of type <code>F b</code>?</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="fix-composition-22">Fix Composition (2/2)</h2>
<p>Goal, find: <code>◎ :: (b -&gt; F c) -&gt; (a -&gt; F b) -&gt; (a -&gt; F c)</code><br /><code>f :: a -&gt; F b</code>, <code>g :: b -&gt; F c</code>, <span class="orange"><code>f x :: F b</code></span>:</p>
<ul>
<li>Use <code>fmap :: (t -&gt; u) -&gt; (F t -&gt; F u)</code>!</li>
<li><code>(fmap g) :: F b -&gt; F (F c)</code> ; (<code>t=b</code>, <code>u=F c</code>)</li>
<li><code>(fmap g) (f x) :: F (F c)</code> it almost WORKS!</li>
<li>We lack an important component, <code>join :: F (F c) -&gt; F c</code></li>
<li><code>(g ◎ f) x = join ((fmap g) (f x))</code> ☺<br />◎ is the Kleisli composition; in Haskell: <code>&lt;=&lt;</code> (in <code>Control.Monad</code>).</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="necessary-laws">Necessary laws</h2>
<p>For ◎ to work like composition, we need join to hold the following properties:</p>
<ul>
<li><code>join (join (F (F (F a))))=join (F (join (F (F a))))</code></li>
<li>abusing notations denoting <code>join</code> by ⊙; this is equivalent to<br /><span class="orange"><code>(F ⊙ F) ⊙ F = F ⊙ (F ⊙ F)</code></span></li>
<li>There exists <code>η :: a -&gt; F a</code> s.t.<br /><span class="orange"><code>η⊙F=F=F⊙η</code></span></li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="klesli-composition">Klesli composition</h2>
<p>Now the composition works as expected. In Haskell ◎ is <code>&lt;=&lt;</code> in <code>Control.Monad</code>.</p>
<p><code>g &lt;=&lt; f = \x -&gt; join ((fmap g) (f x))</code></p>
<pre class="haskell"><code>f x = [x]       ⇒ f 1 = [1]   ⇒ (f <=< f) 1 = [1] ✓
g x = [x+1]     ⇒ g 1 = [2]   ⇒ (g <=< g) 1 = [3] ✓
h x = [x+1,x*3] ⇒ h 1 = [2,3] ⇒ (h <=< h) 1 = [3,6,4,9] ✓</code></pre>

<div class="flush"></div></section>
<section class="slide">
<h2 id="we-reinvented-monads">We reinvented Monads!</h2>
<p>A monad is a triplet <code>(M,⊙,η)</code> where</p>
<ul>
<li>\(M\) an <span class="orange">Endofunctor</span> (to type <code>a</code> associate <code>M a</code>)</li>
<li>\(⊙:M×M→M\) a <span class="orange">nat. trans.</span> (i.e. <code>⊙::M (M a) → M a</code> ; <code>join</code>)</li>
<li>\(η:I→M\) a <span class="orange">nat. trans.</span> (\(I\) identity functor ; <code>η::a → M a</code>)</li>
</ul>
<p>Satisfying</p>
<ul>
<li>\(M ⊙ (M ⊙ M) = (M ⊙ M) ⊙ M\)</li>
<li>\(η ⊙ M = M = M ⊙ η\)</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="compare-with-monoid">Compare with Monoid</h2>
<p>A Monoid is a triplet \((E,∙,e)\) s.t.</p>
<ul>
<li>\(E\) a set</li>
<li>\(∙:E×E→E\)</li>
<li>\(e:1→E\)</li>
</ul>
<p>Satisfying</p>
<ul>
<li>\(x∙(y∙z) = (x∙y)∙z, ∀x,y,z∈E\)</li>
<li>\(e∙x = x = x∙e, ∀x∈E\)</li>
</ul>
<div class="flush"></div></section>
<section class="slide">
<h2 id="monads-are-just-monoids">Monads are just Monoids</h2>
<blockquote>
<p>A Monad is just a monoid in the category of endofunctors, what's the problem?</p>
</blockquote>
<p>The real sentence was:</p>
<blockquote>
<p>All told, a monad in X is just a monoid in the category of endofunctors of X, with product × replaced by composition of endofunctors and unit set by the identity endofunctor.</p>
</blockquote>
<div class="flush"></div></section>
<section class="slide">
<h2 id="example-list">Example: List</h2>
<ul>
<li><code>[] :: * -&gt; *</code> an <span class="orange">Endofunctor</span></li>
<li>\(⊙:M×M→M\) a nat. trans. (<code>join :: M (M a) -&gt; M a</code>)</li>
<li>\(η:I→M\) a nat. trans.</li>
</ul>
<pre class="haskell"><code>-- In Haskell ⊙ is "join" in "Control.Monad"
join :: [[a]] -> [a]
join = concat

-- In Haskell the "return" function (unfortunate name)
η :: a -> [a]
η x = [x]</code></pre>

<div class="flush"></div></section>
<section class="slide">
<h2 id="example-list-law-verification">Example: List (law verification)</h2>
<p>Example: <code>List</code> is a functor (<code>join</code> is ⊙)</p>
<ul>
<li>\(M ⊙ (M ⊙ M) = (M ⊙ M) ⊙ M\)</li>
<li>\(η ⊙ M = M = M ⊙ η\)</li>
</ul>
<pre class="nohighlight small"><code>join [ join [[x,y,...,z]] ] = join [[x,y,...,z]]
                            = join (join [[[x,y,...,z]]])
join (η [x]) = [x] = join [η x]</code></pre>

<p>Therefore <code>([],join,η)</code> is a monad.</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="monads-utility">Monads useful?</h2>
<p>A <em>LOT</em> of monad tutorial on the net. Just one example; the State Monad</p>
<p><code>DrawScene</code> to <code><span class="orange">State Screen</span> DrawScene</code> ; still <b>pure</b>.</p>
<pre class="haskell left smaller" style="width:40%"><code>main = drawImage (width,height)

drawImage :: Screen -&gt; DrawScene
drawImage <span class="orange">screen</span> = do
    drawPoint p <span class="orange">screen</span>
    drawCircle c <span class="orange">screen</span>
    drawRectangle r <span class="orange">screen</span>

drawPoint point <span class="orange">screen</span> = ...
drawCircle circle <span class="orange">screen</span> = ...
drawRectangle rectangle <span class="orange">screen</span> = ...</code></pre>
<pre class="haskell right smaller" style="width:40%"><code>main = do
    <span class="orange">put (Screen 1024 768)</span>
    drawImage

drawImage :: State Screen DrawScene
drawImage = do
    drawPoint p
    drawCircle c
    drawRectangle r

drawPoint :: Point -&gt;
               State Screen DrawScene
drawPoint p = do
    <span class="orange">Screen width height &lt;- get</span>
    ...</code></pre>
<div class="flush"></div></section>
<section class="slide">
<h2 id="fold"><code>fold</code></h2>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/tower_folded.gif" alt="fold" style="width:50%;max-width:50%"/>
<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism">κατα-morphism</h2>
<img src="http://yogsototh.github.com/Category-Theory-Presentation/categories/img/earth_catamorphed.gif" alt="catamorphism" style="width:90%;max-width:90%"/>
<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism-fold-generalization">κατα-morphism: fold generalization</h2>
<p><code>acc</code> type of the &quot;accumulator&quot;:<br /><code>fold :: (acc -&gt; a -&gt; acc) -&gt; acc -&gt; [a] -&gt; acc</code></p>
<p>Idea: put the accumulated value inside the type.</p>
<pre class="haskell"><code>-- Equivalent to fold (+1) 0 "cata"
(Cons 'c' (Cons 'a' (Cons 't' (Cons 'a' Nil))))
(Cons 'c' (Cons 'a' (Cons 't' (Cons 'a' <span style="border: solid 1px;">0</span>))))
(Cons 'c' (Cons 'a' (Cons 't' <span style="border: solid 1px;">1</span>)))
(Cons 'c' (Cons 'a' <span style="border: solid 1px;">2</span>))
(Cons 'c' <span style="border: solid 1px;">3</span>)
<span style="border: solid 1px;">4</span></code></pre>

<p>But where are all the informations? <code>(+1)</code> and <code>0</code>?</p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism-missing-information">κατα-morphism: Missing Information</h2>
<p>Where is the missing information?</p>
<ul>
<li>Functor operator <code>fmap</code></li>
<li>Algebra representing the <code>(+1)</code> and also knowing about the <code>0</code>.</li>
</ul>
<p>First example, make <code>length</code> on <code>[Char]</code></p>
<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism-type-work">κατα-morphism: Type work</h2>
<pre class="haskell"><code>
data StrF a = Cons Char a | Nil
data Str' = StrF Str'

-- generalize the construction of Str to other datatype
-- Mu: type fixed point
-- Mu :: (* -> *) -> *

data Mu f = InF { outF :: f (Mu f) }
data Str = Mu StrF

-- Example
foo=InF { outF = Cons 'f'
        (InF { outF = Cons 'o'
            (InF { outF = Cons 'o'
                (InF { outF = Nil })})})}</code></pre>

<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism-missing-information-retrieved">κατα-morphism: missing information retrieved</h2>
<pre class="haskell"><code>type Algebra f a = f a -> a
instance Functor (StrF a) =
    fmap f (Cons c x) = Cons c (f x)
    fmap _ Nil = Nil</code></pre>

<pre class="haskell"><code>cata :: Functor f => Algebra f a -> Mu f -> a
cata f = f . fmap (cata f) . outF</code></pre>

<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism-finally-length">κατα-morphism: Finally length</h2>
<p>All needed information for making length.</p>
<pre><code>instance Functor (StrF a) =
    fmap f (Cons c x) = Cons c (f x)
    fmap _ Nil = Nil

length&#39; :: Str -&gt; Int
length&#39; = cata phi where
    phi :: Algebra StrF Int -- StrF Int -&gt; Int
    phi (Cons a b) = 1 + b
    phi Nil = 0

main = do
    l &lt;- length&#39; $ stringToStr &quot;Toto&quot;
    ...</code></pre>
<div class="flush"></div></section>
<section class="slide">
<h2 id="κατα-morphism-extension-to-trees">κατα-morphism: extension to Trees</h2>
<p>Once you get the trick, it is easy to extent to most Functor.</p>
<pre><code>type Tree = Mu TreeF
data TreeF x = Node Int [x]

instance Functor TreeF where
  fmap f (Node e xs) = Node e (fmap f xs)

depth = cata phi where
  phi :: Algebra TreeF Int -- TreeF Int -&gt; Int
  phi (Node x sons) = 1 + foldr max 0 sons</code></pre>
<div class="flush"></div></section>
<section class="slide last">
<h2 id="conclusion">Conclusion</h2>
<p>Category Theory oriented Programming:</p>
<ul>
<li>Focus on the type and operators</li>
<li>Extreme generalisation</li>
<li>Better modularity</li>
<li>Better control through properties of types</li>
</ul>
<p><span class="smaller">No cat were harmed in the making of this presentation.</span></p>
<div class="flush"></div></section>
]]></summary>
</entry>
<entry>
    <title>Un example progressif avec Haskell</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Haskell-OpenGL-Mandelbrot/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Haskell-OpenGL-Mandelbrot/index.html</id>
    <published>2012-06-15T00:00:00Z</published>
    <updated>2012-06-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/BenoitBMandelbrot.jpg" alt="The B in Benoît B. Mandelbrot stand for Benoît B. Mandelbrot"/>
</div>

<div class="intro">

<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> Un exemple progressif d’utilisation d’Haskell. Vous pourrez voir un ensemble de Mandelbrot étendu à la troisième dimension. De plus le code sera très propre. Les détails de rendu sont séparés dans un module externe. Le code descriptif intéressant est concentré dans un environnement pur et fonctionnel. Vous pouvez vous inspirer de ce code utilisant le paradigme fonctional dans tous les languages.</p>
</div>

<h2 id="introduction">Introduction</h2>
<p>In my <a href="/Scratch/en/blog/Haskell-the-Hard-Way/">preceding article</a> I introduced Haskell.</p>
<p>This article goes further. It will show how to use functional programming with interactive programs. But more than that, it will show how to organize your code in a functional way. This article is more about functional paradigm than functional language. The code organization can be used in most imperative language.</p>
<p>As Haskell is designed for functional paradigm, it is easier to use in this context. In reality, the firsts sections will use an imperative paradigm. As you can use functional paradigm in imperative language, you can also use imperative paradigm in functional languages.</p>
<p>This article is about creating an useful and clean program. It can interact with the user in real time. It uses OpenGL, a library with imperative programming foundations. Despite this fact, most of the final code will remain in the pure part (no <code>IO</code>).</p>
<p>I believe the main audience for this article are:</p>
<ul>
<li>Haskell programmer looking for an OpengGL tutorial.</li>
<li>People interested in program organization (programming language agnostic).</li>
<li>Fractal lovers and in particular 3D fractal.</li>
<li>People interested in user interaction in a functional paradigm.</li>
</ul>
<p>I had in mind for some time now to make a Mandelbrot set explorer. I had already written a <a href="http://github.com/yogsototh/mandelbrot.git">command line Mandelbrot set generator in Haskell</a>. This utility is highly parallel; it uses the <code>repa</code> package<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup>.</p>
<p>This time, we will not parallelize the computation. Instead, we will display the Mandelbrot set extended in 3D using OpenGL and Haskell. You will be able to move it using your keyboard. This object is a Mandelbrot set in the plan (z=0), and something nice to see in 3D.</p>
<p>Here are some screenshots of the result:</p>
<figure>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/GoldenMandelbulb.png" alt="The entire Mandelbulb"/>
<figcaption>
The entire Mandelbulb
</figcaption>
</figure>
<figure>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/3DMandelbulbDetail.png" alt="A Mandelbulb detail"/>
<figcaption>
A Mandelbulb detail
</figcaption>
</figure>
<figure>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/3DMandelbulbDetail2.png" alt="Another detail of the Mandelbulb"/>
<figcaption>
Another detail of the Mandelbulb
</figcaption>
</figure>

<p>And you can see the intermediate steps to reach this goal:</p>
<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/HGL_Plan.png" alt="The parts of the article"/>
</div>

<p>From the 2nd section to the 4th it will be <em>dirtier</em> and <em>dirtier</em>. We start cleaning the code at the 5th section.</p>
<hr/>
<p><a href="code/01_Introduction/hglmandel.lhs" class="cut">Download the source code of this section → 01_Introduction/<strong>hglmandel.lhs</strong></a></p>
<h2 id="first-version">First version</h2>
<p>We can consider two parts. The first being mostly some boilerplate<sup><a href="#fn2" class="footnoteRef" id="fnref2">2</a></sup>. And the second part more focused on OpenGL and content.</p>
<h3 id="lets-play-the-song-of-our-people">Let’s play the song of our people</h3>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Graphics.Rendering.OpenGL
<span class="kw">import</span> Graphics.UI.GLUT
<span class="kw">import</span> Data.IORef</code></pre>
</div>

<p>For efficiency reason<sup><a href="#fn3" class="footnoteRef" id="fnref3">3</a></sup>, I will not use the default Haskell <code>Complex</code> data type.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Complex</span> <span class="fu">=</span> <span class="dt">C</span> (<span class="dt">Float</span>,<span class="dt">Float</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>,<span class="dt">Eq</span>)</code></pre>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Complex</span> <span class="kw">where</span>
    fromInteger n <span class="fu">=</span> <span class="dt">C</span> (fromIntegral n,<span class="dv">0</span><span class="fu">.</span><span class="dv">0</span>)
    <span class="dt">C</span> (x,y) <span class="fu">*</span> <span class="dt">C</span> (z,t) <span class="fu">=</span> <span class="dt">C</span> (z<span class="fu">*</span>x <span class="fu">-</span> y<span class="fu">*</span>t, y<span class="fu">*</span>z <span class="fu">+</span> x<span class="fu">*</span>t)
    <span class="dt">C</span> (x,y) <span class="fu">+</span> <span class="dt">C</span> (z,t) <span class="fu">=</span> <span class="dt">C</span> (x<span class="fu">+</span>z, y<span class="fu">+</span>t)
    abs (<span class="dt">C</span> (x,y))     <span class="fu">=</span> <span class="dt">C</span> (sqrt (x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y),<span class="dv">0</span><span class="fu">.</span><span class="dv">0</span>)
    signum (<span class="dt">C</span> (x,y))  <span class="fu">=</span> <span class="dt">C</span> (signum x , <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span>)</code></pre>
</div>

<p>We declare some useful functions for manipulating complex numbers:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">complex ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Complex</span>
complex x y <span class="fu">=</span> <span class="dt">C</span> (x,y)

<span class="ot">real ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>
real (<span class="dt">C</span> (x,y))    <span class="fu">=</span> x

<span class="ot">im ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>
im   (<span class="dt">C</span> (x,y))    <span class="fu">=</span> y

<span class="ot">magnitude ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>
magnitude <span class="fu">=</span> real<span class="fu">.</span>abs</code></pre>
</div>

<h3 id="let-us-start">Let us start</h3>
<p>We start by giving the main architecture of our program:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- GLUT need to be initialized</span>
  (progname,_) <span class="ot">&lt;-</span> getArgsAndInitialize
  <span class="co">-- We will use the double buffered mode (GL constraint)</span>
  initialDisplayMode <span class="fu">$=</span> [<span class="dt">DoubleBuffered</span>]
  <span class="co">-- We create a window with some title</span>
  createWindow <span class="st">&quot;Mandelbrot Set with Haskell and OpenGL&quot;</span>
  <span class="co">-- Each time we will need to update the display</span>
  <span class="co">-- we will call the function &#39;display&#39;</span>
  displayCallback <span class="fu">$=</span> display
  <span class="co">-- We enter the main loop</span>
  mainLoop</code></pre>
</div>

<p>Mainly, we initialize our OpenGL application. We declared that the function <code>display</code> will be used to render the graphics:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">display <span class="fu">=</span> <span class="kw">do</span>
  clear [<span class="dt">ColorBuffer</span>] <span class="co">-- make the window black</span>
  loadIdentity <span class="co">-- reset any transformation</span>
  preservingMatrix drawMandelbrot
  swapBuffers <span class="co">-- refresh screen</span></code></pre>
</div>

<p>Also here, there is only one interesting line; the draw will occur in the function <code>drawMandelbrot</code>.</p>
<p>This function will provide a list of draw actions. Remember that OpenGL is imperative by design. Then, one of the consequence is you must write the actions in the right order. No easy parallel drawing here. Here is the function which will render something on the screen:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">drawMandelbrot <span class="fu">=</span>
  <span class="co">-- We will print Points (not triangles for example) </span>
  renderPrimitive <span class="dt">Points</span> <span class="fu">$</span> <span class="kw">do</span>
    mapM_ drawColoredPoint allPoints
  <span class="kw">where</span>
      drawColoredPoint (x,y,c) <span class="fu">=</span> <span class="kw">do</span>
          color c <span class="co">-- set the current color to c</span>
          <span class="co">-- then draw the point at position (x,y,0)</span>
          <span class="co">-- remember we&#39;re in 3D</span>
          vertex <span class="fu">$</span> <span class="dt">Vertex3</span> x y <span class="dv">0</span> </code></pre>
</div>

<p>The <code>mapM_</code> function is mainly the same as map but inside a monadic context. More precisely, this can be transformed as a list of actions where the order is important:</p>
<pre><code>drawMandelbrot = 
  renderPrimitive Points $ do
    color color1
    vertex $ Vertex3 x1 y1 0
    ...
    color colorN
    vertex $ Vertex3 xN yN 0</code></pre>
<p>We also need some kind of global variables. In fact, global variable are a proof of a design problem. We will get rid of them later.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">width <span class="fu">=</span> <span class="dv">320</span><span class="ot"> ::</span> <span class="dt">GLfloat</span>
height <span class="fu">=</span> <span class="dv">320</span><span class="ot"> ::</span> <span class="dt">GLfloat</span></code></pre>
</div>

<p>And of course our list of colored points. In OpenGL the default coordinate are from -1 to 1.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">allPoints ::</span> [(<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>,<span class="dt">Color3</span> <span class="dt">GLfloat</span>)]
allPoints <span class="fu">=</span> [ (x<span class="fu">/</span>width,y<span class="fu">/</span>height,colorFromValue <span class="fu">$</span> mandel x y) <span class="fu">|</span> 
                  x <span class="ot">&lt;-</span> [<span class="fu">-</span>width<span class="fu">..</span>width], 
                  y <span class="ot">&lt;-</span> [<span class="fu">-</span>height<span class="fu">..</span>height]]</code></pre>
</div>

<p>We need a function which transform an integer value to some color:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">colorFromValue n <span class="fu">=</span>
  <span class="kw">let</span> 
<span class="ot">      t ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
      t i <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">5</span> <span class="fu">+</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">5</span><span class="fu">*</span>cos( fromIntegral i <span class="fu">/</span> <span class="dv">10</span> )
  <span class="kw">in</span>
    <span class="dt">Color3</span> (t n) (t (n<span class="fu">+</span><span class="dv">5</span>)) (t (n<span class="fu">+</span><span class="dv">10</span>))</code></pre>
</div>

<p>And now the <code>mandel</code> function. Given two coordinates in pixels, it returns some integer value:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">mandel x y <span class="fu">=</span> 
  <span class="kw">let</span> r <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> x <span class="fu">/</span> width
      i <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> y <span class="fu">/</span> height
  <span class="kw">in</span>
      f (complex r i) <span class="dv">0</span> <span class="dv">64</span></code></pre>
</div>

<p>It uses the main Mandelbrot function for each complex \(c\). The Mandelbrot set is the set of complex number \(c\) such that the following sequence does not escape to infinity.</p>
<p>Let us define \(f_c:  \)</p>
<p><br /><span class="math"><em>f</em><sub><em>c</em></sub>(<em>z</em>) = <em>z</em><sup>2</sup> + <em>c</em></span><br /></p>
<p>The sequence is:</p>
<p><br /><span class="math">0 → <em>f</em><sub><em>c</em></sub>(0) → <em>f</em><sub><em>c</em></sub>(<em>f</em><sub><em>c</em></sub>(0)) → ⋯ → <em>f</em><sub><em>c</em></sub><sup><em>n</em></sup>(0) → ⋯</span><br /></p>
<p>Of course, instead of trying to test the real limit, we just make a test after a finite number of occurrences.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
f c z <span class="dv">0</span> <span class="fu">=</span> <span class="dv">0</span>
f c z n <span class="fu">=</span> <span class="kw">if</span> (magnitude z <span class="fu">&gt;</span> <span class="dv">2</span> ) 
          <span class="kw">then</span> n
          <span class="kw">else</span> f c ((z<span class="fu">*</span>z)<span class="fu">+</span>c) (n<span class="fu">-</span><span class="dv">1</span>)</code></pre>
</div>

<p>Well, if you download this file (look at the bottom of this section), compile it and run it this is the result:</p>
<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/hglmandel_v01.png" alt="The mandelbrot set version 1"/>
</div>

<p>A first very interesting property of this program is that the computation for all the points is done only once. It is a bit long before the first image appears, but if you resize the window, it updates instantaneously. This property is a direct consequence of purity. If you look closely, you see that <code>allPoints</code> is a pure list. Therefore, calling <code>allPoints</code> will always render the same result and Haskell is clever enough to use this property. While Haskell doesn’t garbage collect <code>allPoints</code> the result is reused for free. We did not specified this value should be saved for later use. It is saved for us.</p>
<p>See what occurs if we make the window bigger:</p>
<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/hglmandel_v01_too_wide.png" alt="The mandelbrot too wide, black lines and columns"/>
</div>

<p>We see some black lines because we have drawn less point than there is on the surface. We can repair this by drawing little squares instead of just points. But, instead we will do something a bit different and unusual.</p>
<p><a href="code/01_Introduction/hglmandel.lhs" class="cut">Download the source code of this section → 01_Introduction/<strong>hglmandel.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Edges/HGLMandelEdge.lhs" class="cut">Download the source code of this section → 02_Edges/<strong>HGLMandelEdge.lhs</strong></a></p>
<h2 id="only-the-edges">Only the edges</h2>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Graphics.Rendering.OpenGL
<span class="kw">import</span> Graphics.UI.GLUT
<span class="kw">import</span> Data.IORef
<span class="co">-- Use UNPACK data because it is faster</span>
<span class="co">-- The ! is for strict instead of lazy</span>
<span class="kw">data</span> <span class="dt">Complex</span> <span class="fu">=</span> <span class="dt">C</span>  <span class="ot">{-# UNPACK #-}</span> <span class="fu">!</span><span class="dt">Float</span> 
                  <span class="ot">{-# UNPACK #-}</span> <span class="fu">!</span><span class="dt">Float</span> 
               <span class="kw">deriving</span> (<span class="dt">Show</span>,<span class="dt">Eq</span>)
<span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Complex</span> <span class="kw">where</span>
    fromInteger n <span class="fu">=</span> <span class="dt">C</span> (fromIntegral n) <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span>
    (<span class="dt">C</span> x y) <span class="fu">*</span> (<span class="dt">C</span> z t) <span class="fu">=</span> <span class="dt">C</span> (z<span class="fu">*</span>x <span class="fu">-</span> y<span class="fu">*</span>t) (y<span class="fu">*</span>z <span class="fu">+</span> x<span class="fu">*</span>t)
    (<span class="dt">C</span> x y) <span class="fu">+</span> (<span class="dt">C</span> z t) <span class="fu">=</span> <span class="dt">C</span> (x<span class="fu">+</span>z) (y<span class="fu">+</span>t)
    abs (<span class="dt">C</span> x y)     <span class="fu">=</span> <span class="dt">C</span> (sqrt (x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y)) <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span>
    signum (<span class="dt">C</span> x y)  <span class="fu">=</span> <span class="dt">C</span> (signum x) <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span>
<span class="ot">complex ::</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Complex</span>
complex x y <span class="fu">=</span> <span class="dt">C</span> x y

<span class="ot">real ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>
real (<span class="dt">C</span> x y)    <span class="fu">=</span> x

<span class="ot">im ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>
im   (<span class="dt">C</span> x y)    <span class="fu">=</span> y

<span class="ot">magnitude ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>
magnitude <span class="fu">=</span> real<span class="fu">.</span>abs
<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- GLUT need to be initialized</span>
  (progname,_) <span class="ot">&lt;-</span> getArgsAndInitialize
  <span class="co">-- We will use the double buffered mode (GL constraint)</span>
  initialDisplayMode <span class="fu">$=</span> [<span class="dt">DoubleBuffered</span>]
  <span class="co">-- We create a window with some title</span>
  createWindow <span class="st">&quot;Mandelbrot Set with Haskell and OpenGL&quot;</span>
  <span class="co">-- Each time we will need to update the display</span>
  <span class="co">-- we will call the function &#39;display&#39;</span>
  displayCallback <span class="fu">$=</span> display
  <span class="co">-- We enter the main loop</span>
  mainLoop
display <span class="fu">=</span> <span class="kw">do</span>
   <span class="co">-- set the background color (dark solarized theme)</span>
  clearColor <span class="fu">$=</span> <span class="dt">Color4</span> <span class="dv">0</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">1686</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">2117</span> <span class="dv">1</span>
  clear [<span class="dt">ColorBuffer</span>] <span class="co">-- make the window black</span>
  loadIdentity <span class="co">-- reset any transformation</span>
  preservingMatrix drawMandelbrot
  swapBuffers <span class="co">-- refresh screen</span>

width <span class="fu">=</span> <span class="dv">320</span><span class="ot"> ::</span> <span class="dt">GLfloat</span>
height <span class="fu">=</span> <span class="dv">320</span><span class="ot"> ::</span> <span class="dt">GLfloat</span></code></pre>
</div>

</div>

<p>This time, instead of drawing all points, we will simply draw the edges of the Mandelbrot set. The method I use is a rough approximation. I consider the Mandelbrot set to be almost convex. The result will be good enough for the purpose of this tutorial.</p>
<p>We change slightly the <code>drawMandelbrot</code> function. We replace the <code>Points</code> by <code>LineLoop</code></p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">drawMandelbrot <span class="fu">=</span>
  <span class="co">-- We will print Points (not triangles for example) </span>
  renderPrimitive <span class="dt">LineLoop</span> <span class="fu">$</span> <span class="kw">do</span>
    mapM_ drawColoredPoint allPoints
  <span class="kw">where</span>
      drawColoredPoint (x,y,c) <span class="fu">=</span> <span class="kw">do</span>
          color c <span class="co">-- set the current color to c</span>
          <span class="co">-- then draw the point at position (x,y,0)</span>
          <span class="co">-- remember we&#39;re in 3D</span>
          vertex <span class="fu">$</span> <span class="dt">Vertex3</span> x y <span class="dv">0</span> </code></pre>
</div>

<p>And now, we should change our list of points. Instead of drawing every point of the visible surface, we will choose only point on the surface.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">allPoints <span class="fu">=</span> positivePoints <span class="fu">++</span> 
      map (\(x,y,c) <span class="ot">-&gt;</span> (x,<span class="fu">-</span>y,c)) (reverse positivePoints)</code></pre>
</div>

<p>We only need to compute the positive point. The Mandelbrot set is symmetric relatively to the abscisse axis.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">positivePoints ::</span> [(<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>,<span class="dt">Color3</span> <span class="dt">GLfloat</span>)]
positivePoints <span class="fu">=</span> <span class="kw">do</span>
     x <span class="ot">&lt;-</span> [<span class="fu">-</span>width<span class="fu">..</span>width]
     <span class="kw">let</span> y <span class="fu">=</span> maxZeroIndex (mandel x) <span class="dv">0</span> height (log2 height)
     <span class="kw">if</span> y <span class="fu">&lt;</span> <span class="dv">1</span> <span class="co">-- We don&#39;t draw point in the absciss</span>
        <span class="kw">then</span> []
        <span class="kw">else</span> return (x<span class="fu">/</span>width,y<span class="fu">/</span>height,colorFromValue <span class="fu">$</span> mandel x y)
     <span class="kw">where</span>
         log2 n <span class="fu">=</span> floor ((log n) <span class="fu">/</span> log <span class="dv">2</span>)</code></pre>
</div>

<p>This function is interesting. For those not used to the list monad here is a natural language version of this function:</p>
<pre class="no-highlight"><code>positivePoints =
    for all x in the range [-width..width]
    let y be smallest number s.t. mandel x y &gt; 0
    if y is on 0 then don&#39;t return a point
    else return the value corresonding to (x,y,color for (x+iy))</code></pre>
<p>In fact using the list monad you write like if you consider only one element at a time and the computation is done non deterministically. To find the smallest number such that <code>mandel x y &gt; 0</code> we use a simple dichotomy:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- given f min max nbtest,</span>
<span class="co">-- considering </span>
<span class="co">--  - f is an increasing function</span>
<span class="co">--  - f(min)=0</span>
<span class="co">--  - f(max)≠0</span>
<span class="co">-- then maxZeroIndex f min max nbtest returns x such that</span>
<span class="co">--    f(x - ε)=0 and f(x + ε)≠0</span>
<span class="co">--    where ε=(max-min)/2^(nbtest+1) </span>
maxZeroIndex func minval maxval <span class="dv">0</span> <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>
maxZeroIndex func minval maxval n <span class="fu">=</span> 
  <span class="kw">if</span> (func medpoint) <span class="fu">/=</span> <span class="dv">0</span> 
       <span class="kw">then</span> maxZeroIndex func minval medpoint (n<span class="fu">-</span><span class="dv">1</span>)
       <span class="kw">else</span> maxZeroIndex func medpoint maxval (n<span class="fu">-</span><span class="dv">1</span>)
  <span class="kw">where</span> medpoint <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span></code></pre>
</div>

<p>No rocket science here. See the result now:</p>
<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/HGLMandelEdges.png" alt="The edges of the mandelbrot set"/>
</div>

<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">colorFromValue n <span class="fu">=</span>
  <span class="kw">let</span> 
<span class="ot">      t ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
      t i <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">5</span> <span class="fu">+</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">5</span><span class="fu">*</span>cos( fromIntegral i <span class="fu">/</span> <span class="dv">10</span> )
  <span class="kw">in</span>
    <span class="dt">Color3</span> (t n) (t (n<span class="fu">+</span><span class="dv">5</span>)) (t (n<span class="fu">+</span><span class="dv">10</span>))</code></pre>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">mandel x y <span class="fu">=</span> 
  <span class="kw">let</span> r <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> x <span class="fu">/</span> width
      i <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> y <span class="fu">/</span> height
  <span class="kw">in</span>
      f (complex r i) <span class="dv">0</span> <span class="dv">64</span></code></pre>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Complex</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
f c z <span class="dv">0</span> <span class="fu">=</span> <span class="dv">0</span>
f c z n <span class="fu">=</span> <span class="kw">if</span> (magnitude z <span class="fu">&gt;</span> <span class="dv">2</span> ) 
          <span class="kw">then</span> n
          <span class="kw">else</span> f c ((z<span class="fu">*</span>z)<span class="fu">+</span>c) (n<span class="fu">-</span><span class="dv">1</span>)</code></pre>
</div>

</div>

<p><a href="code/02_Edges/HGLMandelEdge.lhs" class="cut">Download the source code of this section → 02_Edges/<strong>HGLMandelEdge.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 03_Mandelbulb/<strong>Mandelbulb.lhs</strong></a></p>
<h2 id="d-mandelbrot">3D Mandelbrot?</h2>
<p>Now we will we extend to a third dimension. But, there is no 3D equivalent to complex. In fact, the only extension known are quaternions (in 4D). As I know almost nothing about quaternions, I will use some extended complex, instead of using a 3D projection of quaternions. I am pretty sure this construction is not useful for numbers. But it will be enough for us to create something that look nice.</p>
<p>This section is quite long, but don’t be afraid, most of the code is some OpenGL boilerplate. If you just want to skim this section, here is a high level representation:</p>
<blockquote>
<ul>
<li><p>OpenGL Boilerplate</p></li>
<li>set some IORef (understand variables) for states<br /></li>
<li><p>Drawing:</p>
<ul>
<li>set doubleBuffer, handle depth, window size…</li>
<li>Use state to apply some transformations</li>
</ul></li>
<li><p>Keyboard: hitting some key change the state of IORef</p></li>
<li><p>Generate 3D Object</p></li>
</ul>
<p><sub>~</sub> allPoints :: [ColoredPoint]<br /> allPoints = for all (x,y), -width<x<width, 0<y<height
      Let z be the minimal depth such that
          mandel x y z > 0 add the points (x, y, z,color) (x,-y, z,color) (x, y,-z,color) (x,-y,-z,color) + neighbors to make triangles <sub>~</sub></p>
</blockquote>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Graphics.Rendering.OpenGL
<span class="kw">import</span> Graphics.UI.GLUT
<span class="kw">import</span> Data.IORef
<span class="kw">type</span> <span class="dt">ColoredPoint</span> <span class="fu">=</span> (<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>,<span class="dt">Color3</span> <span class="dt">GLfloat</span>)</code></pre>
</div>

</div>

<p>We declare a new type <code>ExtComplex</code> (for extended complex). An extension of complex numbers with a third component:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">ExtComplex</span> <span class="fu">=</span> <span class="dt">C</span> (<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>) 
                  <span class="kw">deriving</span> (<span class="dt">Show</span>,<span class="dt">Eq</span>)
<span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">ExtComplex</span> <span class="kw">where</span>
    <span class="co">-- The shape of the 3D mandelbrot </span>
    <span class="co">-- will depend on this formula</span>
    <span class="dt">C</span> (x,y,z) <span class="fu">*</span> <span class="dt">C</span> (x&#39;,y&#39;,z&#39;) <span class="fu">=</span> <span class="dt">C</span> (x<span class="fu">*</span>x&#39; <span class="fu">-</span> y<span class="fu">*</span>y&#39; <span class="fu">-</span> z<span class="fu">*</span>z&#39;, 
                                  x<span class="fu">*</span>y&#39; <span class="fu">+</span> y<span class="fu">*</span>x&#39; <span class="fu">+</span> z<span class="fu">*</span>z&#39;, 
                                  x<span class="fu">*</span>z&#39; <span class="fu">+</span> z<span class="fu">*</span>x&#39; )
    <span class="co">-- The rest is straightforward</span>
    fromInteger n <span class="fu">=</span> <span class="dt">C</span> (fromIntegral n, <span class="dv">0</span>, <span class="dv">0</span>)
    <span class="dt">C</span> (x,y,z) <span class="fu">+</span> <span class="dt">C</span> (x&#39;,y&#39;,z&#39;) <span class="fu">=</span> <span class="dt">C</span> (x<span class="fu">+</span>x&#39;, y<span class="fu">+</span>y&#39;, z<span class="fu">+</span>z&#39;)
    abs (<span class="dt">C</span> (x,y,z))     <span class="fu">=</span> <span class="dt">C</span> (sqrt (x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y <span class="fu">+</span> z<span class="fu">*</span>z), <span class="dv">0</span>, <span class="dv">0</span>)
    signum (<span class="dt">C</span> (x,y,z))  <span class="fu">=</span> <span class="dt">C</span> (signum x, signum y, signum z)</code></pre>
</div>

<p>The most important part is the new multiplication instance. Modifying this formula will change radically the shape of the result. Here is the formula written in a more mathematical notation. I called the third component of these extended complex <em>strange</em>.</p>
<p><br /><span class="math">real((<em>x</em>, <em>y</em>, <em>z</em>) * (<em>x</em>ʹ, <em>y</em>ʹ, <em>z</em>ʹ)) = <em>x</em><em>x</em>ʹ − <em>y</em><em>y</em>ʹ − <em>z</em><em>z</em>ʹ</span><br /></p>
<p><br /><span class="math">im((<em>x</em>, <em>y</em>, <em>z</em>) * (<em>x</em>ʹ, <em>y</em>ʹ, <em>z</em>ʹ)) = <em>x</em><em>y</em>ʹ − <em>y</em><em>x</em>ʹ + <em>z</em><em>z</em>ʹ</span><br /></p>
<p><br /><span class="math">strange((<em>x</em>, <em>y</em>, <em>z</em>) * (<em>x</em>ʹ, <em>y</em>ʹ, <em>z</em>ʹ)) = <em>x</em><em>z</em>ʹ + <em>z</em><em>x</em>ʹ</span><br /></p>
<p>Note how if <code>z=z'=0</code> then the multiplication is the same to the complex one.</p>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">extcomplex ::</span> <span class="dt">GLfloat</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span> <span class="ot">-&gt;</span> <span class="dt">ExtComplex</span>
extcomplex x y z <span class="fu">=</span> <span class="dt">C</span> (x,y,z)

<span class="ot">real ::</span> <span class="dt">ExtComplex</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
real (<span class="dt">C</span> (x,y,z))    <span class="fu">=</span> x

<span class="ot">im ::</span> <span class="dt">ExtComplex</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
im   (<span class="dt">C</span> (x,y,z))    <span class="fu">=</span> y

<span class="ot">strange ::</span> <span class="dt">ExtComplex</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
strange (<span class="dt">C</span> (x,y,z)) <span class="fu">=</span> z

<span class="ot">magnitude ::</span> <span class="dt">ExtComplex</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
magnitude <span class="fu">=</span> real<span class="fu">.</span>abs</code></pre>
</div>

</div>

<h3 id="from-2d-to-3d">From 2D to 3D</h3>
<p>As we will use some 3D, we add some new directive in the boilerplate. But mainly, we simply state that will use some depth buffer. And also we will listen the keyboard.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- GLUT need to be initialized</span>
  (progname,_) <span class="ot">&lt;-</span> getArgsAndInitialize
  <span class="co">-- We will use the double buffered mode (GL constraint)</span>
  <span class="co">-- We also Add the DepthBuffer (for 3D)</span>
  initialDisplayMode <span class="fu">$=</span> 
      [<span class="dt">WithDepthBuffer</span>,<span class="dt">DoubleBuffered</span>,<span class="dt">RGBMode</span>]
  <span class="co">-- We create a window with some title</span>
  createWindow <span class="st">&quot;3D HOpengGL Mandelbrot&quot;</span>
  <span class="co">-- We add some directives</span>
  depthFunc  <span class="fu">$=</span> <span class="dt">Just</span> <span class="dt">Less</span>
  windowSize <span class="fu">$=</span> <span class="dt">Size</span> <span class="dv">500</span> <span class="dv">500</span>
  <span class="co">-- Some state variables (I know it feels BAD)</span>
  angle   <span class="ot">&lt;-</span> newIORef ((<span class="dv">35</span>,<span class="dv">0</span>)<span class="ot">::</span>(<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>))
  zoom    <span class="ot">&lt;-</span> newIORef (<span class="dv">2</span><span class="ot">::</span><span class="dt">GLfloat</span>)
  campos  <span class="ot">&lt;-</span> newIORef ((<span class="dv">0</span><span class="fu">.</span><span class="dv">7</span>,<span class="dv">0</span>)<span class="ot">::</span>(<span class="dt">GLfloat</span>,<span class="dt">GLfloat</span>))
  <span class="co">-- Function to call each frame</span>
  idleCallback <span class="fu">$=</span> <span class="dt">Just</span> idle
  <span class="co">-- Function to call when keyboard or mouse is used</span>
  keyboardMouseCallback <span class="fu">$=</span> 
          <span class="dt">Just</span> (keyboardMouse angle zoom campos)
  <span class="co">-- Each time we will need to update the display</span>
  <span class="co">-- we will call the function &#39;display&#39;</span>
  <span class="co">-- But this time, we add some parameters</span>
  displayCallback <span class="fu">$=</span> display angle zoom campos
  <span class="co">-- We enter the main loop</span>
  mainLoop</code></pre>
</div>

<p>The <code>idle</code> is here to change the states. There should never be any modification done in the <code>display</code> function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">idle <span class="fu">=</span> postRedisplay <span class="dt">Nothing</span></code></pre>
</div>

<p>We introduce some helper function to manipulate standard <code>IORef</code>. Mainly <code>modVar x f</code> is equivalent to the imperative <code>x:=f(x)</code>, <code>modFst (x,y) (+1)</code> is equivalent to <code>(x,y) := (x+1,y)</code> and <code>modSnd (x,y) (+1)</code> is equivalent to <code>(x,y) := (x,y+1)</code></p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">modVar v f <span class="fu">=</span> <span class="kw">do</span>
  v&#39; <span class="ot">&lt;-</span> get v
  v <span class="fu">$=</span> (f v&#39;)
mapFst f (x,y) <span class="fu">=</span> (f x,  y)
mapSnd f (x,y) <span class="fu">=</span> (  x,f y)</code></pre>
</div>

<p>And we use them to code the function handling keyboard. We will use the keys <code>hjkl</code> to rotate, <code>oi</code> to zoom and <code>sedf</code> to move. Also, hitting space will reset the view. Remember that <code>angle</code> and <code>campos</code> are pairs and <code>zoom</code> is a scalar. Also note <code>(+0.5)</code> is the function <code>\x-&gt;x+0.5</code> and <code>(-0.5)</code> is the number <code>-0.5</code> (yes I share your pain).</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">keyboardMouse angle zoom campos key state modifiers position <span class="fu">=</span>
  <span class="co">-- We won&#39;t use modifiers nor position</span>
  kact angle zoom campos key state
  <span class="kw">where</span> 
    <span class="co">-- reset view when hitting space</span>
    kact a z p (<span class="dt">Char</span> <span class="ch">&#39; &#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> <span class="kw">do</span>
          a <span class="fu">$=</span> (<span class="dv">0</span>,<span class="dv">0</span>) <span class="co">-- angle </span>
          z <span class="fu">$=</span> <span class="dv">1</span>     <span class="co">-- zoom</span>
          p <span class="fu">$=</span> (<span class="dv">0</span>,<span class="dv">0</span>) <span class="co">-- camera position</span>
    <span class="co">-- use of hjkl to rotate</span>
    kact a _ _ (<span class="dt">Char</span> <span class="ch">&#39;h&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar a (mapFst (<span class="fu">+</span><span class="dv">0</span><span class="fu">.</span><span class="dv">5</span>))
    kact a _ _ (<span class="dt">Char</span> <span class="ch">&#39;l&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar a (mapFst (<span class="fu">+</span>(<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">5</span>)))
    kact a _ _ (<span class="dt">Char</span> <span class="ch">&#39;j&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar a (mapSnd (<span class="fu">+</span><span class="dv">0</span><span class="fu">.</span><span class="dv">5</span>))
    kact a _ _ (<span class="dt">Char</span> <span class="ch">&#39;k&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar a (mapSnd (<span class="fu">+</span>(<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">5</span>)))
    <span class="co">-- use o and i to zoom</span>
    kact _ z _ (<span class="dt">Char</span> <span class="ch">&#39;o&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar z (<span class="fu">*</span><span class="dv">1</span><span class="fu">.</span><span class="dv">1</span>)
    kact _ z _ (<span class="dt">Char</span> <span class="ch">&#39;i&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar z (<span class="fu">*</span><span class="dv">0</span><span class="fu">.</span><span class="dv">9</span>)
    <span class="co">-- use sdfe to move the camera</span>
    kact _ _ p (<span class="dt">Char</span> <span class="ch">&#39;s&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar p (mapFst (<span class="fu">+</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    kact _ _ p (<span class="dt">Char</span> <span class="ch">&#39;f&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar p (mapFst (<span class="fu">+</span>(<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)))
    kact _ _ p (<span class="dt">Char</span> <span class="ch">&#39;d&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar p (mapSnd (<span class="fu">+</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    kact _ _ p (<span class="dt">Char</span> <span class="ch">&#39;e&#39;</span>) <span class="dt">Down</span> <span class="fu">=</span> modVar p (mapSnd (<span class="fu">+</span>(<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)))
    <span class="co">-- any other keys does nothing</span>
    kact _ _ _ _ _ <span class="fu">=</span> return ()</code></pre>
</div>

<p>Note <code>display</code> takes some parameters this time. This function if full of boilerplate:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">display angle zoom position <span class="fu">=</span> <span class="kw">do</span>
   <span class="co">-- set the background color (dark solarized theme)</span>
  clearColor <span class="fu">$=</span> <span class="dt">Color4</span> <span class="dv">0</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">1686</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">2117</span> <span class="dv">1</span>
  clear [<span class="dt">ColorBuffer</span>,<span class="dt">DepthBuffer</span>]
  <span class="co">-- Transformation to change the view</span>
  loadIdentity <span class="co">-- reset any transformation</span>
  <span class="co">-- tranlate</span>
  (x,y) <span class="ot">&lt;-</span> get position
  translate <span class="fu">$</span> <span class="dt">Vector3</span> x y <span class="dv">0</span> 
  <span class="co">-- zoom</span>
  z <span class="ot">&lt;-</span> get zoom
  scale z z z
  <span class="co">-- rotate</span>
  (xangle,yangle) <span class="ot">&lt;-</span> get angle
  rotate xangle <span class="fu">$</span> <span class="dt">Vector3</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">0</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span> (<span class="dv">0</span><span class="fu">.</span><span class="dv">0</span><span class="ot">::</span><span class="dt">GLfloat</span>)
  rotate yangle <span class="fu">$</span> <span class="dt">Vector3</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">0</span> (<span class="dv">0</span><span class="fu">.</span><span class="dv">0</span><span class="ot">::</span><span class="dt">GLfloat</span>)

  <span class="co">-- Now that all transformation were made</span>
  <span class="co">-- We create the object(s)</span>
  preservingMatrix drawMandelbrot

  swapBuffers <span class="co">-- refresh screen</span></code></pre>
</div>

<p>Not much to say about this function. Mainly there are two parts: apply some transformations, draw the object.</p>
<h3 id="the-3d-mandelbrot">The 3D Mandelbrot</h3>
<p>We have finished with the OpenGL section, let’s talk about how we generate the 3D points and colors. First, we will set the number of details to 200 pixels in the three dimensions.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">nbDetails <span class="fu">=</span> <span class="dv">200</span><span class="ot"> ::</span> <span class="dt">GLfloat</span>
width  <span class="fu">=</span> nbDetails
height <span class="fu">=</span> nbDetails
deep   <span class="fu">=</span> nbDetails</code></pre>
</div>

<p>This time, instead of just drawing some line or some group of points, we will show triangles. The function <code>allPoints</code> will provide a multiple of three points. Each three successive point representing the coordinate of each vertex of a triangle.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">drawMandelbrot <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- We will print Points (not triangles for example) </span>
  renderPrimitive <span class="dt">Triangles</span> <span class="fu">$</span> <span class="kw">do</span>
    mapM_ drawColoredPoint allPoints
  <span class="kw">where</span>
      drawColoredPoint (x,y,z,c) <span class="fu">=</span> <span class="kw">do</span>
          color c
          vertex <span class="fu">$</span> <span class="dt">Vertex3</span> x y z</code></pre>
</div>

<p>In fact, we will provide six ordered points. These points will be used to draw two triangles.</p>
<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/triangles.png" alt="Explain triangles"/>
</div>

<p>The next function is a bit long. Here is an approximative English version:</p>
<pre><code>forall x from -width to width
  forall y from -height to height
    forall the neighbors of (x,y)
      let z be the smalled depth such that (mandel x y z)&gt;0
      let c be the color given by mandel x y z 
      add the point corresponding to (x,y,z,c)</code></pre>
<p>Also, I added a test to hide points too far from the border. In fact, this function show points close to the surface of the modified mandelbrot set. But not the mandelbrot set itself.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">depthPoints ::</span> [<span class="dt">ColoredPoint</span>]
depthPoints <span class="fu">=</span> <span class="kw">do</span>
  x <span class="ot">&lt;-</span> [<span class="fu">-</span>width<span class="fu">..</span>width]
  y <span class="ot">&lt;-</span> [<span class="fu">-</span>height<span class="fu">..</span>height]
  <span class="kw">let</span> 
      depthOf x&#39; y&#39; <span class="fu">=</span> maxZeroIndex (mandel x&#39; y&#39;) <span class="dv">0</span> deep logdeep 
      logdeep <span class="fu">=</span> floor ((log deep) <span class="fu">/</span> log <span class="dv">2</span>)
      z1 <span class="fu">=</span> depthOf    x     y
      z2 <span class="fu">=</span> depthOf (x<span class="fu">+</span><span class="dv">1</span>)    y
      z3 <span class="fu">=</span> depthOf (x<span class="fu">+</span><span class="dv">1</span>) (y<span class="fu">+</span><span class="dv">1</span>)
      z4 <span class="fu">=</span> depthOf    x  (y<span class="fu">+</span><span class="dv">1</span>)
      c1 <span class="fu">=</span> mandel    x     y  (z1<span class="fu">+</span><span class="dv">1</span>)
      c2 <span class="fu">=</span> mandel (x<span class="fu">+</span><span class="dv">1</span>)    y  (z2<span class="fu">+</span><span class="dv">1</span>)
      c3 <span class="fu">=</span> mandel (x<span class="fu">+</span><span class="dv">1</span>) (y<span class="fu">+</span><span class="dv">1</span>) (z3<span class="fu">+</span><span class="dv">1</span>)
      c4 <span class="fu">=</span> mandel    x  (y<span class="fu">+</span><span class="dv">1</span>) (z4<span class="fu">+</span><span class="dv">1</span>)
      p1 <span class="fu">=</span> (   x <span class="fu">/</span>width,   y <span class="fu">/</span>height, z1<span class="fu">/</span>deep, colorFromValue c1)
      p2 <span class="fu">=</span> ((x<span class="fu">+</span><span class="dv">1</span>)<span class="fu">/</span>width,   y <span class="fu">/</span>height, z2<span class="fu">/</span>deep, colorFromValue c2)
      p3 <span class="fu">=</span> ((x<span class="fu">+</span><span class="dv">1</span>)<span class="fu">/</span>width,(y<span class="fu">+</span><span class="dv">1</span>)<span class="fu">/</span>height, z3<span class="fu">/</span>deep, colorFromValue c3)
      p4 <span class="fu">=</span> (   x <span class="fu">/</span>width,(y<span class="fu">+</span><span class="dv">1</span>)<span class="fu">/</span>height, z4<span class="fu">/</span>deep, colorFromValue c4)
  <span class="kw">if</span> (and <span class="fu">$</span> map (<span class="fu">&gt;=</span><span class="dv">57</span>) [c1,c2,c3,c4])
  <span class="kw">then</span> []
  <span class="kw">else</span> [p1,p2,p3,p1,p3,p4]</code></pre>
<p>If you look at the function above, you see a lot of common patterns. Haskell is very efficient to make this better. Here is a harder to read but shorter and more generic rewritten function:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">depthPoints ::</span> [<span class="dt">ColoredPoint</span>]
depthPoints <span class="fu">=</span> <span class="kw">do</span>
  x <span class="ot">&lt;-</span> [<span class="fu">-</span>width<span class="fu">..</span>width]
  y <span class="ot">&lt;-</span> [<span class="fu">-</span>height<span class="fu">..</span>height]
  <span class="kw">let</span> 
    neighbors <span class="fu">=</span> [(x,y),(x<span class="fu">+</span><span class="dv">1</span>,y),(x<span class="fu">+</span><span class="dv">1</span>,y<span class="fu">+</span><span class="dv">1</span>),(x,y<span class="fu">+</span><span class="dv">1</span>)]
    depthOf (u,v) <span class="fu">=</span> maxZeroIndex (mandel u v) <span class="dv">0</span> deep logdeep
    logdeep <span class="fu">=</span> floor ((log deep) <span class="fu">/</span> log <span class="dv">2</span>)
    <span class="co">-- zs are 3D points with found depth</span>
    zs <span class="fu">=</span> map (\(u,v) <span class="ot">-&gt;</span> (u,v,depthOf (u,v))) neighbors
    <span class="co">-- ts are 3D pixels + mandel value</span>
    ts <span class="fu">=</span> map (\(u,v,w) <span class="ot">-&gt;</span> (u,v,w,mandel u v (w<span class="fu">+</span><span class="dv">1</span>))) zs
    <span class="co">-- ps are 3D opengl points + color value</span>
    ps <span class="fu">=</span> map (\(u,v,w,c&#39;) <span class="ot">-&gt;</span> 
        (u<span class="fu">/</span>width,v<span class="fu">/</span>height,w<span class="fu">/</span>deep,colorFromValue c&#39;)) ts
  <span class="co">-- If the point diverged too fast, don&#39;t display it</span>
  <span class="kw">if</span> (and <span class="fu">$</span> map (\(_,_,_,c) <span class="ot">-&gt;</span> c<span class="fu">&gt;=</span><span class="dv">57</span>) ts)
  <span class="kw">then</span> []
  <span class="co">-- Draw two triangles</span>
  <span class="kw">else</span> [ps<span class="fu">!!</span><span class="dv">0</span>,ps<span class="fu">!!</span><span class="dv">1</span>,ps<span class="fu">!!</span><span class="dv">2</span>,ps<span class="fu">!!</span><span class="dv">0</span>,ps<span class="fu">!!</span><span class="dv">2</span>,ps<span class="fu">!!</span><span class="dv">3</span>]</code></pre>
</div>

<p>If you prefer the first version, then just imagine how hard it will be to change the enumeration of the point from (x,y) to (x,z) for example.</p>
<p>Also, we didn’t searched for negative values. This modified Mandelbrot is no more symmetric relatively to the plan <code>y=0</code>. But it is symmetric relatively to the plan <code>z=0</code>. Then I mirror these values.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">allPoints ::</span> [<span class="dt">ColoredPoint</span>]
allPoints <span class="fu">=</span> planPoints <span class="fu">++</span> map inverseDepth  planPoints
  <span class="kw">where</span> 
      planPoints <span class="fu">=</span> depthPoints
      inverseDepth (x,y,z,c) <span class="fu">=</span> (x,y,<span class="fu">-</span>z<span class="fu">+</span><span class="dv">1</span><span class="fu">/</span>deep,c)</code></pre>
</div>

<p>The rest of the program is very close to the preceding one.</p>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- given f min max nbtest,</span>
<span class="co">-- considering </span>
<span class="co">--  - f is an increasing function</span>
<span class="co">--  - f(min)=0</span>
<span class="co">--  - f(max)≠0</span>
<span class="co">-- then maxZeroIndex f min max nbtest returns x such that</span>
<span class="co">--    f(x - ε)=0 and f(x + ε)≠0</span>
<span class="co">--    where ε=(max-min)/2^(nbtest+1) </span>
<span class="ot">maxZeroIndex ::</span> (<span class="dt">Fractional</span> a,<span class="dt">Num</span> a,<span class="dt">Num</span> b,<span class="dt">Eq</span> b) <span class="ot">=&gt;</span> 
                 (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a
maxZeroIndex func minval maxval <span class="dv">0</span> <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>
maxZeroIndex func minval maxval n <span class="fu">=</span> 
  <span class="kw">if</span> (func medpoint) <span class="fu">/=</span> <span class="dv">0</span> 
       <span class="kw">then</span> maxZeroIndex func minval medpoint (n<span class="fu">-</span><span class="dv">1</span>)
       <span class="kw">else</span> maxZeroIndex func medpoint maxval (n<span class="fu">-</span><span class="dv">1</span>)
  <span class="kw">where</span> medpoint <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span></code></pre>
</div>

<p>I made the color slightly brighter</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">colorFromValue n <span class="fu">=</span>
  <span class="kw">let</span> 
<span class="ot">      t ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
      t i <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">7</span> <span class="fu">+</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">3</span><span class="fu">*</span>cos( fromIntegral i <span class="fu">/</span> <span class="dv">10</span> )
  <span class="kw">in</span>
    <span class="dt">Color3</span> (t n) (t (n<span class="fu">+</span><span class="dv">5</span>)) (t (n<span class="fu">+</span><span class="dv">10</span>))</code></pre>
</div>

<p>We only changed from <code>Complex</code> to <code>ExtComplex</code> of the main <code>f</code> function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">ExtComplex</span> <span class="ot">-&gt;</span> <span class="dt">ExtComplex</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
f c z <span class="dv">0</span> <span class="fu">=</span> <span class="dv">0</span>
f c z n <span class="fu">=</span> <span class="kw">if</span> (magnitude z <span class="fu">&gt;</span> <span class="dv">2</span> ) 
          <span class="kw">then</span> n
          <span class="kw">else</span> f c ((z<span class="fu">*</span>z)<span class="fu">+</span>c) (n<span class="fu">-</span><span class="dv">1</span>)</code></pre>
</div>

</div>

<p>We simply add a new dimension to the <code>mandel</code> function and change the type signature of <code>f</code> from <code>Complex</code> to <code>ExtComplex</code>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">mandel x y z <span class="fu">=</span> 
  <span class="kw">let</span> r <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> x <span class="fu">/</span> width
      i <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> y <span class="fu">/</span> height
      s <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">*</span> z <span class="fu">/</span> deep
  <span class="kw">in</span>
      f (extcomplex r i s) <span class="dv">0</span> <span class="dv">64</span></code></pre>
</div>

<p>Here is the result:</p>
<div>
<img src="/Scratch/img/blog/Haskell-OpenGL-Mandelbrot/mandelbrot_3D.png" alt="A 3D mandelbrot like"/>
</div>

<p><a href="code/03_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 03_Mandelbulb/<strong>Mandelbulb.lhs</strong> </a></p>
<hr/>
<p><a href="code/04_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 04_Mandelbulb/<strong>Mandelbulb.lhs</strong></a></p>
<h2 id="naïve-code-cleaning">Naïve code cleaning</h2>
<p>The first approach to clean the code is to separate the GLUT/OpenGL part from the computation of the shape. Here is the cleaned version of the preceding section. Most boilerplate was put in external files.</p>
<ul>
<li><a href="code/04_Mandelbulb/YBoiler.hs"><code>YBoiler.hs</code></a>, the 3D rendering</li>
<li><a href="code/04_Mandelbulb/Mandel.hs"><code>Mandel</code></a>, the mandel function</li>
<li><a href="code/04_Mandelbulb/ExtComplex.hs"><code>ExtComplex</code></a>, the extended complexes</li>
</ul>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> YBoiler -- Most the OpenGL Boilerplate
<span class="kw">import</span> Mandel -- The 3D Mandelbrot maths</code></pre>
</div>

<p>The <code>yMainLoop</code> takes two arguments: the title of the window and a function from time to triangles</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> yMainLoop <span class="st">&quot;3D Mandelbrot&quot;</span> (\_ <span class="ot">-&gt;</span> allPoints)</code></pre>
</div>

<p>We set some global constant (this is generally bad).</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">nbDetails <span class="fu">=</span> <span class="dv">200</span><span class="ot"> ::</span> <span class="dt">GLfloat</span>
width  <span class="fu">=</span> nbDetails
height <span class="fu">=</span> nbDetails
deep   <span class="fu">=</span> nbDetails</code></pre>
</div>

<p>We then generate colored points from our function. This is similar to the preceding section.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">allPoints ::</span> [<span class="dt">ColoredPoint</span>]
allPoints <span class="fu">=</span> planPoints <span class="fu">++</span> map inverseDepth  planPoints
  <span class="kw">where</span> 
      planPoints <span class="fu">=</span> depthPoints <span class="fu">++</span> map inverseHeight depthPoints
      inverseHeight (x,y,z,c) <span class="fu">=</span> (x,<span class="fu">-</span>y,z,c)
      inverseDepth (x,y,z,c) <span class="fu">=</span> (x,y,<span class="fu">-</span>z<span class="fu">+</span><span class="dv">1</span><span class="fu">/</span>deep,c)</code></pre>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">depthPoints ::</span> [<span class="dt">ColoredPoint</span>]
depthPoints <span class="fu">=</span> <span class="kw">do</span>
  x <span class="ot">&lt;-</span> [<span class="fu">-</span>width<span class="fu">..</span>width]
  y <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span>height]
  <span class="kw">let</span> 
    neighbors <span class="fu">=</span> [(x,y),(x<span class="fu">+</span><span class="dv">1</span>,y),(x<span class="fu">+</span><span class="dv">1</span>,y<span class="fu">+</span><span class="dv">1</span>),(x,y<span class="fu">+</span><span class="dv">1</span>)]
    depthOf (u,v) <span class="fu">=</span> maxZeroIndex (ymandel u v) <span class="dv">0</span> deep <span class="dv">7</span>
    <span class="co">-- zs are 3D points with found depth</span>
    zs <span class="fu">=</span> map (\(u,v) <span class="ot">-&gt;</span> (u,v,depthOf (u,v))) neighbors
    <span class="co">-- ts are 3D pixels + mandel value</span>
    ts <span class="fu">=</span> map (\(u,v,w) <span class="ot">-&gt;</span> (u,v,w,ymandel u v (w<span class="fu">+</span><span class="dv">1</span>))) zs
    <span class="co">-- ps are 3D opengl points + color value</span>
    ps <span class="fu">=</span> map (\(u,v,w,c&#39;) <span class="ot">-&gt;</span> 
        (u<span class="fu">/</span>width,v<span class="fu">/</span>height,w<span class="fu">/</span>deep,colorFromValue c&#39;)) ts
  <span class="co">-- If the point diverged too fast, don&#39;t display it</span>
  <span class="kw">if</span> (and <span class="fu">$</span> map (\(_,_,_,c) <span class="ot">-&gt;</span> c<span class="fu">&gt;=</span><span class="dv">57</span>) ts)
  <span class="kw">then</span> []
  <span class="co">-- Draw two triangles</span>
  <span class="kw">else</span> [ps<span class="fu">!!</span><span class="dv">0</span>,ps<span class="fu">!!</span><span class="dv">1</span>,ps<span class="fu">!!</span><span class="dv">2</span>,ps<span class="fu">!!</span><span class="dv">0</span>,ps<span class="fu">!!</span><span class="dv">2</span>,ps<span class="fu">!!</span><span class="dv">3</span>]

<span class="co">-- given f min max nbtest,</span>
<span class="co">-- considering </span>
<span class="co">--  - f is an increasing function</span>
<span class="co">--  - f(min)=0</span>
<span class="co">--  - f(max)≠0</span>
<span class="co">-- then maxZeroIndex f min max nbtest returns x such that</span>
<span class="co">--    f(x - ε)=0 and f(x + ε)≠0</span>
<span class="co">--    where ε=(max-min)/2^(nbtest+1) </span>
maxZeroIndex func minval maxval <span class="dv">0</span> <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>
maxZeroIndex func minval maxval n <span class="fu">=</span> 
  <span class="kw">if</span> (func medpoint) <span class="fu">/=</span> <span class="dv">0</span> 
       <span class="kw">then</span> maxZeroIndex func minval medpoint (n<span class="fu">-</span><span class="dv">1</span>)
       <span class="kw">else</span> maxZeroIndex func medpoint maxval (n<span class="fu">-</span><span class="dv">1</span>)
  <span class="kw">where</span> medpoint <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>

colorFromValue n <span class="fu">=</span>
  <span class="kw">let</span> 
<span class="ot">      t ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">GLfloat</span>
      t i <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">7</span> <span class="fu">+</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">3</span><span class="fu">*</span>cos( fromIntegral i <span class="fu">/</span> <span class="dv">10</span> )
  <span class="kw">in</span>
    ((t n),(t (n<span class="fu">+</span><span class="dv">5</span>)),(t (n<span class="fu">+</span><span class="dv">10</span>)))

ymandel x y z <span class="fu">=</span> mandel (<span class="dv">2</span><span class="fu">*</span>x<span class="fu">/</span>width) (<span class="dv">2</span><span class="fu">*</span>y<span class="fu">/</span>height) (<span class="dv">2</span><span class="fu">*</span>z<span class="fu">/</span>deep) <span class="dv">64</span></code></pre>
</div>

<p>This code is cleaner but many things doesn’t feel right. First, all the user interaction code is outside our main file. I feel it is okay to hide the detail for the rendering. But I would have preferred to control the user actions.</p>
<p>On the other hand, we continue to handle a lot rendering details. For example, we provide ordered vertices.</p>
<p><a href="code/04_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 04_Mandelbulb/<strong>Mandelbulb.lhs</strong> </a></p>
<hr/>
<p><a href="code/05_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 05_Mandelbulb/<strong>Mandelbulb.lhs</strong></a></p>
<h2 id="functional-organization">Functional organization?</h2>
<p>Some points:</p>
<ol style="list-style-type: decimal">
<li>OpenGL and GLUT is done in C. In particular the <code>mainLoop</code> function is a direct link to the C library (FFI). This function is clearly far from the functional paradigm. Could we make this better? We will have two choices:</li>
</ol>
<ul>
<li>create our own <code>mainLoop</code> function to make it more functional.</li>
<li>deal with the imperative nature of the GLUT <code>mainLoop</code> function.</li>
</ul>
<p>As one of the goal of this article is to understand how to deal with existing libraries and particularly the one coming from imperative languages, we will continue to use the <code>mainLoop</code> function. 2. Our main problem come from user interaction. If you ask “the Internet”, about how to deal with user interaction with a functional paradigm, the main answer is to use <em>functional reactive programming</em> (FRP). I won’t use FRP in this article. Instead, I’ll use a simpler while less effective way to deal with user interaction. But The method I’ll use will be as pure and functional as possible.</p>
<p>Here is how I imagine things should go. First, what the main loop should look like if we could make our own:</p>
<pre class="no-highlight"><code>functionalMainLoop =
    Read user inputs and provide a list of actions
    Apply all actions to the World
    Display one frame 
    repetere aeternum</code></pre>
<p>Clearly, ideally we should provide only three parameters to this main loop function:</p>
<ul>
<li>an initial World state</li>
<li>a mapping between the user interactions and functions which modify the world</li>
<li>a function taking two parameters: time and world state and render a new world without user interaction.</li>
</ul>
<p>Here is a real working code, I’ve hidden most display functions. The YGL, is a kind of framework to display 3D functions. But it can easily be extended to many kind of representation.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> YGL -- Most the OpenGL Boilerplate
<span class="kw">import</span> Mandel -- The 3D Mandelbrot maths</code></pre>
</div>

<p>We first set the mapping between user input and actions. The type of each couple should be of the form <code>(user input, f)</code> where (in a first time) <code>f:World -&gt; World</code>. It means, the user input will transform the world state.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Centralize all user input interaction</span>
<span class="ot">inputActionMap ::</span> <span class="dt">InputMap</span> <span class="dt">World</span>
inputActionMap <span class="fu">=</span> inputMapFromList [
     (<span class="dt">Press</span> <span class="ch">&#39;k&#39;</span> , rotate xdir   <span class="dv">5</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;i&#39;</span> , rotate xdir (<span class="fu">-</span><span class="dv">5</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;j&#39;</span> , rotate ydir   <span class="dv">5</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;l&#39;</span> , rotate ydir (<span class="fu">-</span><span class="dv">5</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;o&#39;</span> , rotate zdir   <span class="dv">5</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;u&#39;</span> , rotate zdir (<span class="fu">-</span><span class="dv">5</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;f&#39;</span> , translate xdir   <span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;s&#39;</span> , translate xdir (<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;e&#39;</span> , translate ydir   <span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;d&#39;</span> , translate ydir (<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;z&#39;</span> , translate zdir   <span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;r&#39;</span> , translate zdir (<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;+&#39;</span> , zoom    <span class="dv">1</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;-&#39;</span> , zoom (<span class="dv">1</span><span class="fu">/</span><span class="dv">1</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;h&#39;</span> , resize    <span class="dv">1</span><span class="fu">.</span><span class="dv">2</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;g&#39;</span> , resize (<span class="dv">1</span><span class="fu">/</span><span class="dv">1</span><span class="fu">.</span><span class="dv">2</span>))
    ]</code></pre>
</div>

<p>And of course a type design the World State. The important part is that it is our World State type. We could have used any kind of data type.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- I prefer to set my own name for these types</span>
<span class="kw">data</span> <span class="dt">World</span> <span class="fu">=</span> <span class="dt">World</span> {
<span class="ot">      angle       ::</span> <span class="dt">Point3D</span>
    ,<span class="ot"> scale       ::</span> <span class="dt">Scalar</span>
    ,<span class="ot"> position    ::</span> <span class="dt">Point3D</span>
    ,<span class="ot"> shape       ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">Function3D</span>
    ,<span class="ot"> box         ::</span> <span class="dt">Box3D</span>
    ,<span class="ot"> told        ::</span> <span class="dt">Time</span> <span class="co">-- last frame time</span>
    } </code></pre>
</div>

<p>The important part to glue our own type to the framework is to make our type an instance of the type class <code>DisplayableWorld</code>. We simply have to provide the definition of some functions.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">DisplayableWorld</span> <span class="dt">World</span> <span class="kw">where</span>
  winTitle _ <span class="fu">=</span> <span class="st">&quot;The YGL Mandelbulb&quot;</span>
  camera w <span class="fu">=</span> <span class="dt">Camera</span> {
        camPos <span class="fu">=</span> position w, 
        camDir <span class="fu">=</span> angle w,
        camZoom <span class="fu">=</span> scale w }
  <span class="co">-- objects for world w</span>
  <span class="co">-- is the list of one unique element</span>
  <span class="co">-- The element is an YObject</span>
  <span class="co">--   more precisely the XYFunc Function3D Box3D</span>
  <span class="co">--   where the Function3D is the type</span>
  <span class="co">--             Point -&gt; Point -&gt; Maybe (Point,Color)</span>
  <span class="co">--   and its value here is ((shape w) res)</span>
  <span class="co">--   and the Box3D value is defbox</span>
  objects w <span class="fu">=</span> [<span class="dt">XYFunc</span> ((shape  w) res) defbox]
              <span class="kw">where</span>
                  res <span class="fu">=</span> resolution <span class="fu">$</span> box w
                  defbox <span class="fu">=</span> box w</code></pre>
</div>

<p>The <code>camera</code> function will retrieve an object of type <code>Camera</code> which contains most necessary information to set our camera. The <code>objects</code> function will returns a list of objects. Their type is <code>YObject</code>. Note the generation of triangles is no more in this file. Until here we only used declarative pattern.</p>
<p>We also need to set all our transformation functions. These function are used to update the world state.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">xdir ::</span> <span class="dt">Point3D</span>
xdir <span class="fu">=</span> makePoint3D (<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">0</span>)
<span class="ot">ydir ::</span> <span class="dt">Point3D</span>
ydir <span class="fu">=</span> makePoint3D (<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>)
<span class="ot">zdir ::</span> <span class="dt">Point3D</span>
zdir <span class="fu">=</span> makePoint3D (<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>)</code></pre>
</div>

<p>Note <code>(-*&lt;)</code> is the scalar product (<code>α -*&lt; (x,y,z) = (αx,αy,αz)</code>). Also note we could add two Point3D.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">rotate ::</span> <span class="dt">Point3D</span> <span class="ot">-&gt;</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
rotate dir angleValue world <span class="fu">=</span> 
  world {
     angle <span class="fu">=</span> (angle world) <span class="fu">+</span> (angleValue <span class="fu">-*&lt;</span> dir) }

<span class="ot">translate ::</span> <span class="dt">Point3D</span> <span class="ot">-&gt;</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
translate dir len world <span class="fu">=</span> 
  world {
    position <span class="fu">=</span> (position world) <span class="fu">+</span> (len <span class="fu">-*&lt;</span> dir) }

<span class="ot">zoom ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
zoom z world <span class="fu">=</span> world {
    scale <span class="fu">=</span> z <span class="fu">*</span> scale world }

<span class="ot">resize ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
resize r world <span class="fu">=</span> world {
    box <span class="fu">=</span> (box world) {
     resolution <span class="fu">=</span> sqrt ((resolution (box world))<span class="fu">**</span><span class="dv">2</span> <span class="fu">*</span> r) }}</code></pre>
</div>

<p>The resize is used to generate the 3D function. As I wanted the time spent to generate a more detailed view to grow linearly I use this not so straightforward formula.</p>
<p>The <code>yMainLoop</code> takes three arguments.</p>
<ul>
<li>A map between user Input and world transformation</li>
<li>A timed world transformation</li>
<li>An initial world state</li>
</ul>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> yMainLoop inputActionMap idleAction initialWorld</code></pre>
</div>

<p>Here is our initial world state.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- We initialize the world state</span>
<span class="co">-- then angle, position and zoom of the camera</span>
<span class="co">-- And the shape function</span>
<span class="ot">initialWorld ::</span> <span class="dt">World</span>
initialWorld <span class="fu">=</span> <span class="dt">World</span> {
   angle <span class="fu">=</span> makePoint3D (<span class="fu">-</span><span class="dv">30</span>,<span class="fu">-</span><span class="dv">30</span>,<span class="dv">0</span>)
 , position <span class="fu">=</span> makePoint3D (<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>)
 , scale <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">8</span>
 , shape <span class="fu">=</span> shapeFunc 
 , box <span class="fu">=</span> <span class="dt">Box3D</span> { minPoint <span class="fu">=</span> makePoint3D (<span class="fu">-</span><span class="dv">2</span>,<span class="fu">-</span><span class="dv">2</span>,<span class="fu">-</span><span class="dv">2</span>)
               , maxPoint <span class="fu">=</span>  makePoint3D (<span class="dv">2</span>,<span class="dv">2</span>,<span class="dv">2</span>)
               , resolution <span class="fu">=</span>  <span class="dv">0</span><span class="fu">.</span><span class="dv">16</span> }
 , told <span class="fu">=</span> <span class="dv">0</span>
 }</code></pre>
</div>

<p>We will define <code>shapeFunc</code> later. Here is the function which transform the world even without user action. Mainly it makes some rotation.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">idleAction ::</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
idleAction tnew world <span class="fu">=</span> world {
    angle <span class="fu">=</span> (angle world) <span class="fu">+</span> (delta <span class="fu">-*&lt;</span> zdir)
  , told <span class="fu">=</span> tnew
  }
  <span class="kw">where</span> 
      anglePerSec <span class="fu">=</span> <span class="dv">5</span><span class="fu">.</span><span class="dv">0</span>
      delta <span class="fu">=</span> anglePerSec <span class="fu">*</span> elapsed <span class="fu">/</span> <span class="dv">1000</span><span class="fu">.</span><span class="dv">0</span>
      elapsed <span class="fu">=</span> fromIntegral (tnew <span class="fu">-</span> (told world))</code></pre>
</div>

<p>Now the function which will generate points in 3D. The first parameter (<code>res</code>) is the resolution of the vertex generation. More precisely, <code>res</code> is distance between two points on one direction. We need it to “close” our shape.</p>
<p>The type <code>Function3D</code> is <code>Point -&gt; Point -&gt; Maybe Point</code>. Because we consider partial functions (for some <code>(x,y)</code> our function can be undefined).</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">shapeFunc ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">Function3D</span>
shapeFunc res x y <span class="fu">=</span> 
  <span class="kw">let</span> 
      z <span class="fu">=</span> maxZeroIndex (ymandel x y) <span class="dv">0</span> <span class="dv">1</span> <span class="dv">20</span>
  <span class="kw">in</span>
  <span class="kw">if</span> and [ maxZeroIndex (ymandel (x<span class="fu">+</span>xeps) (y<span class="fu">+</span>yeps)) <span class="dv">0</span> <span class="dv">1</span> <span class="dv">20</span> <span class="fu">&lt;</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">000001</span> <span class="fu">|</span>
              val <span class="ot">&lt;-</span> [res], xeps <span class="ot">&lt;-</span> [<span class="fu">-</span>val,val], yeps<span class="ot">&lt;-</span>[<span class="fu">-</span>val,val]]
      <span class="kw">then</span> <span class="dt">Nothing</span> 
      <span class="kw">else</span> <span class="dt">Just</span> (z,colorFromValue ((ymandel x y z) <span class="fu">*</span> <span class="dv">64</span>))</code></pre>
</div>

<p>With the color function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">colorFromValue ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Color</span>
colorFromValue n <span class="fu">=</span>
  <span class="kw">let</span> 
<span class="ot">      t ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Scalar</span>
      t i <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">7</span> <span class="fu">+</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">3</span><span class="fu">*</span>cos( i <span class="fu">/</span> <span class="dv">10</span> )
  <span class="kw">in</span>
    makeColor (t n) (t (n<span class="fu">+</span><span class="dv">5</span>)) (t (n<span class="fu">+</span><span class="dv">10</span>))</code></pre>
</div>

<p>The rest is similar to the preceding sections.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- given f min max nbtest,</span>
<span class="co">-- considering </span>
<span class="co">--  - f is an increasing function</span>
<span class="co">--  - f(min)=0</span>
<span class="co">--  - f(max)≠0</span>
<span class="co">-- then maxZeroIndex f min max nbtest returns x such that</span>
<span class="co">--    f(x - ε)=0 and f(x + ε)≠0</span>
<span class="co">--    where ε=(max-min)/2^(nbtest+1) </span>
<span class="ot">maxZeroIndex ::</span> (<span class="dt">Fractional</span> a,<span class="dt">Num</span> a,<span class="dt">Num</span> b,<span class="dt">Eq</span> b) <span class="ot">=&gt;</span> 
                 (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a
maxZeroIndex _ minval maxval <span class="dv">0</span> <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>
maxZeroIndex func minval maxval n <span class="fu">=</span> 
  <span class="kw">if</span> (func medpoint) <span class="fu">/=</span> <span class="dv">0</span> 
       <span class="kw">then</span> maxZeroIndex func minval medpoint (n<span class="fu">-</span><span class="dv">1</span>)
       <span class="kw">else</span> maxZeroIndex func medpoint maxval (n<span class="fu">-</span><span class="dv">1</span>)
  <span class="kw">where</span> medpoint <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>

<span class="ot">ymandel ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span>
ymandel x y z <span class="fu">=</span> fromIntegral (mandel x y z <span class="dv">64</span>) <span class="fu">/</span> <span class="dv">64</span></code></pre>
</div>

<p>I won’t explain how the magic occurs here. If you are interested, just read the file <a href="code/05_Mandelbulb/YGL.hs"><code>YGL.hs</code></a>. It is commented a lot.</p>
<ul>
<li><a href="code/05_Mandelbulb/YGL.hs"><code>YGL.hs</code></a>, the 3D rendering framework</li>
<li><a href="code/05_Mandelbulb/Mandel.hs"><code>Mandel</code></a>, the mandel function</li>
<li><a href="code/05_Mandelbulb/ExtComplex.hs"><code>ExtComplex</code></a>, the extended complexes</li>
</ul>
<p><a href="code/05_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 05_Mandelbulb/<strong>Mandelbulb.lhs</strong> </a></p>
<hr/>
<p><a href="code/06_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 06_Mandelbulb/<strong>Mandelbulb.lhs</strong></a></p>
<h2 id="optimization">Optimization</h2>
<p>Our code architecture feel very clean. All the meaningful code is in our main file and all display details are externalized. If you read the code of <code>YGL.hs</code>, you’ll see I didn’t made everything perfect. For example, I didn’t finished the code of the lights. But I believe it is a good first step and it will be easy to go further. Unfortunately the program of the preceding session is extremely slow. We compute the Mandelbulb for each frame now.</p>
<p>Before our program structure was:</p>
<pre class="no-highlight"><code>Constant Function -&gt; Constant List of Triangles -&gt; Display</code></pre>
<p>Now we have</p>
<pre class="no-highlight"><code>Main loop -&gt; World -&gt; Function -&gt; List of Objects -&gt; Atoms -&gt; Display</code></pre>
<p>The World state could change. The compiler can no more optimize the computation for us. We have to manually explain when to redraw the shape.</p>
<p>To optimize we must do some things in a lower level. Mostly the program remains the same, but it will provide the list of atoms directly.</p>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> YGL -- Most the OpenGL Boilerplate
<span class="kw">import</span> Mandel -- The 3D Mandelbrot maths

<span class="co">-- Centralize all user input interaction</span>
<span class="ot">inputActionMap ::</span> <span class="dt">InputMap</span> <span class="dt">World</span>
inputActionMap <span class="fu">=</span> inputMapFromList [
     (<span class="dt">Press</span> <span class="ch">&#39; &#39;</span> , switchRotation)
    ,(<span class="dt">Press</span> <span class="ch">&#39;k&#39;</span> , rotate xdir <span class="dv">5</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;i&#39;</span> , rotate xdir (<span class="fu">-</span><span class="dv">5</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;j&#39;</span> , rotate ydir <span class="dv">5</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;l&#39;</span> , rotate ydir (<span class="fu">-</span><span class="dv">5</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;o&#39;</span> , rotate zdir <span class="dv">5</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;u&#39;</span> , rotate zdir (<span class="fu">-</span><span class="dv">5</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;f&#39;</span> , translate xdir <span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;s&#39;</span> , translate xdir (<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;e&#39;</span> , translate ydir <span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;d&#39;</span> , translate ydir (<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;z&#39;</span> , translate zdir <span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;r&#39;</span> , translate zdir (<span class="fu">-</span><span class="dv">0</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;+&#39;</span> , zoom <span class="dv">1</span><span class="fu">.</span><span class="dv">1</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;-&#39;</span> , zoom (<span class="dv">1</span><span class="fu">/</span><span class="dv">1</span><span class="fu">.</span><span class="dv">1</span>))
    ,(<span class="dt">Press</span> <span class="ch">&#39;h&#39;</span> , resize <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span>)
    ,(<span class="dt">Press</span> <span class="ch">&#39;g&#39;</span> , resize (<span class="dv">1</span><span class="fu">/</span><span class="dv">2</span><span class="fu">.</span><span class="dv">0</span>))
    ]</code></pre>
</div>

</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">World</span> <span class="fu">=</span> <span class="dt">World</span> {
<span class="ot">      angle       ::</span> <span class="dt">Point3D</span>
    ,<span class="ot"> anglePerSec ::</span> <span class="dt">Scalar</span>
    ,<span class="ot"> scale       ::</span> <span class="dt">Scalar</span>
    ,<span class="ot"> position    ::</span> <span class="dt">Point3D</span>
    ,<span class="ot"> box         ::</span> <span class="dt">Box3D</span>
    ,<span class="ot"> told        ::</span> <span class="dt">Time</span> 
    <span class="co">-- We replace shape by cache</span>
    ,<span class="ot"> cache       ::</span> [<span class="dt">YObject</span>]
    } </code></pre>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">DisplayableWorld</span> <span class="dt">World</span> <span class="kw">where</span>
  winTitle _ <span class="fu">=</span> <span class="st">&quot;The YGL Mandelbulb&quot;</span>
  camera w <span class="fu">=</span> <span class="dt">Camera</span> {
        camPos <span class="fu">=</span> position w, 
        camDir <span class="fu">=</span> angle w,
        camZoom <span class="fu">=</span> scale w }
  <span class="co">-- We update our objects instanciation</span>
  objects <span class="fu">=</span> cache</code></pre>
</div>

<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">xdir ::</span> <span class="dt">Point3D</span>
xdir <span class="fu">=</span> makePoint3D (<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">0</span>)
<span class="ot">ydir ::</span> <span class="dt">Point3D</span>
ydir <span class="fu">=</span> makePoint3D (<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">0</span>)
<span class="ot">zdir ::</span> <span class="dt">Point3D</span>
zdir <span class="fu">=</span> makePoint3D (<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>)

<span class="ot">rotate ::</span> <span class="dt">Point3D</span> <span class="ot">-&gt;</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
rotate dir angleValue world <span class="fu">=</span> 
  world {
     angle <span class="fu">=</span> angle world <span class="fu">+</span> (angleValue <span class="fu">-*&lt;</span> dir) }

<span class="ot">switchRotation ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
switchRotation world <span class="fu">=</span> 
  world {
     anglePerSec <span class="fu">=</span> <span class="kw">if</span> anglePerSec world <span class="fu">&gt;</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">0</span> <span class="kw">else</span> <span class="dv">5</span><span class="fu">.</span><span class="dv">0</span> }

<span class="ot">translate ::</span> <span class="dt">Point3D</span> <span class="ot">-&gt;</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
translate dir len world <span class="fu">=</span> 
  world {
    position <span class="fu">=</span> position world <span class="fu">+</span> (len <span class="fu">-*&lt;</span> dir) }

<span class="ot">zoom ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
zoom z world <span class="fu">=</span> world {
    scale <span class="fu">=</span> z <span class="fu">*</span> scale world }</code></pre>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> yMainLoop inputActionMap idleAction initialWorld</code></pre>
</div>

</div>

<p>Our initial world state is slightly changed:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- We initialize the world state</span>
<span class="co">-- then angle, position and zoom of the camera</span>
<span class="co">-- And the shape function</span>
<span class="ot">initialWorld ::</span> <span class="dt">World</span>
initialWorld <span class="fu">=</span> <span class="dt">World</span> {
   angle <span class="fu">=</span> makePoint3D (<span class="dv">30</span>,<span class="dv">30</span>,<span class="dv">0</span>)
 , anglePerSec <span class="fu">=</span> <span class="dv">5</span><span class="fu">.</span><span class="dv">0</span>
 , position <span class="fu">=</span> makePoint3D (<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>)
 , scale <span class="fu">=</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">0</span>
 , box <span class="fu">=</span> <span class="dt">Box3D</span> { minPoint <span class="fu">=</span> makePoint3D (<span class="dv">0</span><span class="fu">-</span>eps, <span class="dv">0</span><span class="fu">-</span>eps, <span class="dv">0</span><span class="fu">-</span>eps)
               , maxPoint <span class="fu">=</span> makePoint3D (<span class="dv">0</span><span class="fu">+</span>eps, <span class="dv">0</span><span class="fu">+</span>eps, <span class="dv">0</span><span class="fu">+</span>eps)
               , resolution <span class="fu">=</span>  <span class="dv">0</span><span class="fu">.</span><span class="dv">02</span> }
 , told <span class="fu">=</span> <span class="dv">0</span>
 <span class="co">-- We declare cache directly this time</span>
 , cache <span class="fu">=</span> objectFunctionFromWorld initialWorld
 }
 <span class="kw">where</span> eps<span class="fu">=</span><span class="dv">2</span></code></pre>
</div>

<p>The use of <code>eps</code> is a hint to make a better zoom by computing with the right bounds.</p>
<p>We use the <code>YGL.getObject3DFromShapeFunction</code> function directly. This way instead of providing <code>XYFunc</code>, we provide directly a list of Atoms.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">objectFunctionFromWorld ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> [<span class="dt">YObject</span>]
objectFunctionFromWorld w <span class="fu">=</span> [<span class="dt">Atoms</span> atomList]
  <span class="kw">where</span> atomListPositive <span class="fu">=</span> 
          getObject3DFromShapeFunction
              (shapeFunc (resolution (box w))) (box w)
        atomList <span class="fu">=</span> atomListPositive <span class="fu">++</span> 
          map negativeTriangle atomListPositive
        negativeTriangle (<span class="dt">ColoredTriangle</span> (p1,p2,p3,c)) <span class="fu">=</span> 
              <span class="dt">ColoredTriangle</span> (negz p1,negz p3,negz p2,c)
              <span class="kw">where</span> negz (<span class="dt">P</span> (x,y,z)) <span class="fu">=</span> <span class="dt">P</span> (x,y,<span class="fu">-</span>z)</code></pre>
</div>

<p>We know that resize is the only world change that necessitate to recompute the list of atoms (triangles). Then we update our world state accordingly.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">resize ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
resize r world <span class="fu">=</span> 
  tmpWorld { cache <span class="fu">=</span> objectFunctionFromWorld tmpWorld }
  <span class="kw">where</span> 
      tmpWorld <span class="fu">=</span> world { box <span class="fu">=</span> (box world) {
              resolution <span class="fu">=</span> sqrt ((resolution (box world))<span class="fu">**</span><span class="dv">2</span> <span class="fu">*</span> r) }}</code></pre>
</div>

<p>All the rest is exactly the same.</p>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">idleAction ::</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span>
idleAction tnew world <span class="fu">=</span> 
      world {
        angle <span class="fu">=</span> angle world <span class="fu">+</span> (delta <span class="fu">-*&lt;</span> zdir)
      , told <span class="fu">=</span> tnew
      }
  <span class="kw">where</span> 
      delta <span class="fu">=</span> anglePerSec world <span class="fu">*</span> elapsed <span class="fu">/</span> <span class="dv">1000</span><span class="fu">.</span><span class="dv">0</span>
      elapsed <span class="fu">=</span> fromIntegral (tnew <span class="fu">-</span> (told world))

<span class="ot">shapeFunc ::</span> <span class="dt">Scalar</span> <span class="ot">-&gt;</span> <span class="dt">Function3D</span>
shapeFunc res x y <span class="fu">=</span> 
  <span class="kw">let</span> 
      z <span class="fu">=</span> maxZeroIndex (ymandel x y) <span class="dv">0</span> <span class="dv">1</span> <span class="dv">20</span>
  <span class="kw">in</span>
  <span class="kw">if</span> and [ maxZeroIndex (ymandel (x<span class="fu">+</span>xeps) (y<span class="fu">+</span>yeps)) <span class="dv">0</span> <span class="dv">1</span> <span class="dv">20</span> <span class="fu">&lt;</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">000001</span> <span class="fu">|</span>
              val <span class="ot">&lt;-</span> [res], xeps <span class="ot">&lt;-</span> [<span class="fu">-</span>val,val], yeps<span class="ot">&lt;-</span>[<span class="fu">-</span>val,val]]
      <span class="kw">then</span> <span class="dt">Nothing</span> 
      <span class="kw">else</span> <span class="dt">Just</span> (z,colorFromValue <span class="dv">0</span>)

<span class="ot">colorFromValue ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Color</span>
colorFromValue n <span class="fu">=</span>
  <span class="kw">let</span> 
<span class="ot">      t ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Scalar</span>
      t i <span class="fu">=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">0</span> <span class="fu">+</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">5</span><span class="fu">*</span>cos( i <span class="fu">/</span><span class="dv">10</span> )
  <span class="kw">in</span>
    makeColor (t n) (t (n<span class="fu">+</span><span class="dv">5</span>)) (t (n<span class="fu">+</span><span class="dv">10</span>))

<span class="co">-- given f min max nbtest,</span>
<span class="co">-- considering </span>
<span class="co">--  - f is an increasing function</span>
<span class="co">--  - f(min)=0</span>
<span class="co">--  - f(max)≠0</span>
<span class="co">-- then maxZeroIndex f min max nbtest returns x such that</span>
<span class="co">--    f(x - ε)=0 and f(x + ε)≠0</span>
<span class="co">--    where ε=(max-min)/2^(nbtest+1) </span>
<span class="ot">maxZeroIndex ::</span> (<span class="dt">Fractional</span> a,<span class="dt">Num</span> a,<span class="dt">Num</span> b,<span class="dt">Eq</span> b) <span class="ot">=&gt;</span> 
                 (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a
maxZeroIndex _ minval maxval <span class="dv">0</span> <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>
maxZeroIndex func minval maxval n <span class="fu">=</span> 
  <span class="kw">if</span> func medpoint <span class="fu">/=</span> <span class="dv">0</span> 
       <span class="kw">then</span> maxZeroIndex func minval medpoint (n<span class="fu">-</span><span class="dv">1</span>)
       <span class="kw">else</span> maxZeroIndex func medpoint maxval (n<span class="fu">-</span><span class="dv">1</span>)
  <span class="kw">where</span> medpoint <span class="fu">=</span> (minval<span class="fu">+</span>maxval)<span class="fu">/</span><span class="dv">2</span>

<span class="ot">ymandel ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span>
ymandel x y z <span class="fu">=</span> fromIntegral (mandel x y z <span class="dv">64</span>) <span class="fu">/</span> <span class="dv">64</span></code></pre>
</div>

</div>

<p>And you can also consider minor changes in the <code>YGL.hs</code> source file.</p>
<ul>
<li><a href="code/06_Mandelbulb/YGL.hs"><code>YGL.hs</code></a>, the 3D rendering framework</li>
<li><a href="code/06_Mandelbulb/Mandel.hs"><code>Mandel</code></a>, the mandel function</li>
<li><a href="code/06_Mandelbulb/ExtComplex.hs"><code>ExtComplex</code></a>, the extended complexes</li>
</ul>
<p><a href="code/06_Mandelbulb/Mandelbulb.lhs" class="cut">Download the source code of this section → 06_Mandelbulb/<strong>Mandelbulb.lhs</strong> </a></p>
<h2 id="conclusion">Conclusion</h2>
<p>As we can use imperative style in a functional language, know you can use functional style in imperative languages. This article exposed a way to organize some code in a functional way. I’d like to stress the usage of Haskell made it very simple to achieve this.</p>
<p>Once you are used to pure functional style, it is hard not to see all advantages it offers.</p>
<p>The code in the two last sections is completely pure and functional. Furthermore I don’t use <code>GLfloat</code>, <code>Color3</code> or any other OpenGL type. If I want to use another library in the future, I would be able to keep all the pure code and simply update the YGL module.</p>
<p>The <code>YGL</code> module can be seen as a “wrapper” around 3D display and user interaction. It is a clean separator between the imperative paradigm and functional paradigm.</p>
<p>If you want to go further, it shouldn’t be hard to add parallelism. This should be easy mainly because most of the visible code is pure. Such an optimization would have been harder by using directly the OpenGL library.</p>
<p>You should also want to make a more precise object. Because, the Mandelbulb is clearly not convex. But a precise rendering might be very long from O(n².log(n)) to O(n³).</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Unfortunately, I couldn’t make this program to work on my Mac. More precisely, I couldn’t make the <a href="http://openil.sourceforge.net/">DevIL</a> library work on Mac to output the image. Yes I have done a <code>brew install libdevil</code>. But even a minimal program who simply write some <code>jpg</code> didn’t worked. I tried both with <code>Haskell</code> and <code>C</code>.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Generally in Haskell you need to declare a lot of import lines. This is something I find annoying. In particular, it should be possible to create a special file, Import.hs which make all the necessary import for you, as you generally need them all. I understand why this is cleaner to force the programmer not to do so, but, each time I do a copy/paste, I feel something is wrong. I believe this concern can be generalized to the lack of namespace in Haskell.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>I tried <code>Complex Double</code>, <code>Complex Float</code>, this current data type with <code>Double</code> and the actual version <code>Float</code>. For rendering a 1024x1024 Mandelbrot set it takes <code>Complex Double</code> about 6.8s, for <code>Complex Float</code> about 5.1s, for the actual version with <code>Double</code> and <code>Float</code> it takes about <code>1.6</code> sec. See these sources for testing yourself: <a href="https://gist.github.com/2945043">https://gist.github.com/2945043</a>. If you really want to things to go faster, use <code>data Complex = C {-# UNPACK #-} !Float {-# UNPACK #-} !Float</code>. It takes only one second instead of 1.6s.<a href="#fnref3">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>Haskell comme un vrai!</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Haskell-the-Hard-Way/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Haskell-the-Hard-Way/index.html</id>
    <published>2012-02-08T00:00:00Z</published>
    <updated>2012-02-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/magritte_pleasure_principle.jpg" alt="Magritte pleasure principle"/>
</div>

<div class="intro">


<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> Un tutoriel très court mais très dense pour apprendre Haskell.</p>
<p>Merci à <a href="https://plus.google.com/u/0/113751420744109290534">Oleg Taykalo</a> vous pouvez trouver une traduction Russe ici: <a href="http://habrahabr.ru/post/152889/">Partie 1</a> <em>&amp;</em> <a href="http://habrahabr.ru/post/153383/">Partie 2</a> ;</p>
<blockquote>
<center><hr style="width:30%;float:left;border-color:#CCCCD0;margin-top:1em"/>
<span class="sc"><b>Table of Content</b></span>
<hr style="width:30%;float:right;border-color:#CCCCD0;margin-top:1em"/></center>

<div class="toc">

<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#install">Install</a></li>
<li><a href="#don-t-be-afraid">Don’t be afraid</a></li>
<li><a href="#very-basic-haskell">Very basic Haskell</a>
<ul>
<li><a href="#function-declaration">Function declaration</a></li>
<li><a href="#a-type-example">A Type Example</a></li>
</ul></li>
<li><a href="#essential-haskell">Essential Haskell</a></li>
<li><a href="#notations">Notations</a>
<ul>
<li><a href="#arithmetic">Arithmetic</a></li>
<li><a href="#logic">Logic</a></li>
<li><a href="#powers">Powers</a></li>
<li><a href="#lists">Lists</a></li>
<li><a href="#strings">Strings</a></li>
<li><a href="#tuples">Tuples</a></li>
<li><a href="#deal-with-parentheses">Deal with parentheses</a></li>
</ul></li>
<li><a href="#useful-notations-for-functions">Useful notations for functions</a></li>
<li><a href="#hard-part">Hard Part</a></li>
<li><a href="#functional-style">Functional style</a>
<ul>
<li><a href="#higher-order-functions">Higher Order Functions</a></li>
</ul></li>
<li><a href="#types">Types</a>
<ul>
<li><a href="#type-inference">Type inference</a></li>
<li><a href="#type-construction">Type construction</a></li>
<li><a href="#recursive-type">Recursive type</a></li>
<li><a href="#trees">Trees</a></li>
</ul></li>
<li><a href="#infinite-structures">Infinite Structures</a></li>
<li><a href="#hell-difficulty-part">Hell Difficulty Part</a></li>
<li><a href="#deal-with-io">Deal With IO</a></li>
<li><a href="#io-trick-explained">IO trick explained</a></li>
<li><a href="#monads">Monads</a>
<ul>
<li><a href="#maybe-monad">Maybe is a monad</a></li>
<li><a href="#the-list-monad">The list monad</a></li>
</ul></li>
<li><a href="#appendix">Appendix</a></li>
<li><a href="#more-on-infinite-tree">More on Infinite Tree</a></li>
</ul>
</div>

</blockquote>
</div>
<div class="intro">

<p>Je pense vraiment que tous les développeurs devraient apprendre Haskell. Peut-être pas devenir des ninjas d’Haskell, mais au moins savoir ce que ce langage a de particulier. Son apprentissage ouvre énormément l’esprit.</p>
<p>La plupart des langages partagent les mêmes fondamentaux&nbsp;:</p>
<ul>
<li>les variables</li>
<li>les boucles</li>
<li>les pointeurs<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup></li>
<li>les structures de données, les objets et les classes</li>
</ul>
<p>Haskell est très différent. Ce langage utilise des concepts dont je n’avais jamais entendu parlé avant. Beaucoup de ces concepts pourront vous aider à devenir un meilleur développeur.</p>
<p>Plier son esprit à Haskell peut être difficile. Ce le fût pour moi. Dans cet article, j’essaye de fournir les informations qui m’ont manquées lors de mon apprentissage.</p>
<p>Cet article sera certainement difficile à suivre. Mais c’est voulu. Il n’y a pas de raccourci pour apprendre Haskell. C’est difficile. Mais je pense que c’est une bonne chose. C’est parce qu’Haskell est difficile qu’il est intéressant.</p>
<p>La manière conventionnelle d’apprendre Haskell est de lire deux livres. En premier <a href="http://learnyouahaskell.com">“Learn You a Haskell”</a> et ensuite <a href="http://www.realworldhaskell.org">“Real World Haskell”</a>. Je pense aussi que c’est la bonne manière de s’y prendre. Mais apprendre même un tout petit peu d’Haskell est presque impossible sans se plonger réellement dans ces livres.</p>
<p>Cet article fait un résumé très dense et rapide des aspect majeurs d’Haskell. J’y ai aussi rajouté des informations qui m’ont manqué pendant l’apprentissage de ce langage.</p>
<p>Pour les francophones ; je suis désolé. Je n’ai pas eu le courage de tout retraduire en français. Sachez cependant que si vous êtes plusieurs à insister, je ferai certainement l’effort de traduire l’article en entier. Et si vous vous sentez d’avoir une bonne âme je ne suis pas contre un peu d’aide. Les sources de cet article sont sur <a href="http://github.com/yogsototh/learn_haskell.git">gihub</a>.</p>
<p>Cet article contient cinq parties&nbsp;:</p>
<ul>
<li>Introduction : un exemple rapide pour montrer qu’Haskell peut être facile.</li>
<li>Les bases d’Haskell : La syntaxe et des notions essentielles</li>
<li>Partie difficile :
<ul>
<li>Style fonctionnel : un exemple progressif, du style impératif au style fonctionnel ;</li>
<li>Types : la syntaxe et un exemple d’arbre binaire ;</li>
<li>Structure infinie : manipulons un arbre infini !</li>
</ul></li>
<li>Partie de difficulté infernale :
<ul>
<li>Utiliser les IO : un exemple très minimal ;</li>
<li>Le truc des IO révélé : les détails cachés d’IO qui m’ont manqués</li>
<li>Les monades : incroyable à quel point on peut généraliser</li>
</ul></li>
<li>Appendice :
<ul>
<li>Revenons sur les arbres infinis : une discussion plus mathématique sur la manipulation d’arbres infinis.</li>
</ul></li>
</ul>
<blockquote>
Note: Chaque fois que vous voyez un séparateur avec un nom de fichier se terminant par <code>lhs</code>, vous pouvez cliquer sur le nom de fichier et télécharger le fichier. Si vous sauvegardez le fichier sour le nom <code>filename.lhs</code>, vous pouvez l’exécuter avec :
<pre>
runhaskell filename.lhs
</pre>

<p>Certains ne marcheront pas, mais la majorité vous donneront un résultat. Vous devriez voir un lien juste en dessous.</p>
</blockquote>
</div>

<hr/>
<p><a href="code/01_basic/10_Introduction/00_hello_world.lhs" class="cut">01_basic/10_Introduction/<strong>00_hello_world.lhs</strong></a></p>
<h2 id="introduction">
Introduction
</h2>

<h3 id="install">
Install
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/Haskell-logo.png" alt=""/>
</div>

<ul>
<li><a href="http://www.haskell.org/platform">Haskell Platform</a> is the standard way to install Haskell.</li>
</ul>
<p>Tools:</p>
<ul>
<li><code>ghc</code>: Compiler similar to gcc for <code>C</code>.</li>
<li><code>ghci</code>: Interactive Haskell (REPL)</li>
<li><code>runhaskell</code>: Execute a program without compiling it. Convenient but very slow compared to compiled programs.</li>
</ul>
<h3 id="don-t-be-afraid">
Don’t be afraid
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/munch_TheScream.jpg" alt="The Scream"/>
</div>

<p>Many books/articles about Haskell start by introducing some esoteric formula (quick sort, Fibonacci, etc…). I will do the exact opposite. At first I won’t show you any Haskell super power. I will start with similarities between Haskell and other programming languages. Let’s jump to the mandatory “Hello World”.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> putStrLn <span class="st">&quot;Hello World!&quot;</span></code></pre>
</div>
<p>To run it, you can save this code in a <code>hello.hs</code> and:</p>
<pre class="zsh"><code>~ runhaskell ./hello.hs
Hello World!</code></pre>
<p>You could also download the literate Haskell source. You should see a link just above the introduction title. Download this file as <code>00_hello_world.lhs</code> and:</p>
<pre class="zsh"><code>~ runhaskell 00_hello_world.lhs
Hello World!</code></pre>
<p><a href="code/01_basic/10_Introduction/00_hello_world.lhs" class="cut">01_basic/10_Introduction/<strong>00_hello_world.lhs</strong> </a></p>
<hr/>
<p><a href="code/01_basic/10_Introduction/10_hello_you.lhs" class="cut">01_basic/10_Introduction/<strong>10_hello_you.lhs</strong></a></p>
<p>Now, a program asking your name and replying “Hello” using the name you entered:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
    print <span class="st">&quot;What is your name?&quot;</span>
    name <span class="ot">&lt;-</span> getLine
    print (<span class="st">&quot;Hello &quot;</span> <span class="fu">++</span> name <span class="fu">++</span> <span class="st">&quot;!&quot;</span>)</code></pre>
</div>
<p>First, let us compare this with similar programs in a few imperative languages:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="co"># Python</span>
<span class="kw">print</span> <span class="st">&quot;What is your name?&quot;</span>
name = <span class="dt">raw_input</span>()
<span class="kw">print</span> <span class="st">&quot;Hello </span><span class="ot">%s</span><span class="st">!&quot;</span> % name</code></pre>
<pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="co"># Ruby</span>
puts <span class="st">&quot;What is your name?&quot;</span>
name = gets.chomp
puts <span class="st">&quot;Hello </span><span class="ot">#{</span>name<span class="ot">}</span><span class="st">!&quot;</span></code></pre>
<pre class="sourceCode c"><code class="sourceCode c"><span class="co">// In C</span>
<span class="ot">#include &lt;stdio.h&gt;</span>
<span class="dt">int</span> main (<span class="dt">int</span> argc, <span class="dt">char</span> **argv) {
    <span class="dt">char</span> name[<span class="dv">666</span>]; <span class="co">// &lt;- An Evil Number!</span>
    <span class="co">// What if my name is more than 665 character long?</span>
    printf(<span class="st">&quot;What is your name?</span><span class="ch">\n</span><span class="st">&quot;</span>); 
    scanf(<span class="st">&quot;%s&quot;</span>, name);
    printf(<span class="st">&quot;Hello %s!</span><span class="ch">\n</span><span class="st">&quot;</span>, name);
    <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre>
<p>The structure is the same, but there are some syntax differences. The main part of this tutorial will be dedicated to explaining why.</p>
<p>In Haskell there is a <code>main</code> function and every object has a type. The type of <code>main</code> is <code>IO ()</code>. This means <code>main</code> will cause side effects.</p>
<p>Just remember that Haskell can look a lot like mainstream imperative languages.</p>
<p><a href="code/01_basic/10_Introduction/10_hello_you.lhs" class="cut">01_basic/10_Introduction/<strong>10_hello_you.lhs</strong> </a></p>
<hr/>
<p><a href="code/01_basic/10_Introduction/20_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>20_very_basic.lhs</strong></a></p>
<h3 id="very-basic-haskell">
Very basic Haskell
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/picasso_owl.jpg" alt="Picasso minimal owl"/>
</div>

<p>Before continuing you need to be warned about some essential properties of Haskell.</p>
<p><em>Functional</em></p>
<p>Haskell is a functional language. If you have an imperative language background, you’ll have to learn a lot of new things. Hopefully many of these new concepts will help you to program even in imperative languages.</p>
<p><em>Smart Static Typing</em></p>
<p>Instead of being in your way like in <code>C</code>, <code>C++</code> or <code>Java</code>, the type system is here to help you.</p>
<p><em>Purity</em></p>
<p>Generally your functions won’t modify anything in the outside world. This means they can’t modify the value of a variable, can’t get user input, can’t write on the screen, can’t launch a missile. On the other hand, parallelism will be very easy to achieve. Haskell makes it clear where effects occur and where your code is pure. Also, it will be far easier to reason about your program. Most bugs will be prevented in the pure parts of your program.</p>
<p>Furthermore, pure functions follow a fundamental law in Haskell:</p>
<blockquote>
<p>Applying a function with the same parameters always returns the same value.</p>
</blockquote>
<p><em>Laziness</em></p>
<p>Laziness by default is a very uncommon language design. By default, Haskell evaluates something only when it is needed. In consequence, it provides a very elegant way to manipulate infinite structures, for example.</p>
<p>A last warning about how you should read Haskell code. For me, it is like reading scientific papers. Some parts are very clear, but when you see a formula, just focus and read slower. Also, while learning Haskell, it <em>really</em> doesn’t matter much if you don’t understand syntax details. If you meet a <code>&gt;&gt;=</code>, <code>&lt;$&gt;</code>, <code>&lt;-</code> or any other weird symbol, just ignore them and follows the flow of the code.</p>
<h4 id="function-declaration">
Function declaration
</h4>

<p>You might be used to declaring functions like this:</p>
<p>In <code>C</code>:</p>
<pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> f(<span class="dt">int</span> x, <span class="dt">int</span> y) {
    <span class="kw">return</span> x*x + y*y;
}</code></pre>
<p>In JavaScript:</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="fu">f</span>(x,y) {
    <span class="kw">return</span> x*x + y*y;
}</code></pre>
<p>in Python:</p>
<pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> f(x,y):
    <span class="kw">return</span> x*x + y*y</code></pre>
<p>in Ruby:</p>
<pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">def</span> f(x,y)
    x*x + y*y
<span class="kw">end</span></code></pre>
<p>In Scheme:</p>
<pre class="sourceCode scheme"><code class="sourceCode scheme">(<span class="kw">define</span><span class="fu"> </span>(f x y)
    (<span class="kw">+</span> (* x x) (* y y)))</code></pre>
<p>Finally, the Haskell way is:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">f x y <span class="fu">=</span> x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y</code></pre>
<p>Very clean. No parenthesis, no <code>def</code>.</p>
<p>Don’t forget, Haskell uses functions and types a lot. It is thus very easy to define them. The syntax was particularly well thought out for these objects.</p>
<h4 id="a-type-example">
A Type Example
</h4>

<p>Although it is not mandatory, type information for functions is usually made explicit. It’s not mandatory because the compiler is smart enough to discover it for you. It’s a good idea because it indicates intent and understanding.</p>
<p>Let’s play a little.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- We declare the type using ::</span>
<span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
f x y <span class="fu">=</span> x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y

main <span class="fu">=</span> print (f <span class="dv">2</span> <span class="dv">3</span>)</code></pre>
</div>
<pre><code>~ runhaskell 20_very_basic.lhs
13</code></pre>
<p><a href="code/01_basic/10_Introduction/20_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>20_very_basic.lhs</strong> </a></p>
<hr/>
<p><a href="code/01_basic/10_Introduction/21_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>21_very_basic.lhs</strong></a></p>
<p>Now try</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
f x y <span class="fu">=</span> x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y

main <span class="fu">=</span> print (f <span class="dv">2</span><span class="fu">.</span><span class="dv">3</span> <span class="dv">4</span><span class="fu">.</span><span class="dv">2</span>)</code></pre>
</div>
<p>You should get this error:</p>
<pre><code>21_very_basic.lhs:6:23:
    No instance for (Fractional Int)
      arising from the literal `4.2&#39;
    Possible fix: add an instance declaration for (Fractional Int)
    In the second argument of `f&#39;, namely `4.2&#39;
    In the first argument of `print&#39;, namely `(f 2.3 4.2)&#39;
    In the expression: print (f 2.3 4.2)</code></pre>
<p>The problem: <code>4.2</code> isn’t an Int.</p>
<p><a href="code/01_basic/10_Introduction/21_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>21_very_basic.lhs</strong> </a></p>
<hr/>
<p><a href="code/01_basic/10_Introduction/22_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>22_very_basic.lhs</strong></a></p>
<p>The solution: don’t declare a type for <code>f</code> for the moment and let Haskell infer the most general type for us:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">f x y <span class="fu">=</span> x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y

main <span class="fu">=</span> print (f <span class="dv">2</span><span class="fu">.</span><span class="dv">3</span> <span class="dv">4</span><span class="fu">.</span><span class="dv">2</span>)</code></pre>
</div>
<p>It works! Luckily, we don’t have to declare a new function for every single type. For example, in <code>C</code>, you’ll have to declare a function for <code>int</code>, for <code>float</code>, for <code>long</code>, for <code>double</code>, etc…</p>
<p>But, what type should we declare? To discover the type Haskell has found for us, just launch ghci:</p>
<pre><span class="low">
%</span> ghci<span class="low"><code>
GHCi, version 7.0.4: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Loading package ffi-1.0 ... linking ... done.
Prelude></code></span> let f x y = x*x + y*y
<span class="low"><code>Prelude></code></span> :type f
<code>f :: Num a => a -> a -> a</code>
</pre>

<p>Uh? What is this strange type?</p>
<pre><code>Num a =&gt; a -&gt; a -&gt; a</code></pre>
<p>First, let’s focus on the right part <code>a -&gt; a -&gt; a</code>. To understand it, just look at a list of progressive examples:</p>
<table>
<col width="27%" />
<col width="72%" />
<thead>
<tr class="header">
<th align="left">The written type</th>
<th align="left">Its meaning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>Int</code></td>
<td align="left">the type <code>Int</code></td>
</tr>
<tr class="even">
<td align="left"><code>Int -&gt; Int</code></td>
<td align="left">the type function from <code>Int</code> to <code>Int</code></td>
</tr>
<tr class="odd">
<td align="left"><code>Float -&gt; Int</code></td>
<td align="left">the type function from <code>Float</code> to <code>Int</code></td>
</tr>
<tr class="even">
<td align="left"><code>a -&gt; Int</code></td>
<td align="left">the type function from any type to <code>Int</code></td>
</tr>
<tr class="odd">
<td align="left"><code>a -&gt; a</code></td>
<td align="left">the type function from any type <code>a</code> to the same type <code>a</code></td>
</tr>
<tr class="even">
<td align="left"><code>a -&gt; a -&gt; a</code></td>
<td align="left">the type function of two arguments of any type <code>a</code> to the same type <code>a</code></td>
</tr>
</tbody>
</table>
<p>In the type <code>a -&gt; a -&gt; a</code>, the letter <code>a</code> is a <em>type variable</em>. It means <code>f</code> is a function with two arguments and both arguments and the result have the same type. The type variable <code>a</code> could take many different type values. For example <code>Int</code>, <code>Integer</code>, <code>Float</code>…</p>
<p>So instead of having a forced type like in <code>C</code> and having to declare a function for <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, etc., we declare only one function like in a dynamically typed language.</p>
<p>This is sometimes called parametric polymorphism. It’s also called having your cake and eating it too.</p>
<p>Generally <code>a</code> can be any type, for example a <code>String</code> or an <code>Int</code>, but also more complex types, like <code>Trees</code>, other functions, etc. But here our type is prefixed with <code>Num a =&gt;</code>.</p>
<p><code>Num</code> is a <em>type class</em>. A type class can be understood as a set of types. <code>Num</code> contains only types which behave like numbers. More precisely, <code>Num</code> is class containing types which implement a specific list of functions, and in particular <code>(+)</code> and <code>(*)</code>.</p>
<p>Type classes are a very powerful language construct. We can do some incredibly powerful stuff with this. More on this later.</p>
<p>Finally, <code>Num a =&gt; a -&gt; a -&gt; a</code> means:</p>
<p>Let <code>a</code> be a type belonging to the <code>Num</code> type class. This is a function from type <code>a</code> to (<code>a -&gt; a</code>).</p>
<p>Yes, strange. In fact, in Haskell no function really has two arguments. Instead all functions have only one argument. But we will note that taking two arguments is equivalent to taking one argument and returning a function taking the second argument as a parameter.</p>
<p>More precisely <code>f 3 4</code> is equivalent to <code>(f 3) 4</code>. Note <code>f 3</code> is a function:</p>
<pre><code>f :: Num a =&gt; a -&gt; a -&gt; a

g :: Num a =&gt; a -&gt; a
g = f 3

g y ⇔ 3*3 + y*y</code></pre>
<p>Another notation exists for functions. The lambda notation allows us to create functions without assigning them a name. We call them anonymous functions. We could also have written:</p>
<pre><code>g = \y -&gt; 3*3 + y*y</code></pre>
<p>The <code>\</code> is used because it looks like <code>λ</code> and is ASCII.</p>
<p>If you are not used to functional programming your brain should be starting to heat up. It is time to make a real application.</p>
<p><a href="code/01_basic/10_Introduction/22_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>22_very_basic.lhs</strong> </a></p>
<hr/>
<p><a href="code/01_basic/10_Introduction/23_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>23_very_basic.lhs</strong></a></p>
<p>But just before that, we should verify the type system works as expected:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a
f x y <span class="fu">=</span> x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y

main <span class="fu">=</span> print (f <span class="dv">3</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">4</span>)</code></pre>
</div>
<p>It works, because, <code>3</code> is a valid representation both for Fractional numbers like Float and for Integer. As <code>2.4</code> is a Fractional number, <code>3</code> is then interpreted as being also a Fractional number.</p>
<p><a href="code/01_basic/10_Introduction/23_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>23_very_basic.lhs</strong> </a></p>
<hr/>
<p><a href="code/01_basic/10_Introduction/24_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>24_very_basic.lhs</strong></a></p>
<p>If we force our function to work with different types, it will fail:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a
f x y <span class="fu">=</span> x<span class="fu">*</span>x <span class="fu">+</span> y<span class="fu">*</span>y

<span class="ot">x ::</span> <span class="dt">Int</span>
x <span class="fu">=</span> <span class="dv">3</span>
<span class="ot">y ::</span> <span class="dt">Float</span>
y <span class="fu">=</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">4</span>
main <span class="fu">=</span> print (f x y) <span class="co">-- won&#39;t work because type x ≠ type y</span></code></pre>
</div>
<p>The compiler complains. The two parameters must have the same type.</p>
<p>If you believe that this is a bad idea, and that the compiler should make the transformation from one type to another for you, you should really watch this great (and funny) video: <a href="https://www.destroyallsoftware.com/talks/wat">WAT</a></p>
<p><a href="code/01_basic/10_Introduction/24_very_basic.lhs" class="cut">01_basic/10_Introduction/<strong>24_very_basic.lhs</strong> </a></p>
<h2 id="essential-haskell">
Essential Haskell
</h2>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/kandinsky_gugg.jpg" alt="Kandinsky Gugg"/>
</div>

<p>I suggest that you skim this part. Think of it as a reference. Haskell has a lot of features. A lot of information is missing here. Come back here if the notation feels strange.</p>
<p>I use the <code>⇔</code> symbol to state that two expression are equivalent. It is a meta notation, <code>⇔</code> does not exists in Haskell. I will also use <code>⇒</code> to show what the return value of an expression is.</p>
<h3 id="notations">
Notations
</h3>

<h5 id="arithmetic">
Arithmetic
</h5>

<pre><code>3 + 2 * 6 / 3 ⇔ 3 + ((2*6)/3)</code></pre>
<h5 id="logic">
Logic
</h5>

<pre><code>True || False ⇒ True
True &amp;&amp; False ⇒ False
True == False ⇒ False
True /= False ⇒ True  (/=) is the operator for different</code></pre>
<h5 id="powers">
Powers
</h5>

<pre><code>x^n     for n an integral (understand Int or Integer)
x**y    for y any kind of number (Float for example)</code></pre>
<p><code>Integer</code> has no limit except the capacity of your machine:</p>
<pre><code>4^103
102844034832575377634685573909834406561420991602098741459288064</code></pre>
<p>Yeah! And also rational numbers FTW! But you need to import the module <code>Data.Ratio</code>:</p>
<pre><code>$ ghci
....
Prelude&gt; :m Data.Ratio
Data.Ratio&gt; (11 % 15) * (5 % 3)
11 % 9</code></pre>
<h5 id="lists">
Lists
</h5>

<pre><code>[]                      ⇔ empty list
[1,2,3]                 ⇔ List of integral
[&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;]     ⇔ List of String
1:[2,3]                 ⇔ [1,2,3], (:) prepend one element
1:2:[]                  ⇔ [1,2]
[1,2] ++ [3,4]          ⇔ [1,2,3,4], (++) concatenate
[1,2,3] ++ [&quot;foo&quot;]      ⇔ ERROR String ≠ Integral
[1..4]                  ⇔ [1,2,3,4]
[1,3..10]               ⇔ [1,3,5,7,9]
[2,3,5,7,11..100]       ⇔ ERROR! I am not so smart!
[10,9..1]               ⇔ [10,9,8,7,6,5,4,3,2,1]</code></pre>
<h5 id="strings">
Strings
</h5>

<p>In Haskell strings are list of <code>Char</code>.</p>
<pre><code>&#39;a&#39; :: Char
&quot;a&quot; :: [Char]
&quot;&quot;  ⇔ []
&quot;ab&quot; ⇔ [&#39;a&#39;,&#39;b&#39;] ⇔  &#39;a&#39;:&quot;b&quot; ⇔ &#39;a&#39;:[&#39;b&#39;] ⇔ &#39;a&#39;:&#39;b&#39;:[]
&quot;abc&quot; ⇔ &quot;ab&quot;++&quot;c&quot;</code></pre>
<blockquote>
<p><em>Remark</em>: In real code you shouldn’t use list of char to represent text. You should mostly use <code>Data.Text</code> instead. If you want to represent a stream of ASCII char, you should use <code>Data.ByteString</code>.</p>
</blockquote>
<h5 id="tuples">
Tuples
</h5>

<p>The type of couple is <code>(a,b)</code>. Elements in a tuple can have different types.</p>
<pre><code>-- All these tuples are valid
(2,&quot;foo&quot;)
(3,&#39;a&#39;,[2,3])
((2,&quot;a&quot;),&quot;c&quot;,3)

fst (x,y)       ⇒  x
snd (x,y)       ⇒  y

fst (x,y,z)     ⇒  ERROR: fst :: (a,b) -&gt; a
snd (x,y,z)     ⇒  ERROR: snd :: (a,b) -&gt; b</code></pre>
<h5 id="deal-with-parentheses">
Deal with parentheses
</h5>

<p>To remove some parentheses you can use two functions: <code>($)</code> and <code>(.)</code>.</p>
<pre><code>-- By default:
f g h x         ⇔  (((f g) h) x)

-- the $ replace parenthesis from the $
-- to the end of the expression
f g $ h x       ⇔  f g (h x) ⇔ (f g) (h x)
f $ g h x       ⇔  f (g h x) ⇔ f ((g h) x)
f $ g $ h x     ⇔  f (g (h x))

-- (.) the composition function
(f . g) x       ⇔  f (g x)
(f . g . h) x   ⇔  f (g (h x))</code></pre>
<hr/>
<p><a href="code/01_basic/20_Essential_Haskell/10a_Functions.lhs" class="cut">01_basic/20_Essential_Haskell/<strong>10a_Functions.lhs</strong></a></p>
<h3 id="useful-notations-for-functions">
Useful notations for functions
</h3>

<p>Just a reminder:</p>
<pre><code>x :: Int            ⇔ x is of type Int
x :: a              ⇔ x can be of any type
x :: Num a =&gt; a     ⇔ x can be any type a
                      such that a belongs to Num type class 
f :: a -&gt; b         ⇔ f is a function from a to b
f :: a -&gt; b -&gt; c    ⇔ f is a function from a to (b→c)
f :: (a -&gt; b) -&gt; c  ⇔ f is a function from (a→b) to c</code></pre>
<p>Remember that defining the type of a function before its declaration isn’t mandatory. Haskell infers the most general type for you. But it is considered a good practice to do so.</p>
<p><em>Infix notation</em></p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">square ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a  
square x <span class="fu">=</span> x<span class="fu">^</span><span class="dv">2</span></code></pre>
</div>
<p>Note <code>^</code> uses infix notation. For each infix operator there its associated prefix notation. You just have to put it inside parenthesis.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">square&#39; x <span class="fu">=</span> (<span class="fu">^</span>) x <span class="dv">2</span>

square&#39;&#39; x <span class="fu">=</span> (<span class="fu">^</span><span class="dv">2</span>) x</code></pre>
</div>
<p>We can remove <code>x</code> in the left and right side! It’s called η-reduction.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">square&#39;&#39;&#39; <span class="fu">=</span> (<span class="fu">^</span><span class="dv">2</span>)</code></pre>
</div>
<p>Note we can declare functions with <code>'</code> in their name. Here:</p>
<blockquote>
<p><code>square</code> ⇔ <code>square'</code> ⇔ <code>square''</code> ⇔ <code>square '''</code></p>
</blockquote>
<p><em>Tests</em></p>
<p>An implementation of the absolute function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">absolute ::</span> (<span class="dt">Ord</span> a, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a
absolute x <span class="fu">=</span> <span class="kw">if</span> x <span class="fu">&gt;=</span> <span class="dv">0</span> <span class="kw">then</span> x <span class="kw">else</span> <span class="fu">-</span>x</code></pre>
</div>
<p>Note: the <code>if .. then .. else</code> Haskell notation is more like the <code>¤?¤:¤</code> C operator. You cannot forget the <code>else</code>.</p>
<p>Another equivalent version:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">absolute&#39; x
    <span class="fu">|</span> x <span class="fu">&gt;=</span> <span class="dv">0</span> <span class="fu">=</span> x
    <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="fu">-</span>x</code></pre>
</div>
 
<blockquote>
<p>Notation warning: indentation is <em>important</em> in Haskell. Like in Python, bad indentation can break your code!</p>
</blockquote>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
      print <span class="fu">$</span> square <span class="dv">10</span>
      print <span class="fu">$</span> square&#39; <span class="dv">10</span>
      print <span class="fu">$</span> square&#39;&#39; <span class="dv">10</span>
      print <span class="fu">$</span> square&#39;&#39;&#39; <span class="dv">10</span>
      print <span class="fu">$</span> absolute <span class="dv">10</span>
      print <span class="fu">$</span> absolute (<span class="fu">-</span><span class="dv">10</span>)
      print <span class="fu">$</span> absolute&#39; <span class="dv">10</span>
      print <span class="fu">$</span> absolute&#39; (<span class="fu">-</span><span class="dv">10</span>)</code></pre>
</div>
</div>

<p><a href="code/01_basic/20_Essential_Haskell/10a_Functions.lhs" class="cut">01_basic/20_Essential_Haskell/<strong>10a_Functions.lhs</strong> </a></p>
<h2 id="hard-part">
Hard Part
</h2>

<p>The hard part can now begin.</p>
<h3 id="functional-style">
Functional style
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/hr_giger_biomechanicallandscape_500.jpg" alt="Biomechanical Landscape by H.R. Giger"/>
</div>

<p>In this section, I will give a short example of the impressive refactoring ability provided by Haskell. We will select a problem and solve it in a standard imperative way. Then I will make the code evolve. The end result will be both more elegant and easier to adapt.</p>
<p>Let’s solve the following problem:</p>
<blockquote>
<p>Given a list of integers, return the sum of the even numbers in the list.</p>
<p>example: <code>[1,2,3,4,5] ⇒  2 + 4 ⇒  6</code></p>
</blockquote>
<p>To show differences between functional and imperative approaches, I’ll start by providing an imperative solution (in JavaScript):</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="fu">evenSum</span>(list) {
    <span class="kw">var</span> result = <span class="dv">0</span>;
    <span class="kw">for</span> (<span class="kw">var</span> i=<span class="dv">0</span>; i&lt; <span class="ot">list</span>.<span class="fu">length</span> ; i++) {
        <span class="kw">if</span> (list[i] % <span class="dv">2</span> ==<span class="dv">0</span>) {
            result += list[i];
        }
    }
    <span class="kw">return</span> result;
}</code></pre>
<p>In Haskell, by contrast, we don’t have variables or a for loop. One solution to achieve the same result without loops is to use recursion.</p>
<blockquote>
<p><em>Remark</em>: Recursion is generally perceived as slow in imperative languages. But this is generally not the case in functional programming. Most of the time Haskell will handle recursive functions efficiently.</p>
</blockquote>
<p>Here is a <code>C</code> version of the recursive function. Note that for simplicity I assume the int list ends with the first <code>0</code> value.</p>
<pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> evenSum(<span class="dt">int</span> *list) {
    <span class="kw">return</span> accumSum(<span class="dv">0</span>,list);
}

<span class="dt">int</span> accumSum(<span class="dt">int</span> n, <span class="dt">int</span> *list) {
    <span class="dt">int</span> x;
    <span class="dt">int</span> *xs;
    <span class="kw">if</span> (*list == <span class="dv">0</span>) { <span class="co">// if the list is empty</span>
        <span class="kw">return</span> n;
    } <span class="kw">else</span> {
        x = list[<span class="dv">0</span>]; <span class="co">// let x be the first element of the list</span>
        xs = list<span class="dv">+1</span>; <span class="co">// let xs be the list without x</span>
        <span class="kw">if</span> ( <span class="dv">0</span> == (x%<span class="dv">2</span>) ) { <span class="co">// if x is even</span>
            <span class="kw">return</span> accumSum(n+x, xs);
        } <span class="kw">else</span> {
            <span class="kw">return</span> accumSum(n, xs);
        }
    }
}</code></pre>
<p>Keep this code in mind. We will translate it into Haskell. First, however, I need to introduce three simple but useful functions we will use:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">even<span class="ot"> ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>
head<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> a
tail<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> [a]</code></pre>
<p><code>even</code> verifies if a number is even.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">even<span class="ot"> ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>
even <span class="dv">3</span>  <span class="ot">⇒</span> <span class="dt">False</span>
even <span class="dv">2</span>  <span class="ot">⇒</span> <span class="dt">True</span></code></pre>
<p><code>head</code> returns the first element of a list:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">head<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> a
head [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="ot">⇒</span> <span class="dv">1</span>
head []      <span class="ot">⇒</span> <span class="dt">ERROR</span></code></pre>
<p><code>tail</code> returns all elements of a list, except the first:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">tail<span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> [a]
tail [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="ot">⇒</span> [<span class="dv">2</span>,<span class="dv">3</span>]
tail [<span class="dv">3</span>]     <span class="ot">⇒</span> []
tail []      <span class="ot">⇒</span> <span class="dt">ERROR</span></code></pre>
<p>Note that for any non empty list <code>l</code>, <code>l ⇔ (head l):(tail l)</code></p>
<hr/>
<p><a href="code/02_Hard_Part/11_Functions.lhs" class="cut">02_Hard_Part/<strong>11_Functions.lhs</strong></a></p>
<p>The first Haskell solution. The function <code>evenSum</code> returns the sum of all even numbers in a list:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 1</span>
<span class="ot">evenSum ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span>

evenSum l <span class="fu">=</span> accumSum <span class="dv">0</span> l

accumSum n l <span class="fu">=</span> <span class="kw">if</span> l <span class="fu">==</span> []
                  <span class="kw">then</span> n
                  <span class="kw">else</span> <span class="kw">let</span> x <span class="fu">=</span> head l 
                           xs <span class="fu">=</span> tail l 
                       <span class="kw">in</span> <span class="kw">if</span> even x
                              <span class="kw">then</span> accumSum (n<span class="fu">+</span>x) xs
                              <span class="kw">else</span> accumSum n xs</code></pre>
</div>
<p>To test a function you can use <code>ghci</code>:</p>
<pre>
% ghci
<span class="low">GHCi, version 7.0.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude&gt;</span> :load 11_Functions.lhs 
<span class="low">[1 of 1] Compiling Main             ( 11_Functions.lhs, interpreted )
Ok, modules loaded: Main.
*Main&gt;</span> evenSum [1..5]
6
</pre>

<p>Here is an example of execution<sup><a href="#fn2" class="footnoteRef" id="fnref2">2</a></sup>:</p>
<pre>
*Main> evenSum [1..5]
accumSum 0 [1,2,3,4,5]
<span class="yellow">1 is odd</span>
accumSum 0 [2,3,4,5]
<span class="yellow">2 is even</span>
accumSum (0+2) [3,4,5]
<span class="yellow">3 is odd</span>
accumSum (0+2) [4,5]
<span class="yellow">4 is even</span>
accumSum (0+2+4) [5]
<span class="yellow">5 is odd</span>
accumSum (0+2+4) []
<span class="yellow">l == []</span>
0+2+4
0+6
6
</pre>

<p>Coming from an imperative language all should seem right. In fact, many things can be improved here. First, we can generalize the type.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</code></pre>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span> print <span class="fu">$</span> evenSum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/11_Functions.lhs" class="cut">02_Hard_Part/<strong>11_Functions.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/12_Functions.lhs" class="cut">02_Hard_Part/<strong>12_Functions.lhs</strong></a></p>
<p>Next, we can use sub functions using <code>where</code> or <code>let</code>. This way our <code>accumSum</code> function won’t pollute the namespace of our module.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 2</span>
<span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a

evenSum l <span class="fu">=</span> accumSum <span class="dv">0</span> l
    <span class="kw">where</span> accumSum n l <span class="fu">=</span> 
            <span class="kw">if</span> l <span class="fu">==</span> []
                <span class="kw">then</span> n
                <span class="kw">else</span> <span class="kw">let</span> x <span class="fu">=</span> head l 
                         xs <span class="fu">=</span> tail l 
                     <span class="kw">in</span> <span class="kw">if</span> even x
                            <span class="kw">then</span> accumSum (n<span class="fu">+</span>x) xs
                            <span class="kw">else</span> accumSum n xs</code></pre>
</div>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> evenSum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/12_Functions.lhs" class="cut">02_Hard_Part/<strong>12_Functions.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/13_Functions.lhs" class="cut">02_Hard_Part/<strong>13_Functions.lhs</strong></a></p>
<p>Next, we can use pattern matching.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 3</span>
evenSum l <span class="fu">=</span> accumSum <span class="dv">0</span> l
    <span class="kw">where</span> 
        accumSum n [] <span class="fu">=</span> n
        accumSum n (x<span class="fu">:</span>xs) <span class="fu">=</span> 
             <span class="kw">if</span> even x
                <span class="kw">then</span> accumSum (n<span class="fu">+</span>x) xs
                <span class="kw">else</span> accumSum n xs</code></pre>
</div>
<p>What is pattern matching? Use values instead of general parameter names<sup><a href="#fn3" class="footnoteRef" id="fnref3">3</a></sup>.</p>
<p>Instead of saying: <code>foo l = if l == [] then &lt;x&gt; else &lt;y&gt;</code> You simply state:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foo [] <span class="fu">=</span>  <span class="fu">&lt;</span>x<span class="fu">&gt;</span>
foo l  <span class="fu">=</span>  <span class="fu">&lt;</span>y<span class="fu">&gt;</span></code></pre>
<p>But pattern matching goes even further. It is also able to inspect the inner data of a complex value. We can replace</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foo l <span class="fu">=</span>  <span class="kw">let</span> x  <span class="fu">=</span> head l 
             xs <span class="fu">=</span> tail l
         <span class="kw">in</span> <span class="kw">if</span> even x 
             <span class="kw">then</span> foo (n<span class="fu">+</span>x) xs
             <span class="kw">else</span> foo n xs</code></pre>
<p>with</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foo (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="kw">if</span> even x 
                 <span class="kw">then</span> foo (n<span class="fu">+</span>x) xs
                 <span class="kw">else</span> foo n xs</code></pre>
<p>This is a very useful feature. It makes our code both terser and easier to read.</p>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> evenSum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/13_Functions.lhs" class="cut">02_Hard_Part/<strong>13_Functions.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/14_Functions.lhs" class="cut">02_Hard_Part/<strong>14_Functions.lhs</strong></a></p>
<p>In Haskell you can simplify function definitions by η-reducing them. For example, instead of writing:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">f x <span class="fu">=</span> (some expresion) x</code></pre>
<p>you can simply write</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">f <span class="fu">=</span> some expression</code></pre>
<p>We use this method to remove the <code>l</code>:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 4</span>
<span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a

evenSum <span class="fu">=</span> accumSum <span class="dv">0</span>
    <span class="kw">where</span> 
        accumSum n [] <span class="fu">=</span> n
        accumSum n (x<span class="fu">:</span>xs) <span class="fu">=</span> 
             <span class="kw">if</span> even x
                <span class="kw">then</span> accumSum (n<span class="fu">+</span>x) xs
                <span class="kw">else</span> accumSum n xs</code></pre>
</div>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> evenSum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/14_Functions.lhs" class="cut">02_Hard_Part/<strong>14_Functions.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/15_Functions.lhs" class="cut">02_Hard_Part/<strong>15_Functions.lhs</strong></a></p>
<h4 id="higher-order-functions">
Higher Order Functions
</h4>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/escher_polygon.png" alt="Escher"/>
</div>

<p>To make things even better we should use higher order functions. What are these beasts? Higher order functions are functions taking functions as parameters.</p>
<p>Here are some examples:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">filter<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]
map<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]
foldl<span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [b] <span class="ot">-&gt;</span> a</code></pre>
<p>Let’s proceed by small steps.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 5</span>
evenSum l <span class="fu">=</span> mysum <span class="dv">0</span> (filter even l)
    <span class="kw">where</span>
      mysum n [] <span class="fu">=</span> n
      mysum n (x<span class="fu">:</span>xs) <span class="fu">=</span> mysum (n<span class="fu">+</span>x) xs</code></pre>
<p>where</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">filter even [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>] ⇔  [<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>]</code></pre>
<p>The function <code>filter</code> takes a function of type (<code>a -&gt; Bool</code>) and a list of type <code>[a]</code>. It returns a list containing only elements for which the function returned <code>true</code>.</p>
<p>Our next step is to use another technique to accomplish the same thing as a loop. We will use the <code>foldl</code> function to accumulate a value as we pass through the list. The function <code>foldl</code> captures a general coding pattern:</p>
<pre>
myfunc list = foo <span class="blue">initialValue</span> <span class="green">list</span>
    foo accumulated []     = accumulated
    foo tmpValue    (x:xs) = foo (<span class="yellow">bar</span> tmpValue x) xs
</pre>

<p>Which can be replaced by:</p>
<pre>
myfunc list = foldl <span class="yellow">bar</span> <span class="blue">initialValue</span> <span class="green">list</span>
</pre>

<p>If you really want to know how the magic works, here is the definition of <code>foldl</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foldl f z [] <span class="fu">=</span> z
foldl f z (x<span class="fu">:</span>xs) <span class="fu">=</span> foldl f (f z x) xs</code></pre>
<pre class="sourceCode haskell"><code class="sourceCode haskell">foldl f z [x1,<span class="fu">...</span>xn]
⇔  f (<span class="fu">...</span> (f (f z x1) x2) <span class="fu">...</span>) xn</code></pre>
<p>But as Haskell is lazy, it doesn’t evaluate <code>(f z x)</code> and simply pushes it onto the stack. This is why we generally use <code>foldl'</code> instead of <code>foldl</code>; <code>foldl'</code> is a <em>strict</em> version of <code>foldl</code>. If you don’t understand what lazy and strict means, don’t worry, just follow the code as if <code>foldl</code> and <code>foldl'</code> were identical.</p>
<p>Now our new version of <code>evenSum</code> becomes:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 6</span>
<span class="co">-- foldl&#39; isn&#39;t accessible by default</span>
<span class="co">-- we need to import it from the module Data.List</span>
<span class="kw">import</span> Data.List
evenSum l <span class="fu">=</span> foldl&#39; mysum <span class="dv">0</span> (filter even l)
  <span class="kw">where</span> mysum acc value <span class="fu">=</span> acc <span class="fu">+</span> value</code></pre>
<p>We can also simplify this by using directly a lambda notation. This way we don’t have to create the temporary name <code>mysum</code>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 7</span>
<span class="co">-- Generally it is considered a good practice</span>
<span class="co">-- to import only the necessary function(s)</span>
<span class="kw">import</span> Data.List (foldl&#39;)
evenSum l <span class="fu">=</span> foldl&#39; (\x y <span class="ot">-&gt;</span> x<span class="fu">+</span>y) <span class="dv">0</span> (filter even l)</code></pre>
</div>
<p>And of course, we note that</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(\x y <span class="ot">-&gt;</span> x<span class="fu">+</span>y) ⇔ (<span class="fu">+</span>)</code></pre>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> evenSum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/15_Functions.lhs" class="cut">02_Hard_Part/<strong>15_Functions.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/16_Functions.lhs" class="cut">02_Hard_Part/<strong>16_Functions.lhs</strong></a></p>
<p>Finally</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 8</span>
<span class="kw">import</span> Data.List (foldl&#39;)
<span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a
evenSum l <span class="fu">=</span> foldl&#39; (<span class="fu">+</span>) <span class="dv">0</span> (filter even l)</code></pre>
<p><code>foldl'</code> isn’t the easiest function to grasp. If you are not used to it, you should study it a bit.</p>
<p>To help you understand what’s going on here, let’s look at a step by step evaluation:</p>
<pre>
  <span class="yellow">evenSum [1,2,3,4]</span>
⇒ foldl' (+) 0 (<span class="yellow">filter even [1,2,3,4]</span>)
⇒ <span class="yellow">foldl' (+) 0 <span class="blue">[2,4]</span></span>
⇒ <span class="blue">foldl' (+) (<span class="yellow">0+2</span>) [4]</span> 
⇒ <span class="yellow">foldl' (+) <span class="blue">2</span> [4]</span>
⇒ <span class="blue">foldl' (+) (<span class="yellow">2+4</span>) []</span>
⇒ <span class="yellow">foldl' (+) <span class="blue">6</span> []</span>
⇒ <span class="blue">6</span>
</pre>

<p>Another useful higher order function is <code>(.)</code>. The <code>(.)</code> function corresponds to mathematical composition.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(f <span class="fu">.</span> g <span class="fu">.</span> h) x ⇔  f ( g (h x))</code></pre>
<p>We can take advantage of this operator to η-reduce our function:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 9</span>
<span class="kw">import</span> Data.List (foldl&#39;)
<span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a
evenSum <span class="fu">=</span> (foldl&#39; (<span class="fu">+</span>) <span class="dv">0</span>) <span class="fu">.</span> (filter even)</code></pre>
<p>Also, we could rename some parts to make it clearer:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Version 10 </span>
<span class="kw">import</span> Data.List (foldl&#39;)
<span class="ot">sum&#39; ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a
sum&#39; <span class="fu">=</span> foldl&#39; (<span class="fu">+</span>) <span class="dv">0</span>
<span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a
evenSum <span class="fu">=</span> sum&#39; <span class="fu">.</span> (filter even)
 </code></pre>
</div>
<p>It is time to discuss the direction our code has moved as we introduced more functional idioms. What did we gain by using higher order functions?</p>
<p>At first, you might think the main difference is terseness. But in fact, it has more to do with better thinking. Suppose we want to modify our function slightly, for example, to get the sum of all even squares of elements of the list.</p>
<pre><code>[1,2,3,4] ▷ [1,4,9,16] ▷ [4,16] ▷ 20</code></pre>
<p>Updating version 10 is extremely easy:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">squareEvenSum <span class="fu">=</span> sum&#39; <span class="fu">.</span> (filter even) <span class="fu">.</span> (map (<span class="fu">^</span><span class="dv">2</span>))
squareEvenSum&#39; <span class="fu">=</span> evenSum <span class="fu">.</span> (map (<span class="fu">^</span><span class="dv">2</span>))
squareEvenSum&#39;&#39; <span class="fu">=</span> sum&#39; <span class="fu">.</span> (map (<span class="fu">^</span><span class="dv">2</span>)) <span class="fu">.</span> (filter even)</code></pre>
</div>
<p>We just had to add another “transformation function”<sup><a href="#fn4" class="footnoteRef" id="fnref4">4</a></sup>.</p>
<pre><code>map (^2) [1,2,3,4] ⇔ [1,4,9,16]</code></pre>
<p>The <code>map</code> function simply applies a function to all the elements of a list.</p>
<p>We didn’t have to modify anything <em>inside</em> the function definition. This makes the code more modular. But in addition you can think more mathematically about your function. You can also use your function interchangably with others, as needed. That is, you can compose, map, fold, filter using your new function.</p>
<p>Modifying version 1 is left as an exercise to the reader ☺.</p>
<p>If you believe we have reached the end of generalization, then know you are very wrong. For example, there is a way to not only use this function on lists but on any recursive type. If you want to know how, I suggest you to read this quite fun article: <a href="http://eprints.eemcs.utwente.nl/7281/01/db-utwente-40501F46.pdf">Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire by Meijer, Fokkinga and Paterson</a>.</p>
<p>This example should show you how great pure functional programming is. Unfortunately, using pure functional programming isn’t well suited to all usages. Or at least such a language hasn’t been found yet.</p>
<p>One of the great powers of Haskell is the ability to create DSLs (Domain Specific Language) making it easy to change the programming paradigm.</p>
<p>In fact, Haskell is also great when you want to write imperative style programming. Understanding this was really hard for me to grasp when first learning Haskell. A lot of effort tends to go into explaining the superiority of the functional approach. Then when you start using an imperative style with Haskell, it can be hard to understand when and how to use it.</p>
<p>But before talking about this Haskell super-power, we must talk about another essential aspect of Haskell: <em>Types</em>.</p>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> evenSum [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/16_Functions.lhs" class="cut">02_Hard_Part/<strong>16_Functions.lhs</strong> </a></p>
<h3 id="types">
Types
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/salvador-dali-the-madonna-of-port-lligat.jpg" alt="Dali, the madonna of port Lligat"/>
</div>

<blockquote>
<p><span class="sc"><abbr title="Too long; didn't read">tl;dr</abbr>: </span></p>
<ul>
<li><code>type Name = AnotherType</code> is just an alias and the compiler doesn’t mark any difference between <code>Name</code> and <code>AnotherType</code>.</li>
<li><code>data Name = NameConstructor AnotherType</code> does mark a difference.</li>
<li><code>data</code> can construct structures which can be recursives.</li>
<li><code>deriving</code> is magic and creates functions for you.</li>
</ul>
</blockquote>
<p>In Haskell, types are strong and static.</p>
<p>Why is this important? It will help you <em>greatly</em> to avoid mistakes. In Haskell, most bugs are caught during the compilation of your program. And the main reason is because of the type inference during compilation. Type inference makes it easy to detect where you used the wrong parameter at the wrong place, for example.</p>
<h4 id="type-inference">
Type inference
</h4>

<p>Static typing is generally essential for fast execution. But most statically typed languages are bad at generalizing concepts. Haskell’s saving grace is that it can <em>infer</em> types.</p>
<p>Here is a simple example, the <code>square</code> function in Haskell:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">square x <span class="fu">=</span> x <span class="fu">*</span> x</code></pre>
<p>This function can <code>square</code> any Numeral type. You can provide <code>square</code> with an <code>Int</code>, an <code>Integer</code>, a <code>Float</code> a <code>Fractional</code> and even <code>Complex</code>. Proof by example:</p>
<pre><code>% ghci
GHCi, version 7.0.4:
...
Prelude&gt; let square x = x*x
Prelude&gt; square 2
4
Prelude&gt; square 2.1
4.41
Prelude&gt; -- load the Data.Complex module
Prelude&gt; :m Data.Complex
Prelude Data.Complex&gt; square (2 :+ 1)
3.0 :+ 4.0</code></pre>
<p><code>x :+ y</code> is the notation for the complex (<i>x + ib</i>).</p>
<p>Now compare with the amount of code necessary in C:</p>
<pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span>     int_square(<span class="dt">int</span> x) { <span class="kw">return</span> x*x; }

<span class="dt">float</span>   float_square(<span class="dt">float</span> x) {<span class="kw">return</span> x*x; }

complex complex_square (complex z) {
    complex tmp;
    tmp.real = z.real * z.real - z.img * z.img;
    tmp.img = <span class="dv">2</span> * z.img * z.real;
}

complex x,y;
y = complex_square(x);</code></pre>
<p>For each type, you need to write a new function. The only way to work around this problem is to use some meta-programming trick, for example using the pre-processor. In C++ there is a better way, C++ templates:</p>
<p>~~~~~~ {.c++} #include <iostream> #include <complex> using namespace std;</p>
<p>template<typename T> T square(T x) { return x*x; }</p>
<p>int main() { // int int sqr_of_five = square(5); cout &lt;&lt; sqr_of_five &lt;&lt; endl; // double cout &lt;&lt; (double)square(5.3) &lt;&lt; endl; // complex cout &lt;&lt; square( complex<double>(5,3) ) &lt;&lt; endl; return 0; } ~~~~~~</p>
<p>C++ does a far better job than C in this regard. But for more complex functions the syntax can be hard to follow: see <a href="http://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/">this article</a> for example.</p>
<p>In C++ you must declare that a function can work with different types. In Haskell, the opposite is the case. The function will be as general as possible by default.</p>
<p>Type inference gives Haskell the feeling of freedom that dynamically typed languages provide. But unlike dynamically typed languages, most errors are caught before run time. Generally, in Haskell:</p>
<blockquote>
<p>“if it compiles it certainly does what you intended”</p>
</blockquote>
<hr/>
<p><a href="code/02_Hard_Part/21_Types.lhs" class="cut">02_Hard_Part/<strong>21_Types.lhs</strong></a></p>
<h4 id="type-construction">
Type construction
</h4>

<p>You can construct your own types. First, you can use aliases or type synonyms.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Name</span>   <span class="fu">=</span> <span class="dt">String</span>
<span class="kw">type</span> <span class="dt">Color</span>  <span class="fu">=</span> <span class="dt">String</span>

<span class="ot">showInfos ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span>  <span class="dt">Color</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
showInfos name color <span class="fu">=</span>  <span class="st">&quot;Name: &quot;</span> <span class="fu">++</span> name
                        <span class="fu">++</span> <span class="st">&quot;, Color: &quot;</span> <span class="fu">++</span> color
<span class="ot">name ::</span> <span class="dt">Name</span>
name <span class="fu">=</span> <span class="st">&quot;Robin&quot;</span>
<span class="ot">color ::</span> <span class="dt">Color</span>
color <span class="fu">=</span> <span class="st">&quot;Blue&quot;</span>
main <span class="fu">=</span> putStrLn <span class="fu">$</span> showInfos name color</code></pre>
</div>
<p><a href="code/02_Hard_Part/21_Types.lhs" class="cut">02_Hard_Part/<strong>21_Types.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/22_Types.lhs" class="cut">02_Hard_Part/<strong>22_Types.lhs</strong></a></p>
<p>But it doesn’t protect you much. Try to swap the two parameter of <code>showInfos</code> and run the program:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">    putStrLn <span class="fu">$</span> showInfos color name</code></pre>
<p>It will compile and execute. In fact you can replace Name, Color and String everywhere. The compiler will treat them as completely identical.</p>
<p>Another method is to create your own types using the keyword <code>data</code>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Name</span>   <span class="fu">=</span> <span class="dt">NameConstr</span> <span class="dt">String</span>
<span class="kw">data</span> <span class="dt">Color</span>  <span class="fu">=</span> <span class="dt">ColorConstr</span> <span class="dt">String</span>

<span class="ot">showInfos ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span>  <span class="dt">Color</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
showInfos (<span class="dt">NameConstr</span> name) (<span class="dt">ColorConstr</span> color) <span class="fu">=</span>
      <span class="st">&quot;Name: &quot;</span> <span class="fu">++</span> name <span class="fu">++</span> <span class="st">&quot;, Color: &quot;</span> <span class="fu">++</span> color

name  <span class="fu">=</span> <span class="dt">NameConstr</span> <span class="st">&quot;Robin&quot;</span>
color <span class="fu">=</span> <span class="dt">ColorConstr</span> <span class="st">&quot;Blue&quot;</span>
main <span class="fu">=</span> putStrLn <span class="fu">$</span> showInfos name color</code></pre>
</div>
<p>Now if you switch parameters of <code>showInfos</code>, the compiler complains! So this is a potential mistake you will never make again and the only price is to be more verbose.</p>
<p>Also notice that constructors are functions:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">NameConstr</span><span class="ot">  ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Name</span>
<span class="dt">ColorConstr</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Color</span></code></pre>
<p>The syntax of <code>data</code> is mainly:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">TypeName</span> <span class="fu">=</span>   <span class="dt">ConstructorName</span>  [types]
                <span class="fu">|</span> <span class="dt">ConstructorName2</span> [types]
                <span class="fu">|</span> <span class="fu">...</span></code></pre>
<p>Generally the usage is to use the same name for the DataTypeName and DataTypeConstructor.</p>
<p>Example:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Complex</span> <span class="fu">=</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Complex</span> a a</code></pre>
<p>Also you can use the record syntax:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">DataTypeName</span> <span class="fu">=</span> <span class="dt">DataConstructor</span> {
<span class="ot">                      field1 ::</span> [<span class="kw">type</span> <span class="kw">of</span> field1]
                    ,<span class="ot"> field2 ::</span> [<span class="kw">type</span> <span class="kw">of</span> field2]
                    <span class="fu">...</span>
                    ,<span class="ot"> fieldn ::</span> [<span class="kw">type</span> <span class="kw">of</span> fieldn] }</code></pre>
<p>And many accessors are made for you. Furthermore you can use another order when setting values.</p>
<p>Example:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Complex</span> <span class="fu">=</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Complex</span> {<span class="ot"> real ::</span> a,<span class="ot"> img ::</span> a}
c <span class="fu">=</span> <span class="dt">Complex</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">0</span> <span class="dv">2</span><span class="fu">.</span><span class="dv">0</span>
z <span class="fu">=</span> <span class="dt">Complex</span> { real <span class="fu">=</span> <span class="dv">3</span>, img <span class="fu">=</span> <span class="dv">4</span> }
real c <span class="ot">⇒</span> <span class="dv">1</span><span class="fu">.</span><span class="dv">0</span>
img z <span class="ot">⇒</span> <span class="dv">4</span></code></pre>
<p><a href="code/02_Hard_Part/22_Types.lhs" class="cut">02_Hard_Part/<strong>22_Types.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/23_Types.lhs" class="cut">02_Hard_Part/<strong>23_Types.lhs</strong></a></p>
<h4 id="recursive-type">
Recursive type
</h4>

<p>You already encountered a recursive type: lists. You can re-create lists, but with a more verbose syntax:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">List</span> a <span class="fu">=</span> <span class="dt">Empty</span> <span class="fu">|</span> <span class="dt">Cons</span> a (<span class="dt">List</span> a)</code></pre>
<p>If you really want to use an easier syntax you can use an infix name for constructors.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">infixr</span> <span class="dv">5</span> <span class="ot">::</span><span class="fu">:</span>
<span class="kw">data</span> <span class="dt">List</span> a <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> a <span class="ot">::</span><span class="fu">:</span> (<span class="dt">List</span> a)</code></pre>
<p>The number after <code>infixr</code> gives the precedence.</p>
<p>If you want to be able to print (<code>Show</code>), read (<code>Read</code>), test equality (<code>Eq</code>) and compare (<code>Ord</code>) your new data structure you can tell Haskell to derive the appropriate functions for you.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">infixr</span> <span class="dv">5</span> <span class="ot">::</span><span class="fu">:</span>
<span class="kw">data</span> <span class="dt">List</span> a <span class="fu">=</span> <span class="dt">Nil</span> <span class="fu">|</span> a <span class="ot">::</span><span class="fu">:</span> (<span class="dt">List</span> a) 
              <span class="kw">deriving</span> (<span class="dt">Show</span>,<span class="dt">Read</span>,<span class="dt">Eq</span>,<span class="dt">Ord</span>)</code></pre>
</div>
<p>When you add <code>deriving (Show)</code> to your data declaration, Haskell creates a <code>show</code> function for you. We’ll see soon how you can use your own <code>show</code> function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">convertList [] <span class="fu">=</span> <span class="dt">Nil</span>
convertList (x<span class="fu">:</span>xs) <span class="fu">=</span> x <span class="ot">::</span><span class="fu">:</span> convertList xs</code></pre>
</div>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
      print (<span class="dv">0</span> <span class="ot">::</span><span class="fu">:</span> <span class="dv">1</span> <span class="ot">::</span><span class="fu">:</span> <span class="dt">Nil</span>)
      print (convertList [<span class="dv">0</span>,<span class="dv">1</span>])</code></pre>
</div>
<p>This prints:</p>
<pre><code>0 ::: (1 ::: Nil)
0 ::: (1 ::: Nil)</code></pre>
<p><a href="code/02_Hard_Part/23_Types.lhs" class="cut">02_Hard_Part/<strong>23_Types.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/30_Trees.lhs" class="cut">02_Hard_Part/<strong>30_Trees.lhs</strong></a></p>
<h4 id="trees">
Trees
</h4>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/magritte-l-arbre.jpg" alt="Magritte, l"/>
</div>

<p>We’ll just give another standard example: binary trees.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Data.List

<span class="kw">data</span> <span class="dt">BinTree</span> a <span class="fu">=</span> <span class="dt">Empty</span>
                 <span class="fu">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a)
                              <span class="kw">deriving</span> (<span class="dt">Show</span>)</code></pre>
</div>
<p>We will also create a function which turns a list into an ordered binary tree.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">treeFromList ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a
treeFromList [] <span class="fu">=</span> <span class="dt">Empty</span>
treeFromList (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="dt">Node</span> x (treeFromList (filter (<span class="fu">&lt;</span>x) xs))
                             (treeFromList (filter (<span class="fu">&gt;</span>x) xs))</code></pre>
</div>
<p>Look at how elegant this function is. In plain English:</p>
<ul>
<li>an empty list will be converted to an empty tree.</li>
<li>a list <code>(x:xs)</code> will be converted to a tree where:</li>
<li>The root is <code>x</code></li>
<li>Its left subtree is the tree created from members of the list <code>xs</code> which are strictly inferior to <code>x</code> and</li>
<li>the right subtree is the tree created from members of the list <code>xs</code> which are strictly superior to <code>x</code>.</li>
</ul>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> treeFromList [<span class="dv">7</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">8</span>]</code></pre>
</div>
<p>You should obtain the following:</p>
<pre><code>Node 7 (Node 2 Empty (Node 4 Empty Empty)) (Node 8 Empty Empty)</code></pre>
<p>This is an informative but quite unpleasant representation of our tree.</p>
<p><a href="code/02_Hard_Part/30_Trees.lhs" class="cut">02_Hard_Part/<strong>30_Trees.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/31_Trees.lhs" class="cut">02_Hard_Part/<strong>31_Trees.lhs</strong></a></p>
<p>Just for fun, let’s code a better display for our trees. I simply had fun making a nice function to display trees in a general way. You can safely skip this part if you find it too difficult to follow.</p>
<p>We have a few changes to make. We remove the <code>deriving (Show)</code> from the declaration of our <code>BinTree</code> type. And it might also be useful to make our BinTree an instance of (<code>Eq</code> and <code>Ord</code>) so we will be able to test equality and compare trees.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">BinTree</span> a <span class="fu">=</span> <span class="dt">Empty</span>
                 <span class="fu">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a)
                  <span class="kw">deriving</span> (<span class="dt">Eq</span>,<span class="dt">Ord</span>)</code></pre>
</div>
<p>Without the <code>deriving (Show)</code>, Haskell doesn’t create a <code>show</code> method for us. We will create our own version of <code>show</code>. To achieve this, we must declare that our newly created type <code>BinTree a</code> is an instance of the type class <code>Show</code>. The general syntax is:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">BinTree</span> a) <span class="kw">where</span>
   show t <span class="fu">=</span> <span class="fu">...</span> <span class="co">-- You declare your function here</span></code></pre>
<p>Here is my version of how to show a binary tree. Don’t worry about the apparent complexity. I made a lot of improvements in order to display even stranger objects.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- declare BinTree a to be an instance of Show</span>
<span class="kw">instance</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">BinTree</span> a) <span class="kw">where</span>
  <span class="co">-- will start by a &#39;&lt;&#39; before the root</span>
  <span class="co">-- and put a : a begining of line</span>
  show t <span class="fu">=</span> <span class="st">&quot;&lt; &quot;</span> <span class="fu">++</span> replace <span class="ch">&#39;\n&#39;</span> <span class="st">&quot;\n: &quot;</span> (treeshow <span class="st">&quot;&quot;</span> t)
    <span class="kw">where</span>
    <span class="co">-- treeshow pref Tree</span>
    <span class="co">--   shows a tree and starts each line with pref</span>
    <span class="co">-- We don&#39;t display the Empty tree</span>
    treeshow pref <span class="dt">Empty</span> <span class="fu">=</span> <span class="st">&quot;&quot;</span>
    <span class="co">-- Leaf</span>
    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> <span class="dt">Empty</span>) <span class="fu">=</span>
                  (pshow pref x)

    <span class="co">-- Right branch is empty</span>
    treeshow pref (<span class="dt">Node</span> x left <span class="dt">Empty</span>) <span class="fu">=</span>
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> left)

    <span class="co">-- Left branch is empty</span>
    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> right) <span class="fu">=</span>
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    <span class="co">-- Tree with left and right children non empty</span>
    treeshow pref (<span class="dt">Node</span> x left right) <span class="fu">=</span>
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;|--&quot;</span> <span class="st">&quot;|  &quot;</span> left) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    <span class="co">-- shows a tree using some prefixes to make it nice</span>
    showSon pref before next t <span class="fu">=</span>
                  pref <span class="fu">++</span> before <span class="fu">++</span> treeshow (pref <span class="fu">++</span> next) t

    <span class="co">-- pshow replaces &quot;\n&quot; by &quot;\n&quot;++pref</span>
    pshow pref x <span class="fu">=</span> replace <span class="ch">&#39;\n&#39;</span> (<span class="st">&quot;\n&quot;</span><span class="fu">++</span>pref) (show x)

    <span class="co">-- replaces one char by another string</span>
    replace c new string <span class="fu">=</span>
      concatMap (change c new) string
      <span class="kw">where</span>
          change c new x
              <span class="fu">|</span> x <span class="fu">==</span> c <span class="fu">=</span> new
              <span class="fu">|</span> otherwise <span class="fu">=</span> x<span class="fu">:</span>[] <span class="co">-- &quot;x&quot;</span></code></pre>
</div>
<p>The <code>treeFromList</code> method remains identical.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">treeFromList ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a
treeFromList [] <span class="fu">=</span> <span class="dt">Empty</span>
treeFromList (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="dt">Node</span> x (treeFromList (filter (<span class="fu">&lt;</span>x) xs))
                             (treeFromList (filter (<span class="fu">&gt;</span>x) xs))</code></pre>
</div>
<p>And now, we can play:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Int binary tree:&quot;</span>
  print <span class="fu">$</span> treeFromList [<span class="dv">7</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">8</span>,<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">21</span>,<span class="dv">12</span>,<span class="dv">23</span>]</code></pre>
</div>
<pre><code>Int binary tree:
&lt; 7
: |--2
: |  |--1
: |  `--4
: |     |--3
: |     `--6
: `--8
:    `--21
:       |--12
:       `--23</code></pre>
<p>Now it is far better! The root is shown by starting the line with the <code>&lt;</code> character. And each following line starts with a <code>:</code>. But we could also use another type.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">  putStrLn <span class="st">&quot;\nString binary tree:&quot;</span>
  print <span class="fu">$</span> treeFromList [<span class="st">&quot;foo&quot;</span>,<span class="st">&quot;bar&quot;</span>,<span class="st">&quot;baz&quot;</span>,<span class="st">&quot;gor&quot;</span>,<span class="st">&quot;yog&quot;</span>]</code></pre>
</div>
<pre><code>String binary tree:
&lt; &quot;foo&quot;
: |--&quot;bar&quot;
: |  `--&quot;baz&quot;
: `--&quot;gor&quot;
:    `--&quot;yog&quot;</code></pre>
<p>As we can test equality and order trees, we can make tree of trees!</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">  putStrLn <span class="st">&quot;\nBinary tree of Char binary trees:&quot;</span>
  print ( treeFromList
           (map treeFromList [<span class="st">&quot;baz&quot;</span>,<span class="st">&quot;zara&quot;</span>,<span class="st">&quot;bar&quot;</span>]))</code></pre>
</div>
<pre><code>Binary tree of Char binary trees:
&lt; &lt; &#39;b&#39;
: : |--&#39;a&#39;
: : `--&#39;z&#39;
: |--&lt; &#39;b&#39;
: |  : |--&#39;a&#39;
: |  : `--&#39;r&#39;
: `--&lt; &#39;z&#39;
:    : `--&#39;a&#39;
:    :    `--&#39;r&#39;</code></pre>
<p>This is why I chose to prefix each line of tree display by <code>:</code> (except for the root).</p>
<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/yo_dawg_tree.jpg" alt="Yo Dawg Tree"/>
</div>

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">  putStrLn <span class="st">&quot;\nTree of Binary trees of Char binary trees:&quot;</span>
  print <span class="fu">$</span> (treeFromList <span class="fu">.</span> map (treeFromList <span class="fu">.</span> map treeFromList))
             [ [<span class="st">&quot;YO&quot;</span>,<span class="st">&quot;DAWG&quot;</span>]
             , [<span class="st">&quot;I&quot;</span>,<span class="st">&quot;HEARD&quot;</span>]
             , [<span class="st">&quot;I&quot;</span>,<span class="st">&quot;HEARD&quot;</span>]
             , [<span class="st">&quot;YOU&quot;</span>,<span class="st">&quot;LIKE&quot;</span>,<span class="st">&quot;TREES&quot;</span>] ]</code></pre>
</div>
<p>Which is equivalent to</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">print ( treeFromList (
          map treeFromList
             [ map treeFromList [<span class="st">&quot;YO&quot;</span>,<span class="st">&quot;DAWG&quot;</span>]
             , map treeFromList [<span class="st">&quot;I&quot;</span>,<span class="st">&quot;HEARD&quot;</span>]
             , map treeFromList [<span class="st">&quot;I&quot;</span>,<span class="st">&quot;HEARD&quot;</span>]
             , map treeFromList [<span class="st">&quot;YOU&quot;</span>,<span class="st">&quot;LIKE&quot;</span>,<span class="st">&quot;TREES&quot;</span>] ]))</code></pre>
<p>and gives:</p>
<pre><code>Binary tree of Binary trees of Char binary trees:
&lt; &lt; &lt; &#39;Y&#39;
: : : `--&#39;O&#39;
: : `--&lt; &#39;D&#39;
: :    : |--&#39;A&#39;
: :    : `--&#39;W&#39;
: :    :    `--&#39;G&#39;
: |--&lt; &lt; &#39;I&#39;
: |  : `--&lt; &#39;H&#39;
: |  :    : |--&#39;E&#39;
: |  :    : |  `--&#39;A&#39;
: |  :    : |     `--&#39;D&#39;
: |  :    : `--&#39;R&#39;
: `--&lt; &lt; &#39;Y&#39;
:    : : `--&#39;O&#39;
:    : :    `--&#39;U&#39;
:    : `--&lt; &#39;L&#39;
:    :    : `--&#39;I&#39;
:    :    :    |--&#39;E&#39;
:    :    :    `--&#39;K&#39;
:    :    `--&lt; &#39;T&#39;
:    :       : `--&#39;R&#39;
:    :       :    |--&#39;E&#39;
:    :       :    `--&#39;S&#39;</code></pre>
<p>Notice how duplicate trees aren’t inserted; there is only one tree corresponding to <code>&quot;I&quot;,&quot;HEARD&quot;</code>. We have this for (almost) free, because we have declared Tree to be an instance of <code>Eq</code>.</p>
<p>See how awesome this structure is: We can make trees containing not only integers, strings and chars, but also other trees. And we can even make a tree containing a tree of trees!</p>
<p><a href="code/02_Hard_Part/31_Trees.lhs" class="cut">02_Hard_Part/<strong>31_Trees.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/40_Infinites_Structures.lhs" class="cut">02_Hard_Part/<strong>40_Infinites_Structures.lhs</strong></a></p>
<h3 id="infinite-structures">
Infinite Structures
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/escher_infinite_lizards.jpg" alt="Escher"/>
</div>

<p>It is often said that Haskell is <em>lazy</em>.</p>
<p>In fact, if you are a bit pedantic, you should say that <a href="http://www.haskell.org/haskellwiki/Lazy_vs._non-strict">Haskell is <em>non-strict</em></a>. Laziness is just a common implementation for non-strict languages.</p>
<p>Then what does “not-strict” mean? From the Haskell wiki:</p>
<blockquote>
<p>Reduction (the mathematical term for evaluation) proceeds from the outside in.</p>
<p>so if you have <code>(a+(b*c))</code> then you first reduce <code>+</code> first, then you reduce the inner <code>(b*c)</code></p>
</blockquote>
<p>For example in Haskell you can do:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- numbers = [1,2,..]</span>
<span class="ot">numbers ::</span> [<span class="dt">Integer</span>]
numbers <span class="fu">=</span> <span class="dv">0</span><span class="fu">:</span>map (<span class="dv">1</span><span class="fu">+</span>) numbers

take&#39; n [] <span class="fu">=</span> []
take&#39; <span class="dv">0</span> l <span class="fu">=</span> []
take&#39; n (x<span class="fu">:</span>xs) <span class="fu">=</span> x<span class="fu">:</span>take&#39; (n<span class="fu">-</span><span class="dv">1</span>) xs

main <span class="fu">=</span> print <span class="fu">$</span> take&#39; <span class="dv">10</span> numbers</code></pre>
</div>
<p>And it stops.</p>
<p>How?</p>
<p>Instead of trying to evaluate <code>numbers</code> entirely, it evaluates elements only when needed.</p>
<p>Also, note in Haskell there is a notation for infinite lists</p>
<pre><code>[1..]   ⇔ [1,2,3,4...]
[1,3..] ⇔ [1,3,5,7,9,11...]</code></pre>
<p>and most functions will work with them. Also, there is a built-in function <code>take</code> which is equivalent to our <code>take'</code>.</p>
<p><a href="code/02_Hard_Part/40_Infinites_Structures.lhs" class="cut">02_Hard_Part/<strong>40_Infinites_Structures.lhs</strong> </a></p>
<hr/>
<p><a href="code/02_Hard_Part/41_Infinites_Structures.lhs" class="cut">02_Hard_Part/<strong>41_Infinites_Structures.lhs</strong></a></p>
<div style="display:none">

<p>This code is mostly the same as the previous one.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Debug.Trace (trace)
<span class="kw">import</span> Data.List
<span class="kw">data</span> <span class="dt">BinTree</span> a <span class="fu">=</span> <span class="dt">Empty</span> 
                 <span class="fu">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a) 
                  <span class="kw">deriving</span> (<span class="dt">Eq</span>,<span class="dt">Ord</span>)</code></pre>
</div>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- declare BinTree a to be an instance of Show</span>
<span class="kw">instance</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">BinTree</span> a) <span class="kw">where</span>
  <span class="co">-- will start by a &#39;&lt;&#39; before the root</span>
  <span class="co">-- and put a : a begining of line</span>
  show t <span class="fu">=</span> <span class="st">&quot;&lt; &quot;</span> <span class="fu">++</span> replace <span class="ch">&#39;\n&#39;</span> <span class="st">&quot;\n: &quot;</span> (treeshow <span class="st">&quot;&quot;</span> t)
    <span class="kw">where</span>
    treeshow pref <span class="dt">Empty</span> <span class="fu">=</span> <span class="st">&quot;&quot;</span>
    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> <span class="dt">Empty</span>) <span class="fu">=</span> 
                  (pshow pref x)

    treeshow pref (<span class="dt">Node</span> x left <span class="dt">Empty</span>) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> left)

    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> right) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    treeshow pref (<span class="dt">Node</span> x left right) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;|--&quot;</span> <span class="st">&quot;|  &quot;</span> left) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    <span class="co">-- show a tree using some prefixes to make it nice</span>
    showSon pref before next t <span class="fu">=</span> 
                  pref <span class="fu">++</span> before <span class="fu">++</span> treeshow (pref <span class="fu">++</span> next) t

    <span class="co">-- pshow replace &quot;\n&quot; by &quot;\n&quot;++pref</span>
    pshow pref x <span class="fu">=</span> replace <span class="ch">&#39;\n&#39;</span> (<span class="st">&quot;\n&quot;</span><span class="fu">++</span>pref) (<span class="st">&quot; &quot;</span> <span class="fu">++</span> show x)

    <span class="co">-- replace on char by another string</span>
    replace c new string <span class="fu">=</span>
      concatMap (change c new) string
      <span class="kw">where</span>
          change c new x 
              <span class="fu">|</span> x <span class="fu">==</span> c <span class="fu">=</span> new
              <span class="fu">|</span> otherwise <span class="fu">=</span> x<span class="fu">:</span>[] <span class="co">-- &quot;x&quot;</span></code></pre>
</div>
</div>

<p>Suppose we don’t mind having an ordered binary tree. Here is an infinite binary tree:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">nullTree <span class="fu">=</span> <span class="dt">Node</span> <span class="dv">0</span> nullTree nullTree</code></pre>
</div>
<p>A complete binary tree where each node is equal to 0. Now I will prove you can manipulate this object using the following function:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- take all element of a BinTree </span>
<span class="co">-- up to some depth</span>
treeTakeDepth _ <span class="dt">Empty</span> <span class="fu">=</span> <span class="dt">Empty</span>
treeTakeDepth <span class="dv">0</span> _     <span class="fu">=</span> <span class="dt">Empty</span>
treeTakeDepth n (<span class="dt">Node</span> x left right) <span class="fu">=</span> <span class="kw">let</span>
          nl <span class="fu">=</span> treeTakeDepth (n<span class="fu">-</span><span class="dv">1</span>) left
          nr <span class="fu">=</span> treeTakeDepth (n<span class="fu">-</span><span class="dv">1</span>) right
          <span class="kw">in</span>
              <span class="dt">Node</span> x nl nr</code></pre>
</div>
<p>See what occurs for this program:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> treeTakeDepth <span class="dv">4</span> nullTree</code></pre>
<p>This code compiles, runs and stops giving the following result:</p>
<pre><code>&lt;  0
: |-- 0
: |  |-- 0
: |  |  |-- 0
: |  |  `-- 0
: |  `-- 0
: |     |-- 0
: |     `-- 0
: `-- 0
:    |-- 0
:    |  |-- 0
:    |  `-- 0
:    `-- 0
:       |-- 0
:       `-- 0</code></pre>
<p>Just to heat up your neurones a bit more, let’s make a slightly more interesting tree:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">iTree <span class="fu">=</span> <span class="dt">Node</span> <span class="dv">0</span> (dec iTree) (inc iTree)
        <span class="kw">where</span>
           dec (<span class="dt">Node</span> x l r) <span class="fu">=</span> <span class="dt">Node</span> (x<span class="fu">-</span><span class="dv">1</span>) (dec l) (dec r) 
           inc (<span class="dt">Node</span> x l r) <span class="fu">=</span> <span class="dt">Node</span> (x<span class="fu">+</span><span class="dv">1</span>) (inc l) (inc r) </code></pre>
</div>
<p>Another way to create this tree is to use a higher order function. This function should be similar to <code>map</code>, but should work on <code>BinTree</code> instead of list. Here is such a function:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- apply a function to each node of Tree</span>
<span class="ot">treeMap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a <span class="ot">-&gt;</span> <span class="dt">BinTree</span> b
treeMap f <span class="dt">Empty</span> <span class="fu">=</span> <span class="dt">Empty</span>
treeMap f (<span class="dt">Node</span> x left right) <span class="fu">=</span> <span class="dt">Node</span> (f x) 
                                     (treeMap f left) 
                                     (treeMap f right)</code></pre>
</div>
<p><em>Hint</em>: I won’t talk more about this here. If you are interested in the generalization of <code>map</code> to other data structures, search for functor and <code>fmap</code>.</p>
<p>Our definition is now:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">infTreeTwo ::</span> <span class="dt">BinTree</span> <span class="dt">Int</span>
infTreeTwo <span class="fu">=</span> <span class="dt">Node</span> <span class="dv">0</span> (treeMap (\x <span class="ot">-&gt;</span> x<span class="fu">-</span><span class="dv">1</span>) infTreeTwo) 
                    (treeMap (\x <span class="ot">-&gt;</span> x<span class="fu">+</span><span class="dv">1</span>) infTreeTwo) </code></pre>
</div>
<p>Look at the result for</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> treeTakeDepth <span class="dv">4</span> infTreeTwo</code></pre>
<pre><code>&lt;  0
: |-- -1
: |  |-- -2
: |  |  |-- -3
: |  |  `-- -1
: |  `-- 0
: |     |-- -1
: |     `-- 1
: `-- 1
:    |-- 0
:    |  |-- -1
:    |  `-- 1
:    `-- 2
:       |-- 1
:       `-- 3</code></pre>
<div style="display:none">

<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
  print <span class="fu">$</span> treeTakeDepth <span class="dv">4</span> nullTree
  print <span class="fu">$</span> treeTakeDepth <span class="dv">4</span> infTreeTwo</code></pre>
</div>
</div>

<p><a href="code/02_Hard_Part/41_Infinites_Structures.lhs" class="cut">02_Hard_Part/<strong>41_Infinites_Structures.lhs</strong> </a></p>
<h2 id="hell-difficulty-part">
Hell Difficulty Part
</h2>

<p>Congratulations for getting so far! Now, some of the really hardcore stuff can start.</p>
<p>If you are like me, you should get the functional style. You should also understand a bit more the advantages of laziness by default. But you also don’t really understand where to start in order to make a real program. And in particular:</p>
<ul>
<li>How do you deal with effects?</li>
<li>Why is there a strange imperative-like notation for dealing with IO?</li>
</ul>
<p>Be prepared, the answers might be complex. But they are all very rewarding.</p>
<hr/>
<p><a href="code/03_Hell/01_IO/01_progressive_io_example.lhs" class="cut">03_Hell/01_IO/<strong>01_progressive_io_example.lhs</strong></a></p>
<h3 id="deal-with-io">
Deal With IO
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/magritte_carte_blanche.jpg" alt="Magritte, Carte blanche"/>
</div>

<blockquote>
<p><span class="sc"><abbr title="Too long; didn't read">tl;dr</abbr>: </span></p>
<p>A typical function doing <code>IO</code> looks a lot like an imperative program:</p>
<pre><code>f :: IO a
f = do
  x &lt;- action1
  action2 x
  y &lt;- action3
  action4 x y</code></pre>
<ul>
<li>To set a value to an object we use <code>&lt;-</code> .</li>
<li>The type of each line is <code>IO *</code>; in this example:</li>
<li><code>action1     :: IO b</code></li>
<li><code>action2 x   :: IO ()</code></li>
<li><code>action3     :: IO c</code></li>
<li><code>action4 x y :: IO a</code></li>
<li><code>x :: b</code>, <code>y :: c</code></li>
<li>Few objects have the type <code>IO a</code>, this should help you choose. In particular you cannot use pure functions directly here. To use pure functions you could do <code>action2 (purefunction x)</code> for example.</li>
</ul>
</blockquote>
<p>In this section, I will explain how to use IO, not how it works. You’ll see how Haskell separates the pure from the impure parts of the program.</p>
<p>Don’t stop because you’re trying to understand the details of the syntax. Answers will come in the next section.</p>
<p>What to achieve?</p>
<blockquote>
<p>Ask a user to enter a list of numbers. Print the sum of the numbers</p>
</blockquote>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">toList ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]
toList input <span class="fu">=</span> read (<span class="st">&quot;[&quot;</span> <span class="fu">++</span> input <span class="fu">++</span> <span class="st">&quot;]&quot;</span>)

main <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Enter a list of numbers (separated by comma):&quot;</span>
  input <span class="ot">&lt;-</span> getLine
  print <span class="fu">$</span> sum (toList input)</code></pre>
</div>
<p>It should be straightforward to understand the behavior of this program. Let’s analyze the types in more detail.</p>
<pre><code>putStrLn :: String -&gt; IO ()
getLine  :: IO String
print    :: Show a =&gt; a -&gt; IO ()</code></pre>
<p>Or more interestingly, we note that each expression in the <code>do</code> block has a type of <code>IO a</code>.</p>
<pre>
main = do
  putStrLn "Enter ... " :: <span class="high">IO ()</span>
  getLine               :: <span class="high">IO String</span>
  print Something       :: <span class="high">IO ()</span>
</pre>

<p>We should also pay attention to the effect of the <code>&lt;-</code> symbol.</p>
<pre><code>do
 x &lt;- something</code></pre>
<p>If <code>something :: IO a</code> then <code>x :: a</code>.</p>
<p>Another important note about using <code>IO</code>: All lines in a do block must be of one of the two forms:</p>
<pre><code>action1             :: IO a
                    -- in this case, generally a = ()</code></pre>
<p>or</p>
<pre><code>value &lt;- action2    -- where
                    -- bar z t :: IO b
                    -- value   :: b</code></pre>
<p>These two kinds of line will correspond to two different ways of sequencing actions. The meaning of this sentence should be clearer by the end of the next section.</p>
<p><a href="code/03_Hell/01_IO/01_progressive_io_example.lhs" class="cut">03_Hell/01_IO/<strong>01_progressive_io_example.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Hell/01_IO/02_progressive_io_example.lhs" class="cut">03_Hell/01_IO/<strong>02_progressive_io_example.lhs</strong></a></p>
<p>Now let’s see how this program behaves. For example, what happens if the user enters something strange? Let’s try:</p>
<pre><code>    % runghc 02_progressive_io_example.lhs
    Enter a list of numbers (separated by comma):
    foo
    Prelude.read: no parse</code></pre>
<p>Argh! An evil error message and a crash! Our first improvement will simply be to answer with a more friendly message.</p>
<p>In order to do this, we must detect that something went wrong. Here is one way to do this: use the type <code>Maybe</code>. This is a very common type in Haskell.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Data.Maybe</code></pre>
</div>
<p>What is this thing? <code>Maybe</code> is a type which takes one parameter. Its definition is:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="fu">=</span> <span class="dt">Nothing</span> <span class="fu">|</span> <span class="dt">Just</span> a</code></pre>
<p>This is a nice way to tell there was an error while trying to create/compute a value. The <code>maybeRead</code> function is a great example of this. This is a function similar to the function <code>read</code><sup><a href="#fn5" class="footnoteRef" id="fnref5">5</a></sup>, but if something goes wrong the returned value is <code>Nothing</code>. If the value is right, it returns <code>Just &lt;the value&gt;</code>. Don’t try to understand too much of this function. I use a lower level function than <code>read</code>; <code>reads</code>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">maybeRead ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
maybeRead s <span class="fu">=</span> <span class="kw">case</span> reads s <span class="kw">of</span>
                  [(x,<span class="st">&quot;&quot;</span>)]    <span class="ot">-&gt;</span> <span class="dt">Just</span> x
                  _           <span class="ot">-&gt;</span> <span class="dt">Nothing</span></code></pre>
</div>
<p>Now to be a bit more readable, we define a function which goes like this: If the string has the wrong format, it will return <code>Nothing</code>. Otherwise, for example for “1,2,3”, it will return <code>Just [1,2,3]</code>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getListFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Integer</span>]
getListFromString str <span class="fu">=</span> maybeRead <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">++</span> str <span class="fu">++</span> <span class="st">&quot;]&quot;</span></code></pre>
</div>
<p>We simply have to test the value in our main function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Enter a list of numbers (separated by comma):&quot;</span>
  input <span class="ot">&lt;-</span> getLine
  <span class="kw">let</span> maybeList <span class="fu">=</span> getListFromString input <span class="kw">in</span>
      <span class="kw">case</span> maybeList <span class="kw">of</span>
          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> print (sum l)
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;Bad format. Good Bye.&quot;</span></code></pre>
</div>
<p>In case of error, we display a nice error message.</p>
<p>Note that the type of each expression in the main’s do block remains of the form <code>IO a</code>. The only strange construction is <code>error</code>. I’ll just say here that <code>error msg</code> takes the needed type (here <code>IO ()</code>).</p>
<p>One very important thing to note is the type of all the functions defined so far. There is only one function which contains <code>IO</code> in its type: <code>main</code>. This means main is impure. But main uses <code>getListFromString</code> which is pure. So it’s clear just by looking at declared types which functions are pure and which are impure.</p>
<p>Why does purity matter? Among the many advantages, here are three:</p>
<ul>
<li>It is far easier to think about pure code than impure code.</li>
<li>Purity protects you from all the hard-to-reproduce bugs that are due to side effects.</li>
<li>You can evaluate pure functions in any order or in parallel without risk.</li>
</ul>
<p>This is why you should generally put as most code as possible inside pure functions.</p>
<p><a href="code/03_Hell/01_IO/02_progressive_io_example.lhs" class="cut">03_Hell/01_IO/<strong>02_progressive_io_example.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Hell/01_IO/03_progressive_io_example.lhs" class="cut">03_Hell/01_IO/<strong>03_progressive_io_example.lhs</strong></a></p>
<p>Our next iteration will be to prompt the user again and again until she enters a valid answer.</p>
<p>We keep the first part:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Data.Maybe

<span class="ot">maybeRead ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
maybeRead s <span class="fu">=</span> <span class="kw">case</span> reads s <span class="kw">of</span>
                  [(x,<span class="st">&quot;&quot;</span>)]    <span class="ot">-&gt;</span> <span class="dt">Just</span> x
                  _           <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
<span class="ot">getListFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Integer</span>]
getListFromString str <span class="fu">=</span> maybeRead <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">++</span> str <span class="fu">++</span> <span class="st">&quot;]&quot;</span></code></pre>
</div>
<p>Now we create a function which will ask the user for an list of integers until the input is right.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]
askUser <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Enter a list of numbers (separated by comma):&quot;</span>
  input <span class="ot">&lt;-</span> getLine
  <span class="kw">let</span> maybeList <span class="fu">=</span> getListFromString input <span class="kw">in</span>
      <span class="kw">case</span> maybeList <span class="kw">of</span>
          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> return l
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</code></pre>
</div>
<p>This function is of type <code>IO [Integer]</code>. Such a type means that we retrieved a value of type <code>[Integer]</code> through some IO actions. Some people might explain while waving their hands:</p>
<blockquote>
<p>«This is an <code>[Integer]</code> inside an <code>IO</code>»</p>
</blockquote>
<p>If you want to understand the details behind all of this, you’ll have to read the next section. But really, if you just want to <em>use</em> IO just practice a little and remember to think about the type.</p>
<p>Finally our main function is much simpler:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  list <span class="ot">&lt;-</span> askUser
  print <span class="fu">$</span> sum list</code></pre>
</div>
<p>We have finished with our introduction to <code>IO</code>. This was quite fast. Here are the main things to remember:</p>
<ul>
<li>in the <code>do</code> bloc, each expression must have the type <code>IO a</code>. You are then limited in the number of expressions available. For example, <code>getLine</code>, <code>print</code>, <code>putStrLn</code>, etc…</li>
<li>Try to externalize the pure functions as much as possible.</li>
<li>the <code>IO a</code> type means: an IO <em>action</em> which returns an element of type <code>a</code>. <code>IO</code> represents actions; under the hood, <code>IO a</code> is the type of a function. Read the next section if you are curious.</li>
</ul>
<p>If you practice a bit, you should be able to <em>use</em> <code>IO</code>.</p>
<blockquote>
<p><em>Exercises</em>:</p>
<ul>
<li>Make a program that sums all of its arguments. Hint: use the function <code>getArgs</code>.</li>
</ul>
</blockquote>
<p><a href="code/03_Hell/01_IO/03_progressive_io_example.lhs" class="cut">03_Hell/01_IO/<strong>03_progressive_io_example.lhs</strong> </a></p>
<h3 id="io-trick-explained">
IO trick explained
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/magritte_pipe.jpg" alt="Magritte, ceci n"/>
</div>

<blockquote>
<p>Here is a <span class="sc"><abbr title="Too long; didn't read">tl;dr</abbr>: </span> for this section.</p>
<p>To separate pure and impure parts, <code>main</code> is defined as a function which modifies the state of the world</p>
<pre><code>main :: World -&gt; World</code></pre>
<p>A function is guaranteed to have side effects only if it has this type. But look at a typical main function:</p>
<pre><code>main w0 =
    let (v1,w1) = action1 w0 in
    let (v2,w2) = action2 v1 w1 in
    let (v3,w3) = action3 v2 w2 in
    action4 v3 w3</code></pre>
<p>We have a lot of temporary elements (here <code>w1</code>, <code>w2</code> and <code>w3</code>) which must be passed on to the next action.</p>
<p>We create a function <code>bind</code> or <code>(&gt;&gt;=)</code>. With <code>bind</code> we don’t need temporary names anymore.</p>
<pre><code>main =
  action1 &gt;&gt;= action2 &gt;&gt;= action3 &gt;&gt;= action4</code></pre>
<p>Bonus: Haskell has syntactical sugar for us:</p>
<pre><code>main = do
  v1 &lt;- action1
  v2 &lt;- action2 v1
  v3 &lt;- action3 v2
  action4 v3</code></pre>
</blockquote>
<p>Why did we use this strange syntax, and what exactly is this <code>IO</code> type? It looks a bit like magic.</p>
<p>For now let’s just forget all about the pure parts of our program, and focus on the impure parts:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]
askUser <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Enter a list of numbers (separated by commas):&quot;</span>
  input <span class="ot">&lt;-</span> getLine
  <span class="kw">let</span> maybeList <span class="fu">=</span> getListFromString input <span class="kw">in</span>
      <span class="kw">case</span> maybeList <span class="kw">of</span>
          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> return l
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  list <span class="ot">&lt;-</span> askUser
  print <span class="fu">$</span> sum list</code></pre>
<p>First remark: this looks imperative. Haskell is powerful enough to make impure code look imperative. For example, if you wish you could create a <code>while</code> in Haskell. In fact, for dealing with <code>IO</code>, an imperative style is generally more appropriate.</p>
<p>But you should have noticed that the notation is a bit unusual. Here is why, in detail.</p>
<p>In an impure language, the state of the world can be seen as a huge hidden global variable. This hidden variable is accessible by all functions of your language. For example, you can read and write a file in any function. Whether a file exists or not is a difference in the possible states that the world can take.</p>
<p>In Haskell this state is not hidden. Rather, it is <em>explicitly</em> said that <code>main</code> is a function that <em>potentially</em> changes the state of the world. Its type is then something like:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span></code></pre>
<p>Not all functions may have access to this variable. Those which have access to this variable are impure. Functions to which the world variable isn’t provided are pure<sup><a href="#fn6" class="footnoteRef" id="fnref6">6</a></sup>.</p>
<p>Haskell considers the state of the world as an input variable to <code>main</code>. But the real type of main is closer to this one<sup><a href="#fn7" class="footnoteRef" id="fnref7">7</a></sup>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> ((),<span class="dt">World</span>)</code></pre>
<p>The <code>()</code> type is the unit type. Nothing to see here.</p>
<p>Now let’s rewrite our main function with this in mind:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">main w0 <span class="fu">=</span>
    <span class="kw">let</span> (list,w1) <span class="fu">=</span> askUser w0 <span class="kw">in</span>
    <span class="kw">let</span> (x,w2) <span class="fu">=</span> print (sum list,w1) <span class="kw">in</span>
    x</code></pre>
<p>First, we note that all functions which have side effects must have the type:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">World</span> <span class="ot">-&gt;</span> (a,<span class="dt">World</span>)</code></pre>
<p>where <code>a</code> is the type of the result. For example, a <code>getChar</code> function should have the type <code>World -&gt; (Char,World)</code>.</p>
<p>Another thing to note is the trick to fix the order of evaluation. In Haskell, in order to evaluate <code>f a b</code>, you have many choices:</p>
<ul>
<li>first eval <code>a</code> then <code>b</code> then <code>f a b</code></li>
<li>first eval <code>b</code> then <code>a</code> then <code>f a b</code>.</li>
<li>eval <code>a</code> and <code>b</code> in parallel then <code>f a b</code></li>
</ul>
<p>This is true because we’re working in a pure part of the language.</p>
<p>Now, if you look at the main function, it is clear you must eval the first line before the second one since to evaluate the second line you have to get a parameter given by the evaluation of the first line.</p>
<p>This trick works nicely. The compiler will at each step provide a pointer to a new real world id. Under the hood, <code>print</code> will evaluate as:</p>
<ul>
<li>print something on the screen</li>
<li>modify the id of the world</li>
<li>evaluate as <code>((),new world id)</code>.</li>
</ul>
<p>Now, if you look at the style of the main function, it is clearly awkward. Let’s try to do the same to the askUser function:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">askUser ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> ([<span class="dt">Integer</span>],<span class="dt">World</span>)</code></pre>
<p>Before:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]
askUser <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Enter a list of numbers:&quot;</span>
  input <span class="ot">&lt;-</span> getLine
  <span class="kw">let</span> maybeList <span class="fu">=</span> getListFromString input <span class="kw">in</span>
      <span class="kw">case</span> maybeList <span class="kw">of</span>
          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> return l
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</code></pre>
<p>After:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">askUser w0 <span class="fu">=</span>
    <span class="kw">let</span> (_,w1)     <span class="fu">=</span> putStrLn <span class="st">&quot;Enter a list of numbers:&quot;</span> <span class="kw">in</span>
    <span class="kw">let</span> (input,w2) <span class="fu">=</span> getLine w1 <span class="kw">in</span>
    <span class="kw">let</span> (l,w3)     <span class="fu">=</span> <span class="kw">case</span> getListFromString input <span class="kw">of</span>
                      <span class="dt">Just</span> l   <span class="ot">-&gt;</span> (l,w2)
                      <span class="dt">Nothing</span>  <span class="ot">-&gt;</span> askUser w2
    <span class="kw">in</span>
        (l,w3)</code></pre>
<p>This is similar, but awkward. Look at all these temporary <code>w?</code> names.</p>
<p>The lesson is: naive IO implementation in Pure functional languages is awkward!</p>
<p>Fortunately, there is a better way to handle this problem. We see a pattern. Each line is of the form:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> (y,w&#39;) <span class="fu">=</span> action x w <span class="kw">in</span></code></pre>
<p>Even if for some line the first <code>x</code> argument isn’t needed. The output type is a couple, <code>(answer, newWorldValue)</code>. Each function <code>f</code> must have a type similar to:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> (a,<span class="dt">World</span>)</code></pre>
<p>Not only this, but we can also note that we always follow the same usage pattern:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> (y,w1) <span class="fu">=</span> action1 w0 <span class="kw">in</span>
<span class="kw">let</span> (z,w2) <span class="fu">=</span> action2 w1 <span class="kw">in</span>
<span class="kw">let</span> (t,w3) <span class="fu">=</span> action3 w2 <span class="kw">in</span>
<span class="fu">...</span></code></pre>
<p>Each action can take from 0 to n parameters. And in particular, each action can take a parameter from the result of a line above.</p>
<p>For example, we could also have:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> (_,w1) <span class="fu">=</span> action1 x w0   <span class="kw">in</span>
<span class="kw">let</span> (z,w2) <span class="fu">=</span> action2 w1     <span class="kw">in</span>
<span class="kw">let</span> (_,w3) <span class="fu">=</span> action3 x z w2 <span class="kw">in</span>
<span class="fu">...</span></code></pre>
<p>And of course <code>actionN w :: (World) -&gt; (a,World)</code>.</p>
<blockquote>
<p>IMPORTANT: there are only two important patterns to consider:</p>
<pre><code>let (x,w1) = action1 w0 in
let (y,w2) = action2 x w1 in</code></pre>
<p>and</p>
<pre><code>let (_,w1) = action1 w0 in
let (y,w2) = action2 w1 in</code></pre>
</blockquote>
<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/jocker_pencil_trick.jpg" alt="Jocker pencil trick" class="left"/>
</div>

<p>Now, we will do a magic trick. We will make the temporary world symbol “disappear”. We will <code>bind</code> the two lines. Let’s define the <code>bind</code> function. Its type is quite intimidating at first:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bind ::</span> (<span class="dt">World</span> <span class="ot">-&gt;</span> (a,<span class="dt">World</span>))
        <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> (<span class="dt">World</span> <span class="ot">-&gt;</span> (b,<span class="dt">World</span>)))
        <span class="ot">-&gt;</span> (<span class="dt">World</span> <span class="ot">-&gt;</span> (b,<span class="dt">World</span>))</code></pre>
<p>But remember that <code>(World -&gt; (a,World))</code> is the type for an IO action. Now let’s rename it for clarity:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">IO</span> a <span class="fu">=</span> <span class="dt">World</span> <span class="ot">-&gt;</span> (a, <span class="dt">World</span>)</code></pre>
<p>Some examples of functions:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">getLine<span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">String</span>
print<span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre>
<p><code>getLine</code> is an IO action which takes world as a parameter and returns a couple <code>(String,World)</code>. This can be summarized as: <code>getLine</code> is of type <code>IO String</code>, which we also see as an IO action which will return a String “embeded inside an IO”.</p>
<p>The function <code>print</code> is also interesting. It takes one argument which can be shown. In fact it takes two arguments. The first is the value to print and the other is the state of world. It then returns a couple of type <code>((),World)</code>. This means that it changes the state of the world, but doesn’t yield any more data.</p>
<p>This type helps us simplify the type of <code>bind</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bind ::</span> <span class="dt">IO</span> a
        <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> b)
        <span class="ot">-&gt;</span> <span class="dt">IO</span> b</code></pre>
<p>It says that <code>bind</code> takes two IO actions as parameters and returns another IO action.</p>
<p>Now, remember the <em>important</em> patterns. The first was:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> (x,w1) <span class="fu">=</span> action1 w0 <span class="kw">in</span>
<span class="kw">let</span> (y,w2) <span class="fu">=</span> action2 x w1 <span class="kw">in</span>
(y,w2)</code></pre>
<p>Look at the types:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">action1  ::</span> <span class="dt">IO</span> a
<span class="ot">action2  ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b
(y,w2)<span class="ot">   ::</span> <span class="dt">IO</span> b</code></pre>
<p>Doesn’t it seem familiar?</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(bind action1 action2) w0 <span class="fu">=</span>
    <span class="kw">let</span> (x, w1) <span class="fu">=</span> action1 w0
        (y, w2) <span class="fu">=</span> action2 x w1
    <span class="kw">in</span>  (y, w2)</code></pre>
<p>The idea is to hide the World argument with this function. Let’s go: As an example imagine if we wanted to simulate:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> (line1,w1) <span class="fu">=</span> getLine w0 <span class="kw">in</span>
<span class="kw">let</span> ((),w2) <span class="fu">=</span> print line1 <span class="kw">in</span>
((),w2)</code></pre>
<p>Now, using the bind function:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(res,w2) <span class="fu">=</span> (bind getLine (\l <span class="ot">-&gt;</span> print l)) w0</code></pre>
<p>As print is of type <code>(World -&gt; ((),World))</code>, we know <code>res = ()</code> (null type). If you didn’t see what was magic here, let’s try with three lines this time.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">let</span> (line1,w1) <span class="fu">=</span> getLine w0 <span class="kw">in</span>
<span class="kw">let</span> (line2,w2) <span class="fu">=</span> getLine w1 <span class="kw">in</span>
<span class="kw">let</span> ((),w3) <span class="fu">=</span> print (line1 <span class="fu">++</span> line2) <span class="kw">in</span>
((),w3)</code></pre>
<p>Which is equivalent to:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(res,w3) <span class="fu">=</span> (bind getLine (\line1 <span class="ot">-&gt;</span>
             (bind getLine (\line2 <span class="ot">-&gt;</span>
               print (line1 <span class="fu">++</span> line2))))) w0</code></pre>
<p>Didn’t you notice something? Yes, no temporary World variables are used anywhere! This is <em>MA</em>. <em>GIC</em>.</p>
<p>We can use a better notation. Let’s use <code>(&gt;&gt;=)</code> instead of <code>bind</code>. <code>(&gt;&gt;=)</code> is an infix function like <code>(+)</code>; reminder <code>3 + 4 ⇔ (+) 3 4</code></p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">(res,w3) <span class="fu">=</span> (getLine <span class="fu">&gt;&gt;=</span>
           (\line1 <span class="ot">-&gt;</span> getLine <span class="fu">&gt;&gt;=</span>
           (\line2 <span class="ot">-&gt;</span> print (line1 <span class="fu">++</span> line2)))) w0</code></pre>
<p>Ho Ho Ho! Merry Christmas Everyone! Haskell has made syntactical sugar for us:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">do</span>
  x <span class="ot">&lt;-</span> action1
  y <span class="ot">&lt;-</span> action2
  z <span class="ot">&lt;-</span> action3
  <span class="fu">...</span></code></pre>
<p>Is replaced by:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">action1 <span class="fu">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span>
action2 <span class="fu">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span>
action3 <span class="fu">&gt;&gt;=</span> (\z <span class="ot">-&gt;</span>
<span class="fu">...</span>
)))</code></pre>
<p>Note that you can use <code>x</code> in <code>action2</code> and <code>x</code> and <code>y</code> in <code>action3</code>.</p>
<p>But what about the lines not using the <code>&lt;-</code>? Easy, another function <code>blindBind</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">blindBind ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> b
blindBind action1 action2 w0 <span class="fu">=</span>
    bind action (\_ <span class="ot">-&gt;</span> action2) w0</code></pre>
<p>I didn’t simplify this definition for the purposes of clarity. Of course we can use a better notation, we’ll use the <code>(&gt;&gt;)</code> operator.</p>
<p>And</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">do</span>
    action1
    action2
    action3</code></pre>
<p>Is transformed into</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">action1 <span class="fu">&gt;&gt;</span>
action2 <span class="fu">&gt;&gt;</span>
action3</code></pre>
<p>Also, another function is quite useful.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">putInIO ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a
putInIO x <span class="fu">=</span> <span class="dt">IO</span> (\w <span class="ot">-&gt;</span> (x,w))</code></pre>
<p>This is the general way to put pure values inside the “IO context”. The general name for <code>putInIO</code> is <code>return</code>. This is quite a bad name when you learn Haskell. <code>return</code> is very different from what you might be used to.</p>
<hr/>
<p><a href="code/03_Hell/01_IO/21_Detailled_IO.lhs" class="cut">03_Hell/01_IO/<strong>21_Detailled_IO.lhs</strong></a></p>
<p>To finish, let’s translate our example:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">
<span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]
askUser <span class="fu">=</span> <span class="kw">do</span>
  putStrLn <span class="st">&quot;Enter a list of numbers (separated by commas):&quot;</span>
  input <span class="ot">&lt;-</span> getLine
  <span class="kw">let</span> maybeList <span class="fu">=</span> getListFromString input <span class="kw">in</span>
      <span class="kw">case</span> maybeList <span class="kw">of</span>
          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> return l
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  list <span class="ot">&lt;-</span> askUser
  print <span class="fu">$</span> sum list</code></pre>
<p>Is translated into:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Data.Maybe

<span class="ot">maybeRead ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
maybeRead s <span class="fu">=</span> <span class="kw">case</span> reads s <span class="kw">of</span>
                  [(x,<span class="st">&quot;&quot;</span>)]    <span class="ot">-&gt;</span> <span class="dt">Just</span> x
                  _           <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
<span class="ot">getListFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Integer</span>]
getListFromString str <span class="fu">=</span> maybeRead <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">++</span> str <span class="fu">++</span> <span class="st">&quot;]&quot;</span>
<span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]
askUser <span class="fu">=</span> 
    putStrLn <span class="st">&quot;Enter a list of numbers (sep. by commas):&quot;</span> <span class="fu">&gt;&gt;</span>
    getLine <span class="fu">&gt;&gt;=</span> \input <span class="ot">-&gt;</span>
    <span class="kw">let</span> maybeList <span class="fu">=</span> getListFromString input <span class="kw">in</span>
      <span class="kw">case</span> maybeList <span class="kw">of</span>
        <span class="dt">Just</span> l <span class="ot">-&gt;</span> return l
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> askUser <span class="fu">&gt;&gt;=</span>
  \list <span class="ot">-&gt;</span> print <span class="fu">$</span> sum list</code></pre>
</div>
<p>You can compile this code to verify that it works.</p>
<p>Imagine what it would look like without the <code>(&gt;&gt;)</code> and <code>(&gt;&gt;=)</code>.</p>
<p><a href="code/03_Hell/01_IO/21_Detailled_IO.lhs" class="cut">03_Hell/01_IO/<strong>21_Detailled_IO.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Hell/02_Monads/10_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>10_Monads.lhs</strong></a></p>
<h3 id="monads">
Monads
</h3>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/dali_reve.jpg" alt="Dali, reve. It represents a weapon out of the mouth of a tiger, itself out of the mouth of another tiger, itself out of the mouth of a fish itself out of a grenade. I could have choosen a picture of the Human centipede as it is a very good representation of what a monad really is. But just to think about it, I find this disgusting and that wasn"/>
</div>

<p>Now the secret can be revealed: <code>IO</code> is a <em>monad</em>. Being a monad means you have access to some syntactical sugar with the <code>do</code> notation. But mainly, you have access to a coding pattern which will ease the flow of your code.</p>
<blockquote>
<p><strong>Important remarks</strong>:</p>
<ul>
<li>Monad are not necessarily about effects! There are a lot of <em>pure</em> monads.</li>
<li>Monad are more about sequencing</li>
</ul>
</blockquote>
<p>In Haskell, <code>Monad</code> is a type class. To be an instance of this type class, you must provide the functions <code>(&gt;&gt;=)</code> and <code>return</code>. The function <code>(&gt;&gt;)</code> is derived from <code>(&gt;&gt;=)</code>. Here is how the type class <code>Monad</code> is declared (basically):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Monad</span> m  <span class="kw">where</span>
<span class="ot">  (&gt;&gt;=) ::</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b
<span class="ot">  return ::</span> a <span class="ot">-&gt;</span> m a

<span class="ot">  (&gt;&gt;) ::</span> m a <span class="ot">-&gt;</span> m b <span class="ot">-&gt;</span> m b
  f <span class="fu">&gt;&gt;</span> g <span class="fu">=</span> f <span class="fu">&gt;&gt;=</span> \_ <span class="ot">-&gt;</span> g

  <span class="co">-- You should generally safely ignore this function</span>
  <span class="co">-- which I believe exists for historical reasons</span>
<span class="ot">  fail ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m a
  fail <span class="fu">=</span> error</code></pre>
<blockquote>
<p>Remarks:</p>
<ul>
<li>the keyword <code>class</code> is not your friend. A Haskell class is <em>not</em> a class of the kind you will find in object-oriented programming. A Haskell class has a lot of similarities with Java interfaces. A better word would have been <code>typeclass</code>, since that means a set of types. For a type to belong to a class, all functions of the class must be provided for this type.</li>
<li>In this particular example of type class, the type <code>m</code> must be a type that takes an argument. for example <code>IO a</code>, but also <code>Maybe a</code>, <code>[a]</code>, etc…</li>
<li>To be a useful monad, your function must obey some rules. If your construction does not obey these rules strange things might happens:</li>
</ul>
<p><sub>~</sub> return a &gt;&gt;= k == k a m &gt;&gt;= return == m m &gt;&gt;= (-&gt; k x &gt;&gt;= h) == (m &gt;&gt;= k) &gt;&gt;= h <sub>~</sub></p>
</blockquote>
<h4 id="maybe-monad">
Maybe is a monad
</h4>

<p>There are a lot of different types that are instances of <code>Monad</code>. One of the easiest to describe is <code>Maybe</code>. If you have a sequence of <code>Maybe</code> values, you can use monads to manipulate them. It is particularly useful to remove very deep <code>if..then..else..</code> constructions.</p>
<p>Imagine a complex bank operation. You are eligible to gain about 700€ only if you can afford to follow a list of operations without your balance dipping below zero.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">deposit  value account <span class="fu">=</span> account <span class="fu">+</span> value
withdraw value account <span class="fu">=</span> account <span class="fu">-</span> value

<span class="ot">eligible ::</span> (<span class="dt">Num</span> a,<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>
eligible account <span class="fu">=</span>
  <span class="kw">let</span> account1 <span class="fu">=</span> deposit <span class="dv">100</span> account <span class="kw">in</span>
    <span class="kw">if</span> (account1 <span class="fu">&lt;</span> <span class="dv">0</span>)
    <span class="kw">then</span> <span class="dt">False</span>
    <span class="kw">else</span>
      <span class="kw">let</span> account2 <span class="fu">=</span> withdraw <span class="dv">200</span> account1 <span class="kw">in</span>
      <span class="kw">if</span> (account2 <span class="fu">&lt;</span> <span class="dv">0</span>)
      <span class="kw">then</span> <span class="dt">False</span>
      <span class="kw">else</span>
        <span class="kw">let</span> account3 <span class="fu">=</span> deposit <span class="dv">100</span> account2 <span class="kw">in</span>
        <span class="kw">if</span> (account3 <span class="fu">&lt;</span> <span class="dv">0</span>)
        <span class="kw">then</span> <span class="dt">False</span>
        <span class="kw">else</span>
          <span class="kw">let</span> account4 <span class="fu">=</span> withdraw <span class="dv">300</span> account3 <span class="kw">in</span>
          <span class="kw">if</span> (account4 <span class="fu">&lt;</span> <span class="dv">0</span>)
          <span class="kw">then</span> <span class="dt">False</span>
          <span class="kw">else</span>
            <span class="kw">let</span> account5 <span class="fu">=</span> deposit <span class="dv">1000</span> account4 <span class="kw">in</span>
            <span class="kw">if</span> (account5 <span class="fu">&lt;</span> <span class="dv">0</span>)
            <span class="kw">then</span> <span class="dt">False</span>
            <span class="kw">else</span>
              <span class="dt">True</span>

main <span class="fu">=</span> <span class="kw">do</span>
  print <span class="fu">$</span> eligible <span class="dv">300</span> <span class="co">-- True</span>
  print <span class="fu">$</span> eligible <span class="dv">299</span> <span class="co">-- False</span></code></pre>
</div>
<p><a href="code/03_Hell/02_Monads/10_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>10_Monads.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Hell/02_Monads/11_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>11_Monads.lhs</strong></a></p>
<p>Now, let’s make it better using Maybe and the fact that it is a Monad</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">deposit ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
deposit value account <span class="fu">=</span> <span class="dt">Just</span> (account <span class="fu">+</span> value)

<span class="ot">withdraw ::</span> (<span class="dt">Num</span> a,<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
withdraw value account <span class="fu">=</span> <span class="kw">if</span> (account <span class="fu">&lt;</span> value) 
                         <span class="kw">then</span> <span class="dt">Nothing</span> 
                         <span class="kw">else</span> <span class="dt">Just</span> (account <span class="fu">-</span> value)

<span class="ot">eligible ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Bool</span>
eligible account <span class="fu">=</span> <span class="kw">do</span>
  account1 <span class="ot">&lt;-</span> deposit <span class="dv">100</span> account 
  account2 <span class="ot">&lt;-</span> withdraw <span class="dv">200</span> account1 
  account3 <span class="ot">&lt;-</span> deposit <span class="dv">100</span> account2 
  account4 <span class="ot">&lt;-</span> withdraw <span class="dv">300</span> account3 
  account5 <span class="ot">&lt;-</span> deposit <span class="dv">1000</span> account4
  <span class="dt">Just</span> <span class="dt">True</span>

main <span class="fu">=</span> <span class="kw">do</span>
  print <span class="fu">$</span> eligible <span class="dv">300</span> <span class="co">-- Just True</span>
  print <span class="fu">$</span> eligible <span class="dv">299</span> <span class="co">-- Nothing</span></code></pre>
</div>
<p><a href="code/03_Hell/02_Monads/11_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>11_Monads.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Hell/02_Monads/12_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>12_Monads.lhs</strong></a></p>
<p>Not bad, but we can make it even better:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">deposit ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
deposit value account <span class="fu">=</span> <span class="dt">Just</span> (account <span class="fu">+</span> value)

<span class="ot">withdraw ::</span> (<span class="dt">Num</span> a,<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
withdraw value account <span class="fu">=</span> <span class="kw">if</span> (account <span class="fu">&lt;</span> value) 
                         <span class="kw">then</span> <span class="dt">Nothing</span> 
                         <span class="kw">else</span> <span class="dt">Just</span> (account <span class="fu">-</span> value)

<span class="ot">eligible ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Bool</span>
eligible account <span class="fu">=</span>
  deposit <span class="dv">100</span> account <span class="fu">&gt;&gt;=</span>
  withdraw <span class="dv">200</span> <span class="fu">&gt;&gt;=</span>
  deposit <span class="dv">100</span>  <span class="fu">&gt;&gt;=</span>
  withdraw <span class="dv">300</span> <span class="fu">&gt;&gt;=</span>
  deposit <span class="dv">1000</span> <span class="fu">&gt;&gt;</span>
  return <span class="dt">True</span>

main <span class="fu">=</span> <span class="kw">do</span>
  print <span class="fu">$</span> eligible <span class="dv">300</span> <span class="co">-- Just True</span>
  print <span class="fu">$</span> eligible <span class="dv">299</span> <span class="co">-- Nothing</span></code></pre>
</div>
<p>We have proven that Monads are a good way to make our code more elegant. Note this idea of code organization, in particular for <code>Maybe</code> can be used in most imperative languages. In fact, this is the kind of construction we make naturally.</p>
<blockquote>
<p>An important remark:</p>
<p>The first element in the sequence being evaluated to <code>Nothing</code> will stop the complete evaluation. This means you don’t execute all lines. You get this for free, thanks to laziness.</p>
</blockquote>
<p>You could also replay these example with the definition of <code>(&gt;&gt;=)</code> for <code>Maybe</code> in mind:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">Maybe</span> <span class="kw">where</span>
<span class="ot">    (&gt;&gt;=) ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b
    <span class="dt">Nothing</span>  <span class="fu">&gt;&gt;=</span> _  <span class="fu">=</span> <span class="dt">Nothing</span>
    (<span class="dt">Just</span> x) <span class="fu">&gt;&gt;=</span> f  <span class="fu">=</span> f x

    return x <span class="fu">=</span> <span class="dt">Just</span> x</code></pre>
<p>The <code>Maybe</code> monad proved to be useful while being a very simple example. We saw the utility of the <code>IO</code> monad. But now for a cooler example, lists.</p>
<p><a href="code/03_Hell/02_Monads/12_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>12_Monads.lhs</strong> </a></p>
<hr/>
<p><a href="code/03_Hell/02_Monads/13_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>13_Monads.lhs</strong></a></p>
<h4 id="the-list-monad">
The list monad
</h4>

<div>
<img src="/Scratch/img/blog/Haskell-the-Hard-Way/golconde.jpg" alt="Golconde de Magritte"/>
</div>

<p>The list monad helps us to simulate non-deterministic computations. Here we go:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Control.Monad (guard)

allCases <span class="fu">=</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">10</span>]

<span class="ot">resolve ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>,<span class="dt">Int</span>)]
resolve <span class="fu">=</span> <span class="kw">do</span>
              x <span class="ot">&lt;-</span> allCases
              y <span class="ot">&lt;-</span> allCases
              z <span class="ot">&lt;-</span> allCases
              guard <span class="fu">$</span> <span class="dv">4</span><span class="fu">*</span>x <span class="fu">+</span> <span class="dv">2</span><span class="fu">*</span>y <span class="fu">&lt;</span> z
              return (x,y,z)

main <span class="fu">=</span> <span class="kw">do</span>
  print resolve</code></pre>
</div>
<p>MA. GIC.&nbsp;:</p>
<pre><code>[(1,1,7),(1,1,8),(1,1,9),(1,1,10),(1,2,9),(1,2,10)]</code></pre>
<p>For the list monad, there is also this syntactic sugar:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">  print <span class="fu">$</span> [ (x,y,z) <span class="fu">|</span> x <span class="ot">&lt;-</span> allCases,
                      y <span class="ot">&lt;-</span> allCases,
                      z <span class="ot">&lt;-</span> allCases,
                      <span class="dv">4</span><span class="fu">*</span>x <span class="fu">+</span> <span class="dv">2</span><span class="fu">*</span>y <span class="fu">&lt;</span> z ]</code></pre>
</div>
<p>I won’t list all the monads, but there are many of them. Using monads simplifies the manipulation of several notions in pure languages. In particular, monads are very useful for:</p>
<ul>
<li>IO,</li>
<li>non-deterministic computation,</li>
<li>generating pseudo random numbers,</li>
<li>keeping configuration state,</li>
<li>writing state,</li>
<li>…</li>
</ul>
<p>If you have followed me until here, then you’ve done it! You know monads<sup><a href="#fn8" class="footnoteRef" id="fnref8">8</a></sup>!</p>
<p><a href="code/03_Hell/02_Monads/13_Monads.lhs" class="cut">03_Hell/02_Monads/<strong>13_Monads.lhs</strong> </a></p>
<h2 id="appendix">
Appendix
</h2>

<p>This section is not so much about learning Haskell. It is just here to discuss some details further.</p>
<hr/>
<p><a href="code/04_Appendice/01_More_on_infinite_trees/10_Infinite_Trees.lhs" class="cut">04_Appendice/01_More_on_infinite_trees/<strong>10_Infinite_Trees.lhs</strong></a></p>
<h3 id="more-on-infinite-tree">
More on Infinite Tree
</h3>

<p>In the section <a href="#infinite-structures">Infinite Structures</a> we saw some simple constructions. Unfortunately we removed two properties from our tree:</p>
<ol style="list-style-type: decimal">
<li>no duplicate node value</li>
<li>well ordered tree</li>
</ol>
<p>In this section we will try to keep the first property. Concerning the second one, we must relax it but we’ll discuss how to keep it as much as possible.</p>
<div style="display:none">

<p>This code is mostly the same as the one in the <a href="#trees">tree section</a>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Data.List
<span class="kw">data</span> <span class="dt">BinTree</span> a <span class="fu">=</span> <span class="dt">Empty</span> 
                 <span class="fu">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a) 
                  <span class="kw">deriving</span> (<span class="dt">Eq</span>,<span class="dt">Ord</span>)

<span class="co">-- declare BinTree a to be an instance of Show</span>
<span class="kw">instance</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">BinTree</span> a) <span class="kw">where</span>
  <span class="co">-- will start by a &#39;&lt;&#39; before the root</span>
  <span class="co">-- and put a : a begining of line</span>
  show t <span class="fu">=</span> <span class="st">&quot;&lt; &quot;</span> <span class="fu">++</span> replace <span class="ch">&#39;\n&#39;</span> <span class="st">&quot;\n: &quot;</span> (treeshow <span class="st">&quot;&quot;</span> t)
    <span class="kw">where</span>
    treeshow pref <span class="dt">Empty</span> <span class="fu">=</span> <span class="st">&quot;&quot;</span>
    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> <span class="dt">Empty</span>) <span class="fu">=</span> 
                  (pshow pref x)

    treeshow pref (<span class="dt">Node</span> x left <span class="dt">Empty</span>) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> left)

    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> right) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    treeshow pref (<span class="dt">Node</span> x left right) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;|--&quot;</span> <span class="st">&quot;|  &quot;</span> left) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    <span class="co">-- show a tree using some prefixes to make it nice</span>
    showSon pref before next t <span class="fu">=</span> 
                  pref <span class="fu">++</span> before <span class="fu">++</span> treeshow (pref <span class="fu">++</span> next) t

    <span class="co">-- pshow replace &quot;\n&quot; by &quot;\n&quot;++pref</span>
    pshow pref x <span class="fu">=</span> replace <span class="ch">&#39;\n&#39;</span> (<span class="st">&quot;\n&quot;</span><span class="fu">++</span>pref) (show x)

    <span class="co">-- replace on char by another string</span>
    replace c new string <span class="fu">=</span>
      concatMap (change c new) string
      <span class="kw">where</span>
          change c new x 
              <span class="fu">|</span> x <span class="fu">==</span> c <span class="fu">=</span> new
              <span class="fu">|</span> otherwise <span class="fu">=</span> x<span class="fu">:</span>[] <span class="co">-- &quot;x&quot;</span></code></pre>
</div>
</div>

<p>Our first step is to create some pseudo-random number list:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">shuffle <span class="fu">=</span> map (\x <span class="ot">-&gt;</span> (x<span class="fu">*</span><span class="dv">3123</span>) <span class="ot">`mod`</span> <span class="dv">4331</span>) [<span class="dv">1</span><span class="fu">..</span>]</code></pre>
</div>
<p>Just as a reminder, here is the definition of <code>treeFromList</code></p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">treeFromList ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a
treeFromList []    <span class="fu">=</span> <span class="dt">Empty</span>
treeFromList (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="dt">Node</span> x (treeFromList (filter (<span class="fu">&lt;</span>x) xs))
                             (treeFromList (filter (<span class="fu">&gt;</span>x) xs))</code></pre>
</div>
<p>and <code>treeTakeDepth</code>:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">treeTakeDepth _ <span class="dt">Empty</span> <span class="fu">=</span> <span class="dt">Empty</span>
treeTakeDepth <span class="dv">0</span> _     <span class="fu">=</span> <span class="dt">Empty</span>
treeTakeDepth n (<span class="dt">Node</span> x left right) <span class="fu">=</span> <span class="kw">let</span>
          nl <span class="fu">=</span> treeTakeDepth (n<span class="fu">-</span><span class="dv">1</span>) left
          nr <span class="fu">=</span> treeTakeDepth (n<span class="fu">-</span><span class="dv">1</span>) right
          <span class="kw">in</span>
              <span class="dt">Node</span> x nl nr</code></pre>
</div>
<p>See the result of:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
      putStrLn <span class="st">&quot;take 10 shuffle&quot;</span>
      print <span class="fu">$</span> take <span class="dv">10</span> shuffle
      putStrLn <span class="st">&quot;\ntreeTakeDepth 4 (treeFromList shuffle)&quot;</span>
      print <span class="fu">$</span> treeTakeDepth <span class="dv">4</span> (treeFromList shuffle)</code></pre>
</div>
<pre><code>% runghc 02_Hard_Part/41_Infinites_Structures.lhs
take 10 shuffle
[3123,1915,707,3830,2622,1414,206,3329,2121,913]
treeTakeDepth 4 (treeFromList shuffle)

&lt; 3123
: |--1915
: |  |--707
: |  |  |--206
: |  |  `--1414
: |  `--2622
: |     |--2121
: |     `--2828
: `--3830
:    |--3329
:    |  |--3240
:    |  `--3535
:    `--4036
:       |--3947
:       `--4242</code></pre>
<p>Yay! It ends! Beware though, it will only work if you always have something to put into a branch.</p>
<p>For example</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">treeTakeDepth <span class="dv">4</span> (treeFromList [<span class="dv">1</span><span class="fu">..</span>]) </code></pre>
<p>will loop forever. Simply because it will try to access the head of <code>filter (&lt;1) [2..]</code>. But <code>filter</code> is not smart enought to understand that the result is the empty list.</p>
<p>Nonetheless, it is still a very cool example of what non strict programs have to offer.</p>
<p>Left as an exercise to the reader:</p>
<ul>
<li>Prove the existence of a number <code>n</code> so that <code>treeTakeDepth n (treeFromList shuffle)</code> will enter an infinite loop.</li>
<li>Find an upper bound for <code>n</code>.</li>
<li>Prove there is no <code>shuffle</code> list so that, for any depth, the program ends.</li>
</ul>
<p><a href="code/04_Appendice/01_More_on_infinite_trees/10_Infinite_Trees.lhs" class="cut">04_Appendice/01_More_on_infinite_trees/<strong>10_Infinite_Trees.lhs</strong> </a></p>
<hr/>
<p><a href="code/04_Appendice/01_More_on_infinite_trees/11_Infinite_Trees.lhs" class="cut">04_Appendice/01_More_on_infinite_trees/<strong>11_Infinite_Trees.lhs</strong></a></p>
<div style="display:none">

<p>This code is mostly the same as the preceding one.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import</span> Debug.Trace (trace)
<span class="kw">import</span> Data.List
<span class="kw">data</span> <span class="dt">BinTree</span> a <span class="fu">=</span> <span class="dt">Empty</span> 
                 <span class="fu">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a) 
                  <span class="kw">deriving</span> (<span class="dt">Eq</span>,<span class="dt">Ord</span>)</code></pre>
</div>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- declare BinTree a to be an instance of Show</span>
<span class="kw">instance</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">BinTree</span> a) <span class="kw">where</span>
  <span class="co">-- will start by a &#39;&lt;&#39; before the root</span>
  <span class="co">-- and put a : a begining of line</span>
  show t <span class="fu">=</span> <span class="st">&quot;&lt; &quot;</span> <span class="fu">++</span> replace <span class="ch">&#39;\n&#39;</span> <span class="st">&quot;\n: &quot;</span> (treeshow <span class="st">&quot;&quot;</span> t)
    <span class="kw">where</span>
    treeshow pref <span class="dt">Empty</span> <span class="fu">=</span> <span class="st">&quot;&quot;</span>
    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> <span class="dt">Empty</span>) <span class="fu">=</span> 
                  (pshow pref x)

    treeshow pref (<span class="dt">Node</span> x left <span class="dt">Empty</span>) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> left)

    treeshow pref (<span class="dt">Node</span> x <span class="dt">Empty</span> right) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    treeshow pref (<span class="dt">Node</span> x left right) <span class="fu">=</span> 
                  (pshow pref x) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;|--&quot;</span> <span class="st">&quot;|  &quot;</span> left) <span class="fu">++</span> <span class="st">&quot;\n&quot;</span> <span class="fu">++</span>
                  (showSon pref <span class="st">&quot;`--&quot;</span> <span class="st">&quot;   &quot;</span> right)

    <span class="co">-- show a tree using some prefixes to make it nice</span>
    showSon pref before next t <span class="fu">=</span> 
                  pref <span class="fu">++</span> before <span class="fu">++</span> treeshow (pref <span class="fu">++</span> next) t

    <span class="co">-- pshow replace &quot;\n&quot; by &quot;\n&quot;++pref</span>
    pshow pref x <span class="fu">=</span> replace <span class="ch">&#39;\n&#39;</span> (<span class="st">&quot;\n&quot;</span><span class="fu">++</span>pref) (<span class="st">&quot; &quot;</span> <span class="fu">++</span> show x)

    <span class="co">-- replace on char by another string</span>
    replace c new string <span class="fu">=</span>
      concatMap (change c new) string
      <span class="kw">where</span>
          change c new x 
              <span class="fu">|</span> x <span class="fu">==</span> c <span class="fu">=</span> new
              <span class="fu">|</span> otherwise <span class="fu">=</span> x<span class="fu">:</span>[] <span class="co">-- &quot;x&quot;</span>

treeTakeDepth _ <span class="dt">Empty</span> <span class="fu">=</span> <span class="dt">Empty</span>
treeTakeDepth <span class="dv">0</span> _     <span class="fu">=</span> <span class="dt">Empty</span>
treeTakeDepth n (<span class="dt">Node</span> x left right) <span class="fu">=</span> <span class="kw">let</span>
          nl <span class="fu">=</span> treeTakeDepth (n<span class="fu">-</span><span class="dv">1</span>) left
          nr <span class="fu">=</span> treeTakeDepth (n<span class="fu">-</span><span class="dv">1</span>) right
          <span class="kw">in</span>
              <span class="dt">Node</span> x nl nr</code></pre>
</div>
</div>

<p>In order to resolve these problem we will modify slightly our <code>treeFromList</code> and <code>shuffle</code> function.</p>
<p>A first problem, is the lack of infinite different number in our implementation of <code>shuffle</code>. We generated only <code>4331</code> different numbers. To resolve this we make a slightly better <code>shuffle</code> function.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">shuffle <span class="fu">=</span> map rand [<span class="dv">1</span><span class="fu">..</span>]
          <span class="kw">where</span> 
              rand x <span class="fu">=</span> ((p x) <span class="ot">`mod`</span> (x<span class="fu">+</span>c)) <span class="fu">-</span> ((x<span class="fu">+</span>c) <span class="ot">`div`</span> <span class="dv">2</span>)
              p x <span class="fu">=</span> m<span class="fu">*</span>x<span class="fu">^</span><span class="dv">2</span> <span class="fu">+</span> n<span class="fu">*</span>x <span class="fu">+</span> o <span class="co">-- some polynome</span>
              m <span class="fu">=</span> <span class="dv">3123</span>    
              n <span class="fu">=</span> <span class="dv">31</span>
              o <span class="fu">=</span> <span class="dv">7641</span>
              c <span class="fu">=</span> <span class="dv">1237</span></code></pre>
</div>
<p>This shuffle function has the property (hopefully) not to have an upper nor lower bound. But having a better shuffle list isn’t enough not to enter an infinite loop.</p>
<p>Generally, we cannot decide whether <code>filter (&lt;x) xs</code> is empty. Then to resolve this problem, I’ll authorize some error in the creation of our binary tree. This new version of code can create binary tree which don’t have the following property for some of its nodes:</p>
<blockquote>
<p>Any element of the left (resp. right) branch must all be strictly inferior (resp. superior) to the label of the root.</p>
</blockquote>
<p>Remark it will remains <em>mostly</em> an ordered binary tree. Furthermore, by construction, each node value is unique in the tree.</p>
<p>Here is our new version of <code>treeFromList</code>. We simply have replaced <code>filter</code> by <code>safefilter</code>.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">treeFromList ::</span> (<span class="dt">Ord</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a
treeFromList []    <span class="fu">=</span> <span class="dt">Empty</span>
treeFromList (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="dt">Node</span> x left right
          <span class="kw">where</span> 
              left <span class="fu">=</span> treeFromList <span class="fu">$</span> safefilter (<span class="fu">&lt;</span>x) xs
              right <span class="fu">=</span> treeFromList <span class="fu">$</span> safefilter (<span class="fu">&gt;</span>x) xs</code></pre>
</div>
<p>This new function <code>safefilter</code> is almost equivalent to <code>filter</code> but don’t enter infinite loop if the result is a finite list. If it cannot find an element for which the test is true after 10000 consecutive steps, then it considers to be the end of the search.</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">safefilter ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]
safefilter f l <span class="fu">=</span> safefilter&#39; f l nbTry
  <span class="kw">where</span>
      nbTry <span class="fu">=</span> <span class="dv">10000</span>
      safefilter&#39; _ _ <span class="dv">0</span> <span class="fu">=</span> []
      safefilter&#39; _ [] _ <span class="fu">=</span> []
      safefilter&#39; f (x<span class="fu">:</span>xs) n <span class="fu">=</span> 
                  <span class="kw">if</span> f x 
                     <span class="kw">then</span> x <span class="fu">:</span> safefilter&#39; f xs nbTry 
                     <span class="kw">else</span> safefilter&#39; f xs (n<span class="fu">-</span><span class="dv">1</span>) </code></pre>
</div>
<p>Now run the program and be happy:</p>
<div class="codehighlight">
<pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
      putStrLn <span class="st">&quot;take 10 shuffle&quot;</span>
      print <span class="fu">$</span> take <span class="dv">10</span> shuffle
      putStrLn <span class="st">&quot;\ntreeTakeDepth 8 (treeFromList shuffle)&quot;</span>
      print <span class="fu">$</span> treeTakeDepth <span class="dv">8</span> (treeFromList <span class="fu">$</span> shuffle)</code></pre>
</div>
<p>You should realize the time to print each value is different. This is because Haskell compute each value when it needs it. And in this case, this is when asked to print it on the screen.</p>
<p>Impressively enough, try to replace the depth from <code>8</code> to <code>100</code>. It will work without killing your RAM! The flow and the memory management is done naturally by Haskell.</p>
<p>Left as an exercise to the reader:</p>
<ul>
<li>Even with large constant value for <code>deep</code> and <code>nbTry</code>, it seems to work nicely. But in the worst case, it can be exponential. Create a worst case list to give as parameter to <code>treeFromList</code>.<br /> <em>hint</em>: think about (<code>[0,-1,-1,....,-1,1,-1,...,-1,1,...]</code>).</li>
<li>I first tried to implement <code>safefilter</code> as follow:
<pre>
  safefilter' f l = if filter f (take 10000 l) == []
                    then []
                    else filter f l
  </pre>
  
Explain why it doesn’t work and can enter into an infinite loop.</li>
<li>Suppose that <code>shuffle</code> is real random list with growing bounds. If you study a bit this structure, you’ll discover that with probability 1, this structure is finite. Using the following code (suppose we could use <code>safefilter'</code> directly as if was not in the where of safefilter) find a definition of <code>f</code> such that with probability <code>1</code>, treeFromList’ shuffle is infinite. And prove it. Disclaimer, this is only a conjecture.</li>
</ul>
<pre class="sourceCode haskell"><code class="sourceCode haskell">treeFromList&#39; []  n <span class="fu">=</span> <span class="dt">Empty</span>
treeFromList&#39; (x<span class="fu">:</span>xs) n <span class="fu">=</span> <span class="dt">Node</span> x left right
    <span class="kw">where</span>
        left <span class="fu">=</span> treeFromList&#39; (safefilter&#39; (<span class="fu">&lt;</span>x) xs (f n)
        right <span class="fu">=</span> treeFromList&#39; (safefilter&#39; (<span class="fu">&gt;</span>x) xs (f n)
        f <span class="fu">=</span> <span class="fu">???</span></code></pre>
<p><a href="code/04_Appendice/01_More_on_infinite_trees/11_Infinite_Trees.lhs" class="cut">04_Appendice/01_More_on_infinite_trees/<strong>11_Infinite_Trees.lhs</strong> </a></p>
<h2 id="thanks">Thanks</h2>
<p>Thanks to <a href="http://reddit.com/r/haskell"><code>/r/haskell</code></a> and <a href="http://reddit.com/r/programming"><code>/r/programming</code></a>. Your comment were most than welcome.</p>
<p>Particularly, I want to thank <a href="https://github.com/Emm">Emm</a> a thousand times for the time he spent on correcting my English. Thank you man.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Même si tous les langages récents essayent de les cacher, ils restent présents.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>I know I’m cheating. But I will talk about non-strictness later.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>For the brave, a more complete explanation of pattern matching can be found <a href="http://www.cs.auckland.ac.nz/references/haskell/haskell-intro-html/patterns.html">here</a>.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Notice that <code>squareEvenSum''</code> is more efficient that the two other versions. The order of <code>(.)</code> is important.<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p>Which itself is very similar to the javascript <code>eval</code> on a string containing JSON).<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p>There are some <em>unsafe</em> exceptions to this rule. But you shouldn’t see such use in a real application except maybe for debugging purposes.<a href="#fnref6">↩</a></p></li>
<li id="fn7"><p>For the curious the real type is <code>data IO a = IO {unIO :: State# RealWorld -&gt; (# State# RealWorld, a #)}</code>. All the <code>#</code> has to do with optimisation and I swapped the fields in my example. But this is the basic idea.<a href="#fnref7">↩</a></p></li>
<li id="fn8"><p>Well, you’ll certainly need to practice a bit to get used to them and to understand when you can use them and create your own. But you already made a big step in this direction.<a href="#fnref8">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>La typography et le Web</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Typography-and-the-Web/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Typography-and-the-Web/index.html</id>
    <published>2012-02-02T00:00:00Z</published>
    <updated>2012-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Typography-and-the-Web/first_sc_screenshot.png" alt=""/>
</div>

<div class="intro">

<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> La typography sur le web est pourrie et nous ne somme pas près de voir ce problème réparé.</p>
</div>

<p>Je suis tombé sur ce site: <a href="http://opentypography.org/">open typography</a>. Leur message principal est&nbsp;:</p>
<blockquote>
<p>«There is no reason to wait for browser development to catch up. We can all create better web typography ourselves, today.»</p>
</blockquote>
<p>ou en français&nbsp;:</p>
<blockquote>
<p>«Nous ne somme pas obligé d’attendre le développement des navigateurs. Nous pouvons créer un web avec une meilleure typographie aujourd’hui.»</p>
</blockquote>
<p>Comme quelqu’un qui a déjà essayé d’améliorer la typographie de son site web, et en particulier des <em>ligatures</em>, je crois que c’est faux.</p>
<p>J’ai déjà écrit un système automatique qui détecte et ajoute des ligatures en utilisant des caractères unicode. Cependant je n’ai jamais publié cette amélioration sur le web et voilà pourquoi&nbsp;:</p>
<p>Tout d’abord, qu’est-ce qu’un ligature ?</p>
<div>
<img src="/Scratch/img/blog/Typography-and-the-Web/ligatures.png" alt=""/>
</div>

<p>Quel est le problème des ligatures sur le web ? Le premier c’est que vous ne pouvez pas chercher les mots qui contiennent ces ligatures. Par exemple essayez de chercher le mot “first”.</p>
<ul>
<li>first ← Pas de ligature, pas de problème<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup>.</li>
<li><span class="red">ﬁ</span>r<span class="red">ﬆ </span> ← Une jolie ligature, mais introuvable avec une recherche (<code>C-f</code>).</li>
</ul>
<p>Le second problème est le rendu. Par exemple, essayer d’utiliser un charactère de ligature en petites capitales&nbsp;:</p>
<ul>
<li><sc>first</sc></li>
<li><sc><span class="red">ﬁ</span>r<span class="red">ﬆ</span></sc></li>
</ul>
<p>Voici une capture d’écran pour que vous voyez ce que je vois&nbsp;:</p>
<div>
<img src="/Scratch/img/blog/Typography-and-the-Web/first_sc_screenshot.png" alt=""/>
</div>

<p>Le navigateur est incapable de comprendre que le caractère de ligature “<span class="red">ﬁ</span>” doit être rendu comme <sc>fi</sc> lorsqu’il est en petites capitales. Et une part du problème est que l’on peut décider d’écrire en petite majuscule dans le <span class="sc">css</span>.</p>
<p>Comment par exemple utiliser un charactère de ligature unicode sur un site qui possède différents rendus via différentes <span class="sc">css</span> ?</p>
<p>Comparons à <span style="text-transform: uppercase">L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span></p>
<div>
<img src="/Scratch/img/blog/Typography-and-the-Web/first_latex_screenshot.png" alt=""/>
</div>

<p>Si vous faites attention au détail, vous constaterez que le premier “first” contient une ligature. Bien entendu la deuxième ligne est affichée correctement. Le code que j’ai utilisé pour avoir ce rendu est simplement&nbsp;:</p>
<pre class="sourceCode latex"><code class="sourceCode latex">\item first
\item {\sc first}</code></pre>
<p><span style="text-transform: uppercase">L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span> a été suffisamment intelligent pour créer les ligatures si nécessaire.</p>
<p>La ligature “<span class="red">ﬆ</span>” est rare et n’est pas rendu par défaut par <span style="text-transform: uppercase">L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span>. Si vous voulez voir des ligatures rares, vous pouvez utiliser <span style="text-transform: uppercase">X<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">Ǝ</sub>L<sup style="vertical-align: 0.15em; margin-left: -0.36em; margin-right: -0.15em; font-size: .85em">a</sup>T<sub style="vertical-align: -0.5ex; margin-left: -0.1667em; margin-right: -0.125em; font-size: 1em">e</sub>X</span>:</p>
<div>
<img src="/Scratch/img/blog/Typography-and-the-Web/xelatex_ligatures.jpg" alt="XeLaTeX ligatures"/>
</div>

<p>J’ai copié cette image de l’excellent article de <a href="http://nitens.org/taraborelli/latex#rare">Dario Taraborelli</a>.</p>
<p>Clairement il sera difficile aux navigateurs de corriger ces problèmes. Imaginez le nombre de petites exceptions.</p>
<ul>
<li>Le texte est en petites capitales, je ne dois pas utiliser de ligatures.</li>
<li>Le mot courant contient un caractère de ligature, je ne dois pas chercher d’autre ligature dans ce mot.</li>
<li>La fonte n’a pas défini de caractère unicode pour la ligature, je ne dois pas l’utiliser.</li>
<li>Une commande javascript a modifé le CSS, je dois vérifier si je dois remplacer les ligatures par les deux caractères.</li>
<li>etc…</li>
</ul>
<p>Dans tous les cas, si quelqu’un possède une solution je suis preneur !</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>En réalité, vous devriez pouvoir voir une ligature. Maintenant j’utilise : <code>text-rendering: optimizelegibility</code>. Le rendu est correct parce que j’utilise une fonte correct, à savoir Computer Modern de Donald Knuth.<a href="#fnref1">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>Haskell web programming</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Yesod-tutorial-for-newbies/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Yesod-tutorial-for-newbies/index.html</id>
    <published>2012-01-15T00:00:00Z</published>
    <updated>2012-01-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Yesod-tutorial-for-newbies/flying_neo.jpg" alt="Neo Flying at warp speed"/>
</div>

<div class="intro">

<p><em>update</em>: updated for yesod 1.2</p>
<p><span class="sc"><abbr title="Too long; didn't read">tl;dr</abbr>: </span> A simple yesod tutorial. Yesod is a Haskell web framework. You shouldn’t need to know Haskell.</p>
</div>

<p>Why Haskell?</p>
<div>
<img src="/Scratch/img/blog/Yesod-tutorial-for-newbies/haskell-benchmark.png" alt="Impressive Haskell Benchmark"/>
</div>

<p>Its efficiency (see <a href="http://snapframework.com/blog/2010/11/17/snap-0.3-benchmarks">Snap Benchmark</a> <em>&amp;</em> <a href="http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks">Warp Benchmark</a><sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup>). Haskell is an order of magnitude faster than interpreted languages like <a href="http://shootout.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=ghc&amp;lang2=yarv">Ruby</a> and <a href="http://shootout.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=ghc&amp;lang2=python3">Python</a><sup><a href="#fn2" class="footnoteRef" id="fnref2">2</a></sup>.</p>
<p>Haskell is a high level language and make it harder to shoot you in the foot than <code>C</code>, <code>C++</code> or <code>Java</code> for example. One of the best property of Haskell being:</p>
<blockquote>
<p>“If your program compile it will be very close to what the programmer intended”.</p>
</blockquote>
<p>Haskell web frameworks handle parallel tasks perfectly. For example even better than node.js<sup><a href="#fn3" class="footnoteRef" id="fnref3">3</a></sup>.</p>
<div>
<img src="/Scratch/img/blog/Yesod-tutorial-for-newbies/thousands_smiths.jpg" alt="Thousands of Agent Smith" class="left"/>
</div>

<p>From the pure technical point of view, Haskell seems to be the perfect web development tool. Weaknesses of Haskell certainly won’t be technical:</p>
<ul>
<li>Hard to grasp Haskell</li>
<li>Hard to find a Haskell programmer</li>
<li>The Haskell community is smaller than the community for <code>/.*/</code></li>
<li>There is not yet an <a href="http://heroku.com">heroku</a> for Haskell. In fact, I use heroku to host my websites but this isn’t straightforward (see the <a href="https://github.com/yesodweb/yesod/wiki/Deploying-Yesod-Apps-to-Heroku">how to</a>).</li>
</ul>
<p>I won’t say these are not important drawbacks. But, with Haskell your web application will have both properties to absorb an impressive number of parallel requests securely and to adapt to change.</p>
<p>Actually there are three main Haskell web frameworks:</p>
<ol style="list-style-type: decimal">
<li><a href="http://happstack.com">Happstack</a></li>
<li><a href="http://snapframework.com">Snap</a></li>
<li><a href="http://yesodweb.com">Yesod</a></li>
</ol>
<p>I don’t think there is a real winner between these three framework. The choice I made for yesod is highly subjective. I just lurked a bit and tried some tutorials. I had the feeling yesod make a better job at helping newcomers. Furthermore, apparently the yesod team seems the most active. Of course I might be wrong since it is a matter of feeling.</p>
<div>
<img src="/Scratch/img/blog/Yesod-tutorial-for-newbies/owl_draw.png" alt="1. Draw some circles. 2. Draw the rest of the fucking owl"/>
</div>

<p>Why did I write this article? The yesod documentation and particularly the book are excellent. But I missed an intermediate tutorial. This tutorial won’t explain all details. I tried to give a step by step of how to start from a five minute tutorial to an almost production ready architecture. Furthermore explaining something to others is a great way to learn. If you are used to Haskell and Yesod, this tutorial won’t learn you much. If you are completely new to Haskell and Yesod it might hopefully helps you. Also if you find yourself too confused by the syntax, it might helps to read this <a href="http://blog.ezyang.com/2011/11/how-to-read-haskell/">article</a></p>
<p>During this tutorial you’ll install, initialize and configure your first yesod project. Then there is a very minimal 5 minutes yesod tutorial to heat up and verify the awesomeness of yesod. Then we will clean up the 5 minutes tutorial to use some “best practices”. Finally there will be a more standard real world example; a minimal blog system.</p>
<h2 id="before-the-real-start">Before the real start</h2>
<h3 id="install">Install</h3>
<p>The recommended way to install <a href="http://www.haskell.org">Haskell</a> is to download the <a href="http://www.haskell.org/platform">Haskell Platform</a>.</p>
<p>Once done, you need to install yesod. Open a terminal session and do:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">~</span> <span class="kw">cabal</span> update
<span class="kw">~</span> <span class="kw">cabal</span> install yesod yesod-bin cabal-dev</code></pre>
<p>There are few steps but it should take some time to finish.</p>
<h3 id="initialize">Initialize</h3>
<p>You are now ready to initialize your first yesod project. Open a terminal and type:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">~</span> <span class="kw">yesod</span> init</code></pre>
<p>Enter your name, choose <code>yosog</code> for the project name and enter <code>Yosog</code> for the name of the Foundation. Finally choose <code>sqlite</code>. Now, start the development cycle:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">~</span> <span class="kw">cd</span> yosog
<span class="kw">~</span> <span class="kw">cabal-dev</span> install <span class="kw">&amp;&amp;</span> <span class="kw">yesod</span> --dev devel</code></pre>
<p>This will compile the entire project. Be patient it could take a while the first time. Once finished a server is launched and you could visit it by clicking this link:</p>
<p><a href="http://localhost:3000"><code>http://localhost:3000</code></a></p>
<p>Congratulation! Yesod works!</p>
<blockquote>

<p>Note: if something is messed up use the following command line inside the project directory.</p>
<pre class="sourceCode bash"><code class="sourceCode bash">\<span class="kw">rm</span> -rf dist/* <span class="kw">;</span> <span class="kw">cabal-dev</span> install <span class="kw">&amp;&amp;</span> <span class="kw">yesod</span> --dev devel</code></pre>
</blockquote>

<p>Until the end of the tutorial, use another terminal and let this one open in a corner to see what occurs.</p>
<h3 id="configure-git">Configure git</h3>
<blockquote>
<p>Of course this step is not mandatory for the tutorial but it is a good practice.</p>
</blockquote>
<p>Fortunately, there is already a <code>.gitignore</code> file into the <code>yosog</code> folder. You just have to initialize your git repository:</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">~</span> <span class="kw">git</span> init .
<span class="kw">~</span> <span class="kw">git</span> add .
<span class="kw">~</span> <span class="kw">git</span> commit -a -m <span class="st">&quot;Initial yesod commit&quot;</span></code></pre>
<p>We are almost ready to start.</p>
<h3 id="some-last-minute-words">Some last minute words</h3>
<p>Up until here, we have a directory containing a bunch of files and a local web server listening the port 3000. If we modify a file inside this directory, yesod should try to recompile as fast as possible the site. Instead of explaining the role of every file, let’s focus only on the important files/directories for this tutorial:</p>
<ol style="list-style-type: decimal">
<li><code>config/routes</code></li>
<li><code>Handler/</code></li>
<li><code>templates/</code></li>
<li><code>config/models</code></li>
</ol>
<p>Obviously:</p>
<table><tr><td> 
<code>config/routes</code>
</td><td>
is where you’ll configure the map <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> → Code.
</td></tr><tr><td> 
<code>Handler/</code>
</td><td> 
contains the files that will contain the code called when a <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> is accessed.
</td></tr><tr><td> 
<code>templates/</code>
</td><td> 
contains <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span>, js and <span class="sc">css</span> templates.
</td></tr><tr><td> 
<code>config/models</code>
</td><td> 
is where you’ll configure the persistent objects (database tables).
</td></tr></table>

<p>During this tutorial we’ll modify other files as well, but we won’t explore them in detail.</p>
<p>Also note, shell commands are executed in the root directory of your project instead specified otherwise.</p>
<p>We are now ready to start!</p>
<h2 id="echo">Echo</h2>
<p>To verify the quality of the security of the yesod framework, let’s make a minimal echo application.</p>
<blockquote>
<p>Goal:</p>
<p>Make a server that when accessed <code>/echo/[some text]</code> should return a web page containing “some text” inside an <code>h1</code> bloc.</p>
</blockquote>
<pre class="no-highlight"><code>~/Sites/yosog $ <span class="highlight">yesod add-handler</span>
Name of route (without trailing R): <span class="highlight">Echo</span>
Enter route pattern (ex: /entry/#EntryId): <span class="highlight">/echo/#String</span>
Enter space-separated list of methods (ex: GET POST): <span class="highlight">GET</span></code></pre>
<p>Almost all work is done for us. The <code>add-handler</code> do the following:</p>
<p>Update the <code>config/route</code> file by appending:</p>
<pre><code>/echo/#String EchoR GET</code></pre>
<p>This line contains three elements: the <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> pattern, a handler name, an <span class="sc"><abbr title="HyperText Transfer Protocol">http</abbr></span> method.</p>
<ul>
<li>create a <code>Handler/Echo.hs</code> file</li>
<li>import <code>Handler.Echo</code> in the main <code>Application.hs</code> file</li>
<li>declare <code>Handler.Echo</code> in the cabal file for building the application</li>
</ul>
<p>Now try to go to <a href="http://localhost:3000/echo/foo"><code>localhost:3000/echo/foo</code></a>. You should get a message explaining <code>getEchoR</code> is not yet implemented.</p>
<p>So let’s take a look at <code>Handler/Echo.hs</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Handler.Echo</span> <span class="kw">where</span>

<span class="kw">import</span> Import

<span class="ot">getEchoR ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getEchoR <span class="fu">=</span> error <span class="st">&quot;Not yet implemented: getEchoR&quot;</span></code></pre>
<p>This should be straightforward. Now we changes it by:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Handler.Echo</span> <span class="kw">where</span>

<span class="kw">import</span> Import

<span class="ot">getEchoR ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getEchoR theText <span class="fu">=</span> defaultLayout [whamlet<span class="fu">|&lt;</span>h1<span class="fu">&gt;#</span>{theText}<span class="fu">|</span>]</code></pre>
<p>Don’t worry if you find all of this a bit cryptic. In short it just declare a function named <code>getEchoR</code> with one argument (<code>theText</code>) of type <code>String</code>. When this function is called, it return a <code>Handler RepHtml</code> whatever it is. But mainly this will encapsulate our expected result inside an <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> text.</p>
<p>After saving the file, you should see yesod recompile the application. When the compilation is finished you’ll see the message: <code>Starting devel application</code>.</p>
<p>Now you can visit: <a href="http://localhost:3000/echo/Yesod%20rocks!"><code>http://localhost:3000/echo/Yesod%20rocks!</code></a></p>
<p>TADA! It works!</p>
<h3 id="bulletproof">Bulletproof?</h3>
<div>
<img src="/Scratch/img/blog/Yesod-tutorial-for-newbies/neo_bullet_proof.jpg" alt="Neo stops a myriad of bullets"/>
</div>

<p>Even this extremely minimal web application has some impressive properties. For exemple, imagine an attacker entering this <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span>:</p>
<div class="small">

<p><a href="http://localhost:3000/echo/I&#39;m%20%3Cscript%3Ealert(%22Bad!%22);%3C%2Fscript%3E"><code>http://localhost:3000/echo/I'm &lt;script&gt;alert(\&quot;Bad!\&quot;);&lt;/script&gt;</code></a></p>
</div>

<p>You can click on it to test it.</p>
<p>The special characters are protected for us. A malicious user could not hide some bad script inside.</p>
<p>This behavior is a direct consequence of <em>type safety</em>. The <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> string is put inside a <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> type. Then the interesting part in the <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> is put inside a String type. To pass from <span class="sc"><abbr title="Uniform Ressource Locator">url</abbr></span> type to String type some transformation are made. For example, replace all “<code>%20</code>” by space characters. Then to show the String inside an <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> document, the string is put inside an <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> type. Some transformations occurs like replace “<code>&lt;</code>” by “<code>&amp;lt;</code>”. Thanks to yesod, this tedious job is done for us.</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="st">&quot;http://localhost:3000/echo/some%20text%3Ca%3E&quot;</span> :: <span class="kw">URL</span>
                    ↓
              <span class="st">&quot;some text&lt;a&gt;&quot;</span>                    :: <span class="kw">String</span>
                    ↓
          <span class="st">&quot;some text &amp;amp;lt;a&amp;amp;gt;&quot;</span>         :: <span class="kw">Html</span></code></pre>
<p>Yesod is not only fast, it helps us to remain secure. It protects us from many common errors in other paradigms. Yes, I am looking at you PHP!</p>
<h3 id="cleaning-up">Cleaning up</h3>
<p>Even this very minimal example should be enhanced. We will clean up many details:</p>
<ul>
<li>Use <code>Data.Text</code> instead of <code>String</code></li>
<li>Put our “views”<sup><a href="#fn4" class="footnoteRef" id="fnref4">4</a></sup> inside the <code>template</code> directory</li>
</ul>
<h4 id="data.text"><code>Data.Text</code></h4>
<p>It is a good practice to use <code>Data.Text</code> instead of <code>String</code>.</p>
<p>To declare it, add this import directive to <code>Foundation.hs</code> (just after the last one):</p>
<pre class="sourceCode diff"><code class="sourceCode diff">import Data.Text</code></pre>
<p>We have to modify <code>config/routes</code> and our handler accordingly. Replace <code>#String</code> by <code>#Text</code> in <code>config/routes</code>:</p>
<pre>
/echo/<span class="highlight">#Text</span> EchoR GET
</pre>

<p>And do the same in <code>Handler/Echo.hs</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Handler.Echo</span> <span class="kw">where</span>

<span class="kw">import</span> Import

<span class="ot">getEchoR ::</span> <span class="highlight"><span class="dt">Text</span></span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getEchoR theText <span class="fu">=</span> defaultLayout [whamlet<span class="fu">|&lt;</span>h1<span class="fu">&gt;#</span>{theText}<span class="fu">|</span>]</code></pre>
<h4 id="use-templates">Use templates</h4>
<p>Some <span class="sc"><abbr title="HyperText Markup Language">html</abbr></span> (more precisely hamlet) is written directly inside our handler. We should put this part inside another file. Create the new file <code>templates/echo.hamlet</code> containing:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&lt;</span>h1<span class="fu">&gt;</span> <span class="fu">#</span>{theText}</code></pre>
<p>and modify the handler <code>Handler/Echo.hs</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Handler.Echo</span> <span class="kw">where</span>

<span class="kw">import</span> Import

<span class="ot">getEchoR ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getEchoR theText <span class="fu">=</span> defaultLayout <span class="highlight"><span class="fu">$</span>(widgetFile <span class="st">&quot;echo&quot;</span>)</span></code></pre>
<p>At this point, our web application is nicely structured. We use <code>Data.Text</code> and our views are in templates. It is the time to make a slightly more complex example.</p>
<h2 id="mirror">Mirror</h2>
<div>
<img src="/Scratch/img/blog/Yesod-tutorial-for-newbies/mirror.jpg" alt="Neo touching a mirror" class="left"/>
</div>

<p>Let’s make another minimal application. You should see a form containing a text field and a validation button. When you enter some text (for example “Jormungad”) and validate, the next page present you the content and its reverse appended to it. In our example it should return “JormungaddagnumroJ”.</p>
<p>First, add a new handler:</p>
<pre class="no-highlight"><code> ~/Sites/yosog (master) $ <span class="highlight">yesod add-handler</span>
Name of route (without trailing R): <span class="highlight">Mirror</span>
Enter route pattern (ex: /entry/#EntryId): <span class="highlight">/mirror</span>
Enter space-separated list of methods (ex: GET POST): <span class="highlight">GET POST</span></code></pre>
<p>This time the path <code>/mirror</code> will accept GET and POST requests. Update the corresponding new Handler file (<code>Handler/Mirror.hs</code>):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Handler.Mirror</span> <span class="kw">where</span>

<span class="kw">import</span> Import
<span class="kw">import</span> <span class="kw">qualified</span> Data.Text <span class="kw">as</span> T

<span class="ot">getMirrorR ::</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getMirrorR <span class="fu">=</span> defaultLayout <span class="fu">$</span>(widgetFile <span class="st">&quot;mirror&quot;</span>)

<span class="ot">postMirrorR ::</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
postMirrorR <span class="fu">=</span>  <span class="kw">do</span>
        postedText <span class="ot">&lt;-</span> runInputPost <span class="fu">$</span> ireq textField <span class="st">&quot;content&quot;</span>
        defaultLayout <span class="fu">$</span>(widgetFile <span class="st">&quot;posted&quot;</span>)</code></pre>
<p>We will need to use the <code>reverse</code> function provided by <code>Data.Text</code> which explain the additional import.</p>
<p>The only new thing here is the line that get the POST parameter named “content”. If you want to know more detail about it and form in general you can take look at <a href="http://www.yesodweb.com/book/forms">the yesod book</a>.</p>
<p>Create the two corresponding templates (<code>templates/mirror.hamlet</code> and <code>templates/posted.hamlet</code>):</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;h1&gt;</span> Enter your text
<span class="kw">&lt;form</span><span class="ot"> method=</span><span class="st">post</span><span class="ot"> action=</span><span class="st">@{MirrorR}</span><span class="kw">&gt;</span>
    <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">text</span><span class="ot"> name=</span><span class="st">content</span><span class="kw">&gt;</span>
    <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">submit</span><span class="kw">&gt;</span></code></pre>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;h1&gt;</span>You&#39;ve just posted
<span class="kw">&lt;p&gt;</span>#{postedText}#{T.reverse postedText}
<span class="kw">&lt;hr&gt;</span>
<span class="kw">&lt;p&gt;&lt;a</span><span class="ot"> href=</span><span class="st">@{MirrorR}</span><span class="kw">&gt;</span>Get back</code></pre>
<p>And that is all. This time, we won’t need to clean up. We may have used another way to generate the form but we’ll see this in the next section.</p>
<p>Just try it by <a href="http://localhost:3000/mirror">clicking here</a>.</p>
<p>Also you can try to enter strange values (like <code>&lt;script&gt;alert('Bad');&lt;/script&gt;</code>). Like before, your application is quite secure.</p>
<h2 id="a-blog">A Blog</h2>
<p>We saw how to retrieve <span class="sc"><abbr title="HyperText Transfer Protocol">http</abbr></span> parameters. It is the time to save things into a database.</p>
<p>This example will be very minimal:</p>
<ul>
<li><code>GET</code> on <code>/blog</code> should display the list of articles,</li>
<li><code>POST</code> on <code>/blog</code> should create a new article,</li>
<li><code>GET</code> on <code>/blog/&lt;article id&gt;</code> should display the content of the article.</li>
</ul>
<p>As before add some handlers</p>
<pre><code>~/Sites/yosog (master) $ yesod add-handler
Name of route (without trailing R): Blog
Enter route pattern (ex: /entry/#EntryId): /blog
Enter space-separated list of methods (ex: GET POST): GET POST

~/Sites/yosog (master) $ yesod add-handler
Name of route (without trailing R): Article
Enter route pattern (ex: /entry/#EntryId): /blog/#ArticleId
Enter space-separated list of methods (ex: GET POST): GET</code></pre>
<p>Then we declare another model object. Append the following content to <code>config/models</code>:</p>
<pre><code>Article
    title   Text
    content Html
    deriving</code></pre>
<p>As <code>Html</code> is not an instance of <code>Read</code>, <code>Show</code> and <code>Eq</code>, we had to add the <code>deriving</code> line. If you forget it, there will be an error.</p>
<p>After the route and the model, we write the handler. Let’s write the content of <code>Handler/Blog.hs</code>. We start by declaring the module and by importing some block necessary to handle Html in forms.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Handler.Blog</span>
    ( getBlogR
    , postBlogR
    , getArticleR
    )
<span class="kw">where</span>

<span class="kw">import</span> Import

<span class="co">-- to use Html into forms</span>
<span class="kw">import</span> Yesod.Form.Nic (YesodNic, nicHtmlField)
<span class="kw">instance</span> <span class="dt">YesodNic</span> <span class="dt">App</span></code></pre>
<p><em>Remark</em>: it is a best practice to add the YesodNic instance inside <code>Foundation.hs</code>. I put this definition here to make things easier but you should see a warning about this orphan instance. To put the include inside Foundation.hs is left as an exercice to the reader.</p>
<p><em>Hint</em>: Do not forget to put <code>YesodNic</code> and <code>nicHtmlField</code> inside the exported objects of the module.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">entryForm ::</span> <span class="dt">Form</span> <span class="dt">Article</span>
entryForm <span class="fu">=</span> renderDivs <span class="fu">$</span> <span class="dt">Article</span>
    <span class="fu">&lt;$&gt;</span> areq   textField <span class="st">&quot;Title&quot;</span> <span class="dt">Nothing</span>
    <span class="fu">&lt;*&gt;</span> areq   nicHtmlField <span class="st">&quot;Content&quot;</span> <span class="dt">Nothing</span></code></pre>
<p>This function defines a form for adding a new article. Don’t pay attention to all the syntax. If you are curious you can take a look at Applicative Functor. You just have to remember <code>areq</code> is for required form input. Its arguments being: <code>areq type label default_value</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- The view showing the list of articles</span>
<span class="ot">getBlogR ::</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getBlogR <span class="fu">=</span> <span class="kw">do</span>
    <span class="co">-- Get the list of articles inside the database.</span>
    articles <span class="ot">&lt;-</span> runDB <span class="fu">$</span> selectList [] [<span class="dt">Desc</span> <span class="dt">ArticleTitle</span>]
    <span class="co">-- We&#39;ll need the two &quot;objects&quot;: articleWidget and enctype</span>
    <span class="co">-- to construct the form (see templates/articles.hamlet).</span>
    (articleWidget, enctype) <span class="ot">&lt;-</span> generateFormPost entryForm
    defaultLayout <span class="fu">$</span> <span class="kw">do</span>
        <span class="fu">$</span>(widgetFile <span class="st">&quot;articles&quot;</span>)</code></pre>
<p>This handler should display a list of articles. We get the list from the DB and we construct the form. Just take a look at the corresponding template:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;h1&gt;</span> Articles
$if null articles
    <span class="kw">&lt;p&gt;</span> There are no articles in the blog
$else
    <span class="kw">&lt;ul&gt;</span>
        $forall Entity articleId article <span class="er">&lt;</span>- articles
            <span class="kw">&lt;li&gt;</span>
                <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">@{ArticleR</span><span class="ot"> articleId</span><span class="er">}</span> <span class="kw">&gt;</span> #{articleTitle article}
<span class="kw">&lt;hr&gt;</span>
  <span class="kw">&lt;form</span><span class="ot"> method=</span><span class="st">post</span><span class="ot"> enctype=</span><span class="st">#{enctype}</span><span class="kw">&gt;</span>
    ^{articleWidget}
    <span class="kw">&lt;div&gt;</span>
        <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">submit</span><span class="ot"> value=</span><span class="st">&quot;Post New Article&quot;</span><span class="kw">&gt;</span></code></pre>
<p>You should remark we added some logic inside the template. There is a test and a “loop”.</p>
<p>Another very interesting part is the creation of the form. The <code>articleWidget</code> was created by yesod. We have given him the right parameters (input required or optional, labels, default values). And now we have a protected form made for us. But we have to create the submit button.</p>
<p>You could take a first look by <a href="localhost:3000/blog">clicking here</a>. Of course, you could not post something yet.</p>
<p>Get back to <code>Handler/Blog.hs</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">postBlogR ::</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
postBlogR <span class="fu">=</span> <span class="kw">do</span>
    ((res,articleWidget),enctype) <span class="ot">&lt;-</span> runFormPost entryForm
    <span class="kw">case</span> res <span class="kw">of</span>
         <span class="dt">FormSuccess</span> article <span class="ot">-&gt;</span> <span class="kw">do</span>
            articleId <span class="ot">&lt;-</span> runDB <span class="fu">$</span> insert article
            setMessage <span class="fu">$</span> toHtml <span class="fu">$</span> (articleTitle article) <span class="fu">&lt;&gt;</span> <span class="st">&quot; created&quot;</span>
            redirect <span class="fu">$</span> <span class="dt">ArticleR</span> articleId
         _ <span class="ot">-&gt;</span> defaultLayout <span class="fu">$</span> <span class="kw">do</span>
                setTitle <span class="st">&quot;Please correct your entry form&quot;</span>
                <span class="fu">$</span>(widgetFile <span class="st">&quot;articleAddError&quot;</span>)</code></pre>
<p>This function should be used to create a new article. We handle the form response. If there is an error we display an error page. For example if we left some required value blank. If things goes right:</p>
<ul>
<li>we add the new article inside the DB (<code>runDB $ insert article</code>)</li>
<li>we add a message to be displayed (<code>setMessage $ ...</code>)</li>
<li>we are redirected to the article web page.</li>
</ul>
<p>Here is the content of the error Page:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&lt;</span>form method<span class="fu">=</span>post enctype<span class="fu">=#</span>{enctype}<span class="fu">&gt;</span>
    <span class="fu">^</span>{articleWidget}
    <span class="fu">&lt;</span>div<span class="fu">&gt;</span>
        <span class="fu">&lt;</span>input <span class="kw">type</span><span class="fu">=</span>submit value<span class="fu">=</span><span class="st">&quot;Post New Article&quot;</span><span class="fu">&gt;</span></code></pre>
<p>Finally we need to display an article. For this we will modify <code>Handler/Article.hs</code></p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getArticleR ::</span> <span class="dt">ArticleId</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">RepHtml</span>
getArticleR articleId <span class="fu">=</span> <span class="kw">do</span>
    article <span class="ot">&lt;-</span> runDB <span class="fu">$</span> get404 articleId
    defaultLayout <span class="fu">$</span> <span class="kw">do</span>
        setTitle <span class="fu">$</span> toHtml <span class="fu">$</span> articleTitle article
        <span class="fu">$</span>(widgetFile <span class="st">&quot;article&quot;</span>)</code></pre>
<p>The <code>get404</code> function try to do a get on the DB. If it fails it return a 404 page. The rest should be clear. Here is the content of <code>templates/article.hamlet</code>:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;h1&gt;</span> #{articleTitle article}
<span class="kw">&lt;article&gt;</span> #{articleContent article}</code></pre>
<p>The blog system is finished. Just for fun, you can try to create an article with the following content:</p>
<pre class="sourceCode html"><code class="sourceCode html">Cross Script:
<span class="er">   &lt;script&gt;alert(&quot;You loose&quot;);&lt;/script&gt;</span>

SQL injection: &quot;); DROP TABLE ARTICLE;;</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>This is the end of this tutorial. I made it very minimal.</p>
<p>If you already know Haskell and you want to go further, you should take a look at the recent <a href="http://yesodweb.com/blog/2012/01/blog-example">i18n blog tutorial</a>. It will be obvious I inspired my own tutorial on it. You’ll learn in a very straightforward way how easy it is to use authorizations, Time and internationalization.</p>
<p>If, on the other hand you don’t know Haskell. Then you shouldn’t jump directly to web programming. Haskell is a very complex and unusual language. My advice to go as fast as possible in using Haskell for web programming is:</p>
<ol style="list-style-type: decimal">
<li>Start by <a href="http://tryhaskell.org">try Haskell in your browser</a></li>
<li>Read my tutorial <a href="https://www.fpcomplete.com/school/haskell-fast-hard">Learn Haskell Fast and Hard on School of Haskell</a> or directly <a href="/Scratch/en/blog/Haskell-the-Hard-Way/">on this blog</a></li>
<li>Then read the excellent <a href="http://learnyouahaskell.com">Learn you a Haskell for Great Good</a></li>
<li>If you have difficulties in understanding concepts like monads, you should really read <a href="http://homepages.inf.ed.ac.uk/wadler/topics/monads.html">these articles</a>. For me they were enlightening.</li>
<li>If you feel confident, you should be able to follows the <a href="http://yesodweb.com/book">yesod book</a> and if you find difficult to follows the yesod book, you should read <a href="http://book.realworldhaskell.org">real world Haskell</a> first.</li>
</ol>
<p>Also, note that:</p>
<ul>
<li><a href="http://haskell.org">haskell.org</a> is full of excellent resources.</li>
<li><a href="http://www.haskell.org/hoogle/">hoogle</a> will be very useful</li>
<li>Use <a href="http://community.haskell.org/~ndm/hlint/">hlint</a> as soon as possible to get good habits.</li>
</ul>
<p>As you should see, if you don’t already know Haskell, the path is long but I guaranty you it will be very rewarding!</p>
<p><em>ps:</em> You can download the source of this yesod blog tutorial at <a href="http://github.com/yogsototh/yosog">github.com/yogsototh/yosog</a>.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>One can argue these benchmark contains many problems. But the benchmarks are just here to give an order of idea. Mainly Haskell is very fast.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Generally <em>high level</em> Haskell is slower than C, but <em>low level</em> Haskell is equivalent to C speed. It means that even if you can easily link C code with Haskell, this is not needed to reach the same speed. Furthermore writing a web service in C/C++ seems to be a very bad idea. You can take a look at a <a href="http://news.ycombinator.com/item?id=3449388">discussion on HN about this</a>.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>If you are curious, you can search about <a href="http://www.unlimitednovelty.com/2011/10/nodejs-has-jumped-shark.html">the Fibonacci node.js troll</a>. Without any tweaking, <a href="http://mathias-biilmann.net/posts/2011/10/is-haskell-the-cure">Haskell handled this problem perfectly</a>. I tested it myself using yesod instead of Snap.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>By view I mean yesod widget’s hamlet, lucius and julius files.<a href="#fnref4">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>Accroître le pouvoir des languages déficients.</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/SVG-and-m4-fractals/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/SVG-and-m4-fractals/index.html</id>
    <published>2011-10-20T00:00:00Z</published>
    <updated>2011-10-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/SVG-and-m4-fractals/main.png" alt="Yesod logo made in SVG and m4"/>
</div>

<div class="intro">

<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span> Utiliser m4 pour accroître le pouvoir d’<span class="sc">xslt</span> et d’<span class="sc">svg</span>. Example cool, les fractales.</p>
</div>

<p>Lorsqu’<span class="sc">xml</span> fût inventé beaucoup pensaient que c’était l’avenir. Passer de fichiers plat à des fichiers structurés standardisés fût un grand progrès dans beaucoup de domaines. Cerain se mirent à voir du <span class="sc">xml</span> de partout. À tel point que les les format compatibles <span class="sc">xml</span> naquirent de toute part. Non seulement comme format de fichier, mais aussi comme format pour un langage de programmation.</p>
<p>Ô joie !</p>
<p>Malheureusement, <span class="sc">xml</span> fût fabriquer pour le transfert de données. Pas du tout pour être vu ou édité directement. La triste vérité est qu’<span class="sc">xml</span> est verbeux et laid. Dans un monde parfait, nous ne devrions avoir des programmes qui s’occupent de nous afficher correctement le <span class="sc">xml</span> pour nous épargner la peine de les voir directement. Mais devinez quoi ? Notre monde n’est pas parfait. Beaucoup de programmeurs sont ainsi forcé de travailler directement avec de l’<span class="sc">xml</span>.</p>
<p><span class="sc">xml</span>, n’est pas le seul cas de format mal utilisé que je connaisse. Vous avez d’autres formats dans lesquels il serait très agréable d’ajouter des variables, des boucles, des fonctions…</p>
<p>Mais je suis là pour vous aider. Si comme moi vous détestez <span class="sc">xslt</span> ou écrire de l’<span class="sc">xml</span>. Je vais vous montrer une façon d’améliorer tout ça.</p>
<h2 id="un-exemple-avec-xslt">Un exemple avec <span class="sc">xslt</span></h2>
<p>Commençons avec le pire cas de langage <span class="sc">xml</span> que je connaisse : <span class="sc">xslt</span>. Tous les développeurs qui ont déjà dû écrire du <span class="sc">xslt</span> savent à quel point ce langage est horrible.</p>
<p>Pour réduire la “verbosité” de tels langages, il y a un moyen. <strong><code>m4</code></strong>. Oui, le préprocesseur utilisé par <code>C</code> et <code>C++</code>.</p>
<p>Voici certains exemples&nbsp;:</p>
<ul>
<li>Les variables, au lieu d’écrire <code>myvar = value</code>, voici la version <sc>xslt</sc> :</li>
</ul>
<pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;xsl:variable</span><span class="ot"> name=</span><span class="st">&quot;myvar&quot;</span><span class="ot"> select=</span><span class="st">&quot;value&quot;</span><span class="kw">/&gt;</span></code></pre>
<ul>
<li>Afficher quelquechose. Au lieu de <code>print &quot;Hello world!&quot;</code>, <sc>xslt</sc> nous offre :</li>
</ul>
<pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;xsl:text</span> 
<span class="ot">    disable-output-escaping=</span><span class="st">&quot;yes&quot;</span><span class="kw">&gt;</span><span class="bn">&lt;![CDATA[</span>Hello world!
<span class="bn">]]&gt;</span><span class="kw">&lt;/xsl:text&gt;</span></code></pre>
<ul>
<li>afficher la valeur d’une variable, au lieu de <code>print myvar</code>, nous avons droit à :</li>
</ul>
<pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;xslt:value-of</span><span class="ot"> select=</span><span class="st">&quot;myvar&quot;</span><span class="kw">/&gt;</span></code></pre>
<ul>
<li>Essayez d’imaginer à quel point il est verbeux de déclarer une fonction dans ce langage.</li>
</ul>
<h2 id="la-solution-m4-à-la-rescousse">La solution (m4 à la rescousse)</h2>
<pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;?xml</span> version=&quot;1.0&quot; standalone=&quot;yes&quot;<span class="kw">?&gt;</span> <span class="co">&lt;!-- YES its &lt;span class=&quot;sc&quot;&gt;xml&lt;/span&gt; --&gt;</span>
<span class="co">&lt;!-- ← start a comment, then write some m4 directives:</span>

<span class="co">define(`ydef&#39;,`&lt;xsl:variable name=&quot;$1&quot; select=&quot;$2&quot;/&gt;&#39;)</span>
<span class="co">define(`yprint&#39;,`&lt;xsl:text disable-output-escaping=&quot;yes&quot;&gt;&lt;![CDATA[$1]]&gt;&lt;/xsl:text&gt;&#39;)</span>
<span class="co">define(`yshow&#39;,`&lt;xsl:value-of select=&quot;$1&quot;/&gt;&#39;)</span>

<span class="co">--&gt;</span>
<span class="co">&lt;!-- Yes, &lt;span class=&quot;sc&quot;&gt;xml&lt;/span&gt; sucks to be read --&gt;</span>
<span class="kw">&lt;xsl:stylesheet</span><span class="ot"> version=</span><span class="st">&quot;1.0&quot;</span><span class="ot"> xmlns:xsl=</span><span class="st">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class="kw">&gt;</span>
<span class="co">&lt;!-- And it sucks even more to edit --&gt;</span>
<span class="kw">&lt;xsl:template</span><span class="ot"> match=</span><span class="st">&quot;/&quot;</span><span class="kw">&gt;</span>
    ydef(myvar,value)
    yprint(Hello world!)
    yshow(myvar)
<span class="kw">&lt;/xsl:template&gt;</span></code></pre>
<p>Maintenant compilons simplement ce fichier&nbsp;:</p>
<pre class="zsh"><code>m4 myfile.m4 &gt; myfile.xslt</code></pre>
<p>Et vous pouvez profitez ! Maintenant <sc>xslt</sc> devient plus lisible et plus facile à éditer.</p>
<h2 id="la-partie-la-plus-cool-les-fractales">La partie la plus cool: les fractales !</h2>
<p>À ses débuts, beaucoup pensaient que ce serait le nouveau Flash. Apparemment, ce devrait plutôt être <code>canvas</code> avec du javascript qui occupera cette place.</p>
<p>Tout d’abord, laissez moi vous montrer le résultat&nbsp;:</p>
<a href="/Scratch/img/blog/SVG-and-m4-fractals/main.svg">
<div>
<img src="/Scratch/img/blog/SVG-and-m4-fractals/main.png" alt="Yesod logo made in SVG and m4"/>
</div>
<p>Cliquez sur l’image pour voir le <span class="sc">svg</span> directement. Attention, si vous n’avez pas un ordinateur récent, ça risque de ramer. </a></p>
<p>Le positionnement du texte “esod” par rapport au “λ” renversé a été en jouant avec firebug. De cette façon je n’avais pas à regénérer pour tester.</p>
<p>Faire une telle fractale revient à&nbsp;:</p>
<ol style="list-style-type: decimal">
<li>Choisir un élément racine ;</li>
<li>le dupliquer et le transformer ;</li>
<li>le résultat est un nouveau sous-élément ;</li>
<li>répéter à partir de 2 mais en utilisant le sous-élément comme nouvelle racine.</li>
<li>Arréter lorsque la récursion est assez profonde.</li>
</ol>
<p>Si j’avais dû faire ça manuellement, il m’aurait fallu faire beaucoup de copier/coller dans mon <span class="sc">svg</span>. Simplement parce que la transformation est toujours la même, mais je ne pouvais pas dire, utiliser la transformation appelée “titi”. Plutôt que copier du <span class="sc">xml</span>, j’ai utilisé m4.</p>
<p>Et voici le code commenté&nbsp;:</p>
<pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;?xml</span> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;<span class="kw">?&gt;</span>
<span class="co">&lt;!--</span>
<span class="co">     M4 Macros</span>
<span class="co">define(`YTRANSFORMONE&#39;, `scale(.43) translate(-120,-69) rotate(-10)&#39;)</span>
<span class="co">define(`YTRANSFORMTWO&#39;, `scale(.43) translate(-9,-67.5) rotate(10)&#39;)</span>
<span class="co">define(`YTRANSFORMTHREE&#39;, `scale(.43) translate(53,41) rotate(120)&#39;)</span>
<span class="co">define(`YGENTRANSFORM&#39;, `translate(364,274) scale(3)&#39;)</span>
<span class="co">define(`YTRANSCOMPLETE&#39;, `</span>
<span class="co">    &lt;g id=&quot;level_$1&quot;&gt;</span>
<span class="co">        &lt;use style=&quot;opacity: .8&quot; transform=&quot;YTRANSFORMONE&quot; xlink:href=&quot;#level_$2&quot; /&gt;</span>
<span class="co">        &lt;use style=&quot;opacity: .8&quot; transform=&quot;YTRANSFORMTWO&quot; xlink:href=&quot;#level_$2&quot; /&gt;</span>
<span class="co">        &lt;use style=&quot;opacity: .8&quot; transform=&quot;YTRANSFORMTHREE&quot; xlink:href=&quot;#level_$2&quot; /&gt;</span>
<span class="co">    &lt;/g&gt;</span>
<span class="co">    &lt;use transform=&quot;YGENTRANSFORM&quot; xlink:href=&quot;#level_$1&quot; /&gt;</span>
<span class="co">&#39;)</span>
<span class="co"> --&gt;</span>
<span class="kw">&lt;svg</span> 
<span class="ot">    xmlns=</span><span class="st">&quot;http://www.w3.org/2000/svg&quot;</span> 
<span class="ot">    xmlns:xlink=</span><span class="st">&quot;http://www.w3.org/1999/xlink&quot;</span>
<span class="ot">    x=</span><span class="st">&quot;64&quot;</span><span class="ot"> y=</span><span class="st">&quot;64&quot;</span><span class="ot"> width=</span><span class="st">&quot;512&quot;</span><span class="ot"> height=</span><span class="st">&quot;512&quot;</span><span class="ot"> viewBox=</span><span class="st">&quot;64 64 512 512&quot;</span>
<span class="ot">    id=</span><span class="st">&quot;svg2&quot;</span><span class="ot"> version=</span><span class="st">&quot;1.1&quot;</span><span class="kw">&gt;</span>
    <span class="kw">&lt;g</span><span class="ot"> id=</span><span class="st">&quot;level_0&quot;</span><span class="kw">&gt;</span> <span class="co">&lt;!-- some group, if I want to add other elements --&gt;</span>
        <span class="co">&lt;!-- the text &quot;λ&quot; --&gt;</span>
        <span class="kw">&lt;text</span><span class="ot"> id=</span><span class="st">&quot;lambda&quot;</span> 
<span class="ot">            fill=</span><span class="st">&quot;#333&quot;</span><span class="ot"> style=</span><span class="st">&quot;font-family:Ubuntu; font-size: 100px&quot;</span>
<span class="ot">            transform=</span><span class="st">&quot;rotate(180)&quot;</span><span class="kw">&gt;</span>λ<span class="er">&lt;</span>/text&gt;
    <span class="kw">&lt;/g&gt;</span>
    <span class="co">&lt;!-- the text &quot;esod&quot; --&gt;</span>
    <span class="kw">&lt;text</span> 
<span class="ot">        fill=</span><span class="st">&quot;#333&quot;</span> 
<span class="ot">        style=</span><span class="st">&quot;font-family:Ubuntu; font-size: 28px; letter-spacing: -0.10em&quot;</span> 
<span class="ot">        x=</span><span class="st">&quot;-17.3&quot;</span> 
<span class="ot">        y=</span><span class="st">&quot;69&quot;</span> 
<span class="ot">        transform=</span><span class="st">&quot;YGENTRANSFORM&quot;</span><span class="kw">&gt;</span>esod<span class="kw">&lt;/text&gt;</span>
    <span class="co">&lt;!-- ROOT ELEMENT --&gt;</span>
    <span class="kw">&lt;use</span><span class="ot"> transform=</span><span class="st">&quot;YGENTRANSFORM&quot;</span><span class="ot"> xlink:href=</span><span class="st">&quot;#level_0&quot;</span> <span class="kw">/&gt;</span>

    YTRANSCOMPLETE(1,0) <span class="co">&lt;!-- First recursion --&gt;</span>
    YTRANSCOMPLETE(2,1) <span class="co">&lt;!-- deeper --&gt;</span>
    YTRANSCOMPLETE(3,2) <span class="co">&lt;!-- deeper --&gt;</span>
    YTRANSCOMPLETE(4,3) <span class="co">&lt;!-- even deeper --&gt;</span>
    YTRANSCOMPLETE(5,4) <span class="co">&lt;!-- Five level seems enough --&gt;</span>
<span class="kw">&lt;/svg&gt;</span></code></pre>
<p>et je l’ai compile en <sc>svg</sc> et ensuite en <sc>png</sc> avec&nbsp;:</p>
<pre class="zsh"><code>m4 yesodlogo.m4 &gt; yesodlogo.svg &amp;&amp; convert yesodlogo.svg yesodlogo.png</code></pre>
<p>Le λ est dupliqué avec trois “transformations” différentes. Les transformations sont : <code>YTRANSFORMONE</code>, <code>YTRANSFORMTWO</code> et <code>YTRANSFORMTHREE</code>.</p>
<p>Chaque transformation est une similarité (translation + rotation + zoom, ce qui est équivalent à juste rotation + zoom, mais bon).</p>
<p>Une fois fixée chaque transformation peut ensuite être réutilisée pour chaque nouveau niveau.</p>
<p>Maintenant <code>YTRANSCOMPLETE</code> entre en jeu. Cette macro prend deux arguments. Le niveau courant et le niveau précédent. Cette macro va dupliquer le niveau précédent en lui appliquant chacune des 3 transformations. Au niveau 0, le contenu est un seul grand λ, le niveau 1 en contient 3. Le niveau 2 en contient 9, etc… Le niveau 5 contient 3<sup>5</sup>=243 λ. Tous les niveaux combinés représentent 3<sup>6</sup>-1 / 2 = 364 λ.</p>
<p>L’avantage principal c’est que je pouvais visualiser le résultat final facilement. Sans ce système de macro, pour faire une preview il m’aurait fallu faire des copier/coller + quelques modifications à chaque essai.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Ce fut très amusant de faire une fractale en <sc>svg</sc>, mais la partie la plus intéressante était d’augmenter la puissance d’expressivité du langage en utilise un préprocesseur. J’ai utilisé cette méthode avec <sc>xslt</sc> pour une vrai application par exemple. On peut aussi utiliser m4 pour faire des includes d’autres fichiers. Typiquement je l’ai utiliser pour les includes dans un format obscur. Mais vous pouvez aussi le considérer pour des includes dans du HTML. Par exemple pour fabriquer un site statique rapidement, m4 peut se révéler utile pour inclure un footer ou un menu sur toutes les pages par exemple. J’ai aussi pensé que l’on pouvait utiliser m4 pour structurer des programmes comme brainfuck.</p>]]></summary>
</entry>
<entry>
    <title>Les idées de yesod</title>
    <link href="http://yannesposito.com/Scratch/fr/blog/Yesod-excellent-ideas/index.html" />
    <id>http://yannesposito.com/Scratch/fr/blog/Yesod-excellent-ideas/index.html</id>
    <published>2011-10-04T00:00:00Z</published>
    <updated>2011-10-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div>
<img src="/Scratch/img/blog/Yesod-excellent-ideas/main.png" alt="Title image"/>
</div>

<div class="intro">

<p><span class="sc"><abbr title="Trop long; pas lu">tlpl</abbr>: </span></p>
<p>Cela fait un moment que je suis la progression du <a href="http://www.yesodweb.com">framework yesod</a>. À mon humble avis on peut commencer à l’utiliser pour des applications sérieuses (comprendre en prod). Avant de vous dire pourquoi vous devriez aussi le considérer, je préfère vous parler de bonnes idées (parmi d’autres) introduites par yesod que je n’avais jamais vu ailleurs.</p>
</div>

<h2 id="types-saufs">Types saufs</h2>
<p>Commençons par une BD d’<a href="http://xkcd.com">xkcd</a>&nbsp;:</p>
<div class="figure">
<img src="http://imgs.xkcd.com/comics/exploits_of_a_mom.png" alt="SQL injection by a mom" /><p class="caption">SQL injection by a mom</p>
</div>
<p>Lorsque vous créez une application web, beaucoup de temps est passé à s’occuper de chaînes de caractères. Des chaînes de caractère pour les URL, le HTML, le Javascript, les CSS, les requêtes SQL, etc… Pour éviter des utilisation malicieuses vous devez protéger chaque chaîne de caractère entre chaque étape. Par exemple supposons que vous entriez comme nom&nbsp;:</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript">Newton&lt;script&gt;<span class="fu">alert</span>(<span class="st">&quot;An apple fall&quot;</span>)&lt;<span class="ot">/script&gt;</span></code></pre>
<p>Sans une protection correcte, le message “An apple fall” sera affiché à chaque fois que quelqu’un essayera d’accéder au nom de cet utilisateur. Les “types saufs” sont le <a href="https://www.youtube.com/watch?v=1IWF3IsEPBE">tonyglandil du web</a>. A chaque chaine de caractère, on lui associe un “type”. A quoi sert cette chaîne de caractère ? Est-ce une URL ? Du javascript ? De l’HTML ? Entre chaque passage d’une représentation à une autre, un transformation is faite par défaut.</p>
<p>Yesod fait de son mieux pour typer les objets manipulés et ainsi il fera ce qu’il faut pour ne pas mettre du script dans une URL par exemple.</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">@[AnotherPageR]</span><span class="kw">&gt;</span>Go to the other page</code></pre>
<p>Comme <code>AnotherPageR</code> est une URL elle ne pourra contiendra pas (par défaut) de caractère dangereux comme par exemple&nbsp;:</p>
<pre class="sourceCode html"><code class="sourceCode html"><span class="er">falselink&quot;&gt;&lt;script&gt; bad_code(); &lt;/script&gt;&lt;a href=&quot;pipo</span></code></pre>
<h2 id="les-widgets">Les widgets</h2>
<p>Les widgets de yesod sont différents des widgets Javascripts (ou java). Pour yesod un widget est un ensemble de morceaux d’appli web. Et si dans une page on veut utiliser plusieurs widgets, alors yesod s’occupe de tout. Des exemples de widgets (au sens yesod) sont&nbsp;:</p>
<ul>
<li>Le «footer» d’une page web,</li>
<li>Le «header» d’une page web,</li>
<li>un bouton qui apparaît lorsque l’on «scrolle» vers le bas,</li>
<li>etc…</li>
</ul>
<p>Pour chacun de ces widgets vous pourriez avoir besoin d’</p>
<ul>
<li>un peu d’HTML,</li>
<li>un peu de CSS et</li>
<li>un peu de javascript.</li>
</ul>
<p>Certain morceau doivent être placés dans le «header» de la page et d’autre dans le «body».</p>
<p>Vous pouvez déclarer un widget comme suit (je n’utilise pas la vrai syntaxe)&nbsp;:</p>
<pre><code>htmlheader = ...
cssheader = ...
javascriptheader = ...
htmlbody = ...</code></pre>
<p>La vraie syntaxe est&nbsp;:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">toWidgetHeader cassiusFile <span class="st">&quot;button.cassius&quot;</span>
toWidgetHeader juliusFile <span class="st">&quot;button.julius&quot;</span>
toWidget       hamletFile <span class="st">&quot;buttonTemplate.hamlet&quot;</span></code></pre>
<p>Veuillez aussi noté la convention Shakespearienne des noms. Encore une bonne raison d’utiliser yesod.</p>
<ul>
<li>Cassius <em>&amp;</em> Lucius pour le CSS (très similaire à SASS et SCSS)</li>
<li>Julius pour le javascript (notons qu’il existe aussi un CoffeeScript qui traîne dans les sources de yesod)</li>
<li>Hamlet pour l’HTML (similaire à haml)</li>
</ul>
<p>Lorsque vous générez votre page, yesod se débrouille pour que tout fonctionne ensemble:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">myBigWidget <span class="fu">=</span>  menuWidget <span class="fu">&gt;&gt;</span> contentWidget <span class="fu">&gt;&gt;</span> footerWidget</code></pre>
<p>De plus, si vous utilisez 10 widgets avec un peu de CSS, yesod fabriquera un unique fichier CSS pour vous. Bien entendu si vous préférez avoir une dizaine de fichier CSS vous pouvez aussi le faire.</p>
<p>C’est juste génial !</p>
<h2 id="routage-optimisé">Routage optimisé</h2>
<p>Dans un système de routage standard (à la ruby on rails par exemple) vous avez pour chaque entrée un couple: regexp → handler</p>
<p>La seule façon de découvrir la bonne règle est d’essayer de matcher l’url demandée à chaque expression régulière.</p>
<p>Au lieu d’essayer chaque expression régulière, yesod regroupe et compile les routes pour les optimiser. Bien entendu pour pouvoir profiter de cet avantage au mieux, il ne faut pas que deux routes interfèrent entres elles.</p>
<pre class="sourceCode html"><code class="sourceCode html">/blog/2003  Date2003R
/blog/$DATE DateR</code></pre>
<p>Cette définition de route est invalide par défaut dans yesod. Si vous voulez vraiment vous pouvez le faire foncionner quand même, mais il me semble que ça doit être quasiment toujours une mauvaise idée.</p>
<p>Il vaut mieux faire&nbsp;:</p>
<pre class="sourceCode html"><code class="sourceCode html">/blog/$DATE DateR</code></pre>
<p>et faire le test “est-ce que date = 2003 ?” dans le «handler».</p>
<h2 id="pourquoi-yesod">Pourquoi yesod?</h2>
<ol style="list-style-type: decimal">
<li><em>La vitesse</em>. Simplement incroyable, je ne pense pas qu’il existe quelque chose de plus rapide aujourd’hui. Regardez d’abord cet <a href="http://snapframework.com/blog/2010/11/17/snap-0.3-benchmarks">article</a> puis <a href="http://www.yesodweb.com/blog/2011/02/warp-speed-ahead">celui-ci</a>.</li>
<li><em>Haskell</em>. C’est certainement le langage de programmation le plus difficile à apprendre que j’ai jamais rencontré. Mais aussi l’un des plus incroyables. Si vous voulez rencontrer tout un tas de notions que vous n’avez jamais croisées avant et faire exploser votre cerveau avec de nouvelles idées, alors apprenez Haskell.</li>
<li><em>Bonnes idées et communauté excellente</em>. Cela fait quelques mois que je suis la progression de yesod. Et la vitesse à laquelle tout s’est déroulé est simplement incroyable. De plus les développeurs sont intelligents et super sympa.</li>
</ol>
<p>Si vous êtes un “haskeller”, je pense que vous ne devriez pas avoir peur de la syntaxe particulière imposée par la façon standard de faire les choses avec yesod. Il faut essayer un peu plus loin que les premiers tutoriaux du livre.</p>
<p>Je pense que yesod va dans la bonne direction d’un web plus sûr et plus rapide. Même si je pense que l’avenir sera que les serveurs devront être limités à faire serveur d’API (JSON ou XML ou n’importe quel autre mode de représentation d’objets).</p>
<p>Yesod est juste incroyable. Dépassez les difficultés liées à l’apprentissage d’haskell et essayez le !</p>]]></summary>
</entry>

</feed>
