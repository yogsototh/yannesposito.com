<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
	   xmlns:content="http://purl.org/rss/1.0/modules/content/"
	   xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	   xmlns:dc="http://purl.org/dc/elements/1.1/"
	   xmlns:atom="http://www.w3.org/2005/Atom"
	   xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	   xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	   xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>her.esy.fun</title>
  <atom:link href="https://her.esy.fun/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://her.esy.fun</link>
  <description><![CDATA[her.esy.fun articles, mostly random personal thoughts]]></description>
  <language>en</language>
  <pubDate>Sat, 01 May 2021 00:00:00 +0200</pubDate>
  <lastBuildDate>Sun, 02 May 2021 00:00:00 +0200</lastBuildDate>
  <generator>mkrss.sh</generator>
  <webMaster>yann@esposito.host (Yann Esposito)</webMaster>
  <image>
    <url>https://her.esy.fun/img/FlatAvatar.png</url>
    <title>her.esy.fun</title>
    <link>https://her.esy.fun</link>
  </image>

<item>
<title>Static Blog Builder</title>
<guid>https://her.esy.fun/posts/0017-static-blog-builder/index.html</guid>
<pubDate>Sat, 01 May 2021 00:00:00 +0200</pubDate>
<category>blog</category>
<category>static</category>
<description><![CDATA[
<div id="content"><p>As someone on the Internet said not so far ago. Building its own static building system is a rite of passage for many developers. It has a lot of nice features. It gives a goal with a feeling of accomplishment. It is simple enough so most developers could build their own system. But it could also become very complex when you go down the rabbit hole.</p><p>Along the years I used different tools and used and wrote of few static website systems:</p><ul><li><a href="https://nanoc.app">nanoc</a> (in Ruby), at that time it looked like this: <a href="https://web.archive.org/web/20081002071448/http://nanoc.stoneship.org/">old nanoc 2 website</a></li><li><a href="https://jaspervdj.be/hakyll/">hakyll</a> (haskell static website generator)</li><li><a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">org-publish</a> (emacs package in conjunction with org-mode)</li><li><a href="https://shakebuild.com">shake</a> (haskell again)</li></ul><p>So if you look at the progression, I first used nanoc because I used ruby and it was a very new solution, the website looked really great. Also the main developer <a href="https://denisdefreyne.com">Denis Defreyne</a> was really helpful. Ruby was really great at dealing with regular expressions for hacking my documents.</p><p>Then I was interested in Haskell, and I switched to a Haskell-made solution. I used hakyll, and I wrote a bit about it in <a href="http://yannesposito.com/Scratch/en/blog/Hakyll-setup/">Hakyll Setup</a>. As a side note, the author of Hakyll <a href="https://jaspervdj.be/hakyll/">Jasper Van der Jeugt</a> is apparently a friend of the author of nanoc. They both wrote a static site generators with their preferred programming language. I added a lot of personal features to my own site builder. It was a nice toy project.</p><p>Then, due to a major disruption in my professional and private life I stopped to take care of my website.</p><p>And a few years ago, I wanted to start a new website from scratch. In the meantime I switched my editor of choice from vim to Emacs. I started to work in Clojure and emacs is generally a natural choice because you can configure it with LISP. I discovered <a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">org-mode</a> (I don't think the homepage of org mode makes justice to how incredible it is). So org-mode comes with an export system. Thus I switched to org-publish. Again <a href="https://her.esy.fun/posts/0001-new-blog/index.html">I wrote a bit about it</a>.</p><p>It was nice, but very slow. I improved a few things like writing a short script to <a href="https://her.esy.fun/posts/0005-rss-gen/index.html">Generate RSS from a tree of html files.</a> But I still had the feeling it was too slow.</p><p>Static site building is a specific usage of a build system. And as I knew I could use <code>pandoc</code> to build HTML out of org-mode files and still versed in the Haskell culture I decided to try <a href="https://shakebuild.com">shake</a>. You can learn more by reading this excellent paper about it, I think all developer should read it: <a href="https://github.com/snowleopard/build-systems/releases/download/icfp-submission/build-systems.pdf">Build System Ã  la carte</a>.</p><p>As a bonus, <a href="https://pandoc.org">pandoc</a> is written in Haskell. I could then directly use the <a href="https://pandoc.org">pandoc</a> library in my build program. It worked like a charm and it was <strong>very fast</strong> as compared to other solutions I tried. So really let me tell you shake is a great build system.</p><p>But it was not perfect. While it was very fast, and I was able to use pandoc API directly. It made me dependent on Haskell. The best way I found to have Haskell reproducible build environment is to use <a href="https://nixos.org/nix">nix</a>. This was great until the Big Sur update. To keep it short, nix stopped working on my computers after I upgraded my to Big Sur. Gosh, it was painful to fix.</p><p>Concurrently I discovered <a href="file:///posts/0016-gemini/index.html">gemini</a> and wanted to duplicate my website into gemini sphere. So I tried to update my build system but my code was to oriented to use pandoc and it was painful to have gemini in the middle of it. Particularly, generating a gemini index file. My main goal was to have gemini file that could only be linked from withing gemini sphere. Because gemini is a lot smaller web where you could feel a bit more protected from what the Web has become along the years. Whatever, in the end, I just had two problems to tackles.</p><ol><li>Haskell became difficult to trust as very stable tool. Stable in the sense that I would not have any support work to do in order to keep just using it and not fixing/tweaking it.</li><li>Simplify the overall system to have a simpler build description</li></ol><p>So a very stable tool that I am pretty sure will still work almost exactly as today in 10 years is <strong><code>make</code></strong> (more precisely gnumake). I expected a lot of people had already come to the same conclusion and wrote about it. To my great surprise, I found very few article about generating static website with make. I only found solutions a bit too specific for my need. This is why I would like to give you a more generic starting point solution.</p><h1 id="the--makefile-">The <code>Makefile</code></h1><p>Instead of copy/pasting my current <code>Makefile</code> entirely let me give you a more generic one. It should be a great start.</p><p>The first part will be used to simply copy the files from <code>src/</code> to <code>_site/</code>.</p><div class="m" id="cb1"><pre class="m makefile"><code class="m makefile"><span id="cb1-1"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-1" aria-hidden="true"></a><span class="dv">all:</span><span class="dt"> website</span></span>
<span id="cb1-2"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-3" aria-hidden="true"></a><span class="co"># directory containing my org files as well as my assets files</span></span>
<span id="cb1-4"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-4" aria-hidden="true"></a><span class="dt">SRC_DIR </span><span class="ch">?=</span><span class="st"> src</span></span>
<span id="cb1-5"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-5" aria-hidden="true"></a><span class="co"># directory where I will but the files for my website (HTML + assets)</span></span>
<span id="cb1-6"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-6" aria-hidden="true"></a><span class="dt">DST_DIR </span><span class="ch">?=</span><span class="st"> _site</span></span>
<span id="cb1-7"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-7" aria-hidden="true"></a></span>
<span id="cb1-8"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-8" aria-hidden="true"></a><span class="co"># list all files in src</span></span>
<span id="cb1-9"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-9" aria-hidden="true"></a><span class="co"># if you want to exclude .org files use the exclude from the find command</span></span>
<span id="cb1-10"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-10" aria-hidden="true"></a><span class="dt">SRC_RAW_FILES </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> find </span><span class="ch">$(</span><span class="dt">SRC_DIR</span><span class="ch">)</span><span class="st"> -type f</span><span class="ch">)</span></span>
<span id="cb1-11"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-11" aria-hidden="true"></a><span class="co"># generate all file that should be copied in the site</span></span>
<span id="cb1-12"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-12" aria-hidden="true"></a><span class="co"># For my site, I want to publish my source files along the HTML files</span></span>
<span id="cb1-13"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-13" aria-hidden="true"></a><span class="dt">DST_RAW_FILES   </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">patsubst</span><span class="st"> </span><span class="ch">$(</span><span class="dt">SRC_DIR</span><span class="ch">)</span><span class="st">/%</span><span class="kw">,</span><span class="ch">$(</span><span class="dt">DST_DIR</span><span class="ch">)</span><span class="st">/%</span><span class="kw">,</span><span class="ch">$(</span><span class="dt">SRC_RAW_FILES</span><span class="ch">))</span></span>
<span id="cb1-14"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-14" aria-hidden="true"></a><span class="dt">ALL             </span><span class="ch">+=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">DST_RAW_FILES</span><span class="ch">)</span></span>
<span id="cb1-15"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-15" aria-hidden="true"></a></span>
<span id="cb1-16"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-16" aria-hidden="true"></a><span class="co"># COPY EVERYTHING (.org file included)</span></span>
<span id="cb1-17"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-17" aria-hidden="true"></a><span class="dv">$(DST_DIR)/% :</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">SRC_DIR</span><span class="ch">)</span><span class="dt">/%</span></span>
<span id="cb1-18"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-18" aria-hidden="true"></a>    mkdir -p <span class="st">&quot;</span><span class="ch">$(</span><span class="kw">dir</span><span class="st"> </span><span class="ch">$@)</span><span class="st">&quot;</span></span>
<span id="cb1-19"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb1-19" aria-hidden="true"></a>    cp <span class="st">&quot;</span><span class="ch">$&lt;</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="ch">$@</span><span class="st">&quot;</span></span></code></pre></div><p>This part is about running the <code>pandoc</code> command for all <code>org</code> files in <code>src/</code> so they generate a html file in <code>_site/</code>.</p><div class="m" id="cb2"><pre class="m makefile"><code class="m makefile"><span id="cb2-1"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-1" aria-hidden="true"></a><span class="co"># ORG -&gt; HTML, If you prefer markdown replace .org by .md</span></span>
<span id="cb2-2"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-2" aria-hidden="true"></a><span class="dt">EXT </span><span class="ch">:=</span><span class="st"> .org</span></span>
<span id="cb2-3"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-3" aria-hidden="true"></a><span class="co"># all source file we&#39;ll pass to pandoc</span></span>
<span id="cb2-4"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-4" aria-hidden="true"></a><span class="dt">SRC_PANDOC_FILES </span><span class="ch">?=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> find </span><span class="ch">$(</span><span class="dt">SRC_DIR</span><span class="ch">)</span><span class="st"> -type f -name &quot;*</span><span class="ch">$(</span><span class="dt">EXT</span><span class="ch">)</span><span class="st">&quot;</span><span class="ch">)</span></span>
<span id="cb2-5"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-5" aria-hidden="true"></a><span class="co"># all destination files we expect (replace the extension by .html)</span></span>
<span id="cb2-6"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-6" aria-hidden="true"></a><span class="dt">DST_PANDOC_FILES </span><span class="ch">?=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">subst</span><span class="st"> </span><span class="ch">$(</span><span class="dt">EXT</span><span class="ch">)</span><span class="kw">,</span><span class="st">.html</span><span class="kw">,</span><span class="st"> \</span></span>
<span id="cb2-7"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-7" aria-hidden="true"></a><span class="st">                        </span><span class="ch">$(</span><span class="kw">subst</span><span class="st"> </span><span class="ch">$(</span><span class="dt">SRC_DIR</span><span class="ch">)</span><span class="kw">,</span><span class="ch">$(</span><span class="dt">DST_DIR</span><span class="ch">)</span><span class="kw">,</span><span class="st"> \</span></span>
<span id="cb2-8"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-8" aria-hidden="true"></a><span class="st">                            </span><span class="ch">$(</span><span class="dt">SRC_PANDOC_FILES</span><span class="ch">)))</span></span>
<span id="cb2-9"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-9" aria-hidden="true"></a><span class="dt">ALL              </span><span class="ch">+=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">DST_PANDOC_FILES</span><span class="ch">)</span></span>
<span id="cb2-10"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-10" aria-hidden="true"></a></span>
<span id="cb2-11"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-11" aria-hidden="true"></a><span class="co"># use a template (you should use one)</span></span>
<span id="cb2-12"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-12" aria-hidden="true"></a><span class="dt">TEMPLATE </span><span class="ch">?=</span><span class="st"> templates/post.html</span></span>
<span id="cb2-13"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-13" aria-hidden="true"></a><span class="co"># URL of the CSS put yours</span></span>
<span id="cb2-14"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-14" aria-hidden="true"></a><span class="dt">CSS </span><span class="ch">=</span><span class="st"> /css/y.css</span></span>
<span id="cb2-15"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-15" aria-hidden="true"></a><span class="co"># The pandoc command to run to generate an html out of a source file</span></span>
<span id="cb2-16"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-16" aria-hidden="true"></a><span class="dt">PANDOC </span><span class="ch">:=</span><span class="st"> pandoc </span><span class="ch">\</span></span>
<span id="cb2-17"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-17" aria-hidden="true"></a><span class="st">            -c </span><span class="ch">$(</span><span class="dt">CSS</span><span class="ch">)</span><span class="st"> </span><span class="ch">\</span></span>
<span id="cb2-18"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-18" aria-hidden="true"></a><span class="st">            --template=</span><span class="ch">$(</span><span class="dt">TEMPLATE</span><span class="ch">)</span><span class="st"> </span><span class="ch">\</span></span>
<span id="cb2-19"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-19" aria-hidden="true"></a><span class="st">            --from org </span><span class="ch">\</span></span>
<span id="cb2-20"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-20" aria-hidden="true"></a><span class="st">            --to html5 </span><span class="ch">\</span></span>
<span id="cb2-21"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-21" aria-hidden="true"></a><span class="st">            --standalone</span></span>
<span id="cb2-22"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-22" aria-hidden="true"></a></span>
<span id="cb2-23"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-23" aria-hidden="true"></a><span class="co"># Generate all html if the org file change or the template change</span></span>
<span id="cb2-24"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-24" aria-hidden="true"></a><span class="dv">$(DST_DIR)/%.html:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">SRC_DIR</span><span class="ch">)</span><span class="dt">/%.org </span><span class="ch">$(</span><span class="dt">TEMPLATE</span><span class="ch">)</span></span>
<span id="cb2-25"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-25" aria-hidden="true"></a>    mkdir -p <span class="ch">$(</span><span class="kw">dir</span><span class="st"> </span><span class="ch">$@)</span></span>
<span id="cb2-26"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-26" aria-hidden="true"></a>    <span class="ch">$(</span><span class="dt">PANDOC</span><span class="ch">)</span> <span class="ch">$&lt;</span> <span class="ch">\</span></span>
<span id="cb2-27"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-27" aria-hidden="true"></a>        --output <span class="ch">$@</span></span>
<span id="cb2-28"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb2-28" aria-hidden="true"></a></span></code></pre></div><p>A missing part is often the part where you would like to generate an index page to list the latest posts. Here you are a bit alone, you need to make one yourself. There is not generic way to do this one.</p><div class="m" id="cb3"><pre class="m makefile"><code class="m makefile"><span id="cb3-1"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-1" aria-hidden="true"></a><span class="co"># Generating an index page is not difficult but not trivial either</span></span>
<span id="cb3-2"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-2" aria-hidden="true"></a><span class="dt">HTML_INDEX </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">DST_DIR</span><span class="ch">)</span><span class="st">/index.html</span></span>
<span id="cb3-3"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-3" aria-hidden="true"></a><span class="dt">MKINDEX </span><span class="ch">:=</span><span class="st"> engine/mk-index.sh</span></span>
<span id="cb3-4"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-4" aria-hidden="true"></a><span class="dv">$(HTML_INDEX):</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">DST_PANDOC_FILES</span><span class="ch">)</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">MKINDEX</span><span class="ch">)</span></span>
<span id="cb3-5"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-5" aria-hidden="true"></a>    mkdir -p <span class="ch">$(</span><span class="dt">DST_DIR</span><span class="ch">)</span></span>
<span id="cb3-6"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-6" aria-hidden="true"></a>    <span class="ch">$(</span><span class="dt">MKINDEX</span><span class="ch">)</span></span>
<span id="cb3-7"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb3-7" aria-hidden="true"></a><span class="dt">ALL </span><span class="ch">+=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">HTML_INDEX</span><span class="ch">)</span></span></code></pre></div><p>Finally, a few useful make commands. <code>make clean</code> and <code>make deploy</code>.</p><div class="m" id="cb4"><pre class="m makefile"><code class="m makefile"><span id="cb4-1"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-1" aria-hidden="true"></a><span class="co"># make deploy will deploy the files to my website write your own script</span></span>
<span id="cb4-2"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-2" aria-hidden="true"></a><span class="dv">deploy:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">ALL</span><span class="ch">)</span></span>
<span id="cb4-3"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-3" aria-hidden="true"></a>    engine/deploy.sh</span>
<span id="cb4-4"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-4" aria-hidden="true"></a></span>
<span id="cb4-5"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-5" aria-hidden="true"></a><span class="dv">website:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">ALL</span><span class="ch">)</span></span>
<span id="cb4-6"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-6" aria-hidden="true"></a></span>
<span id="cb4-7"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-7" aria-hidden="true"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb4-8"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-8" aria-hidden="true"></a></span>
<span id="cb4-9"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-9" aria-hidden="true"></a><span class="dv">clean:</span></span>
<span id="cb4-10"><a href="https://her.esy.fun/posts/0017-static-blog-builder/index.html#cb4-10" aria-hidden="true"></a>    <span class="ch">-</span><span class="fu">rm -rf </span><span class="ch">$(</span><span class="dt">DST_DIR</span><span class="ch">)</span><span class="fu">/*</span></span></code></pre></div><p>Limitation: <code>make</code> is old. So it really does not support spaces in filenames. Take care of that.</p><p>But let me tell you. While this is quite a minimalist approach (&lt;100 lines) it is nevertheless <strong>very fast</strong>. It will only generate the minimal amount of work to generate your website. I have a nice watcher script that update the website every time I save a file. It is almost instantaneous.</p><p>The only risky dependencies for my website now is <code>pandoc</code>. Perhaps, they will change how they generate an HTML from the same org file in the future. I still use <code>nix</code> to pin my pandoc version. But the static site builder itself is very simple, very stable and still very efficient.</p><p>As a conclusion, if you want to write your own static site builder that's great. There are plenty of things to learn along the way. Still if you want something stable for a long time, with a minimal amount of dependencies, I think this Makefile is really a great start.</p></div>
]]></description>
</item>


<item>
<title>Gemini</title>
<guid>https://her.esy.fun/posts/0016-gemini/index.html</guid>
<pubDate>Mon, 09 Nov 2020 00:00:00 +0100</pubDate>
<category>internet</category>
<category>gopher</category>
<category>gemini</category>
<description><![CDATA[
<div id="content"><p>This weekend I read an article about gopher and gemini. I already seen articles about gemini pass. Somehow, it was more appealing to me than gopher space for totally subjective reasons I think. Anyway this time I really dug into it, and I loved the experience.</p><p>At first sight gemini is like a parallel web for nerds. It has fundamental changes that I would have really liked to see from the modern web. The client decide the design, no user tracking, calm, minimalist, simple.</p><p>Right now, on the web, most news website make the experience terrible to read the article. The page is bloated with a lot of animations, popin asking you to accept the cookies, ads with videos, strange fonts or design, plenty of javascript, trackers, etcâ¦</p><p>Gemini make those kind of anti-design impractical. In gemini space there is no:</p><ul><li>CSS: the client decide the look of the page, the fonts, the colors, the width of the columns, etcâ¦</li><li>inline image: you can still link to images, but images should not be displayed in the middle of the text.</li><li>inline links: If you link to an external resource, it is clearly visible as an element on its own line.</li><li>cookies</li><li>HTTP headers used to track users</li><li>scripts on the client side</li><li>hard to parse format (no HTML, XHTML, etcâ¦)</li></ul><p>Another strength of Gemini is its protocol's simplicity. It is easy to write your own gemini server as well as your own gemini client within a few hours of work in your programming language of choice.</p><p>And last but not least, gemini is unfit to serve "big" files. So we should not experience people going to gemini for music/movie piracy. If you want to serve "big" files you should use another protocol.</p><p>Personally I started to browse gemini directly from emacs with elpher. But I know there are a lot of clients.</p><p>I liked gemini so much I hacked my blog to also publish in the gemini sphere. I serve my pages with a rust based server. And I hacked a quick script to transform my org mode files to gemini format. Gemini file format is a kind of super simplified markdown. I really like the simplicity of it.</p><p>Here are a few links to get you started.</p><p>Web:</p><ul><li><a href="https://gemini.circumlunar.space">gemini homepage</a></li><li><a href="https://thelambdalab.xyz/elpher/">elpher emacs gopher and gemini client</a></li><li><a href="https://portal.mozz.us/gemini/gemini.circumlunar.space/">Explore gemini from the web</a></li></ul><p>Gopher:</p><ul><li><a href="gopher://thelambdalab.xyz/1/projects/elpher/">elpher</a></li></ul><p>Gemini:</p><ul><li><a href="gemini://her.esy.fun">my website in gemini</a></li></ul></div>
]]></description>
</item>


<item>
<title>How I use org-mode</title>
<guid>https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html</guid>
<pubDate>Thu, 29 Oct 2020 00:00:00 +0100</pubDate>
<category>org-mode</category>
<description><![CDATA[
<div id="content"><div class="z"><p>In this article I'll try to give an overview of my current use of <a href="https://orgmode.org">org mode</a>. I use org mode for:</p><ul><li>tasks management & time tracking</li><li>writing documents (articles, book, etcâ¦)</li><li>note taking ; which I consider slightly different from just writing documents</li></ul><p>TL;DR:</p><ul><li><code>SPC y a</code> â Show agenda view for today</li><li><code>SPC X</code> â Capture a new task, write a description, then <code>C-c C-c</code>, save that in <code>tracker.org</code> (or <code>inbox.org</code> depending of the capture template)</li><li><code>SPC n o</code> â jump to the current time tracked tasks</li><li><code>SPC m c o</code> â stop the clock on that task; if you capture a new time tracking tasks you don't need to clock-out</li><li><code>SPC y o r</code> â <code>org-refile</code>, meaning move that task somewhere else</li><li><code>SPC q</code> â add/remove tags to that task</li></ul></div><p>In this article I would like to share a tool that was a real life changer to me: <a href="http://orgmode.org">org mode</a>.</p><p>In my opinion emacs is worth learning just for org-mode. This is by far the best solution I ever used to manage my tasks. I tried a lot of differents tools before it, and this is the only one I really stick with. It is so versatile that it can adapt to your very specific needs.</p><p>The major difficulty faced by tasks management application is the wrong level of complexity facing the user. This is a very hard problem to tackle.</p><p>If your system is too simple, the users will not be able to manage the tasks how they would like. If your system is too complex, the user will be faced with too much details. So most successful systems have a way to adapt their apparent complexity to the need of their users. And org mode is exactly like that. Not only starting with org mode can be extremely simple but also there are mostly no complexity limit.</p><p>Either org mode already handle one of your need, or most of the time you will find a package to fulfill your need. And if not, it is easy to write your own.</p><p>Here is the result of a few years of improving my use of org mode. Today I can say that org mode is part of my day to day life. I still invest a bit of time to improve minor details of my workflow time to time. But now my daily workflow is mostly stable. So I think I can share it.</p><h2 id="overview">Overview</h2><h3 id="daily-routine">daily routine</h3><p>The first thing I do in the morning is to open <code>org-agenda</code> view for today. It shows me the tasks planned for today. What are urgent tasks, deadlines, tasks that have deadlines in a few days, etcâ¦ I also have a glimpse of my habits, tasks that I should start at some hour in the day, etcâ¦</p><figure><img src="https://her.esy.fun/posts/0015-how-i-use-org-mode/img/org-super-agenda.png" title="org-super-agenda" alt="Org super calendar view"></img><figcaption aria-hidden="true">Org super calendar view</figcaption></figure><p>I then start to track (<em>clock</em>) the tasks I'm currently working on.</p><p>Often during the day, I need to create new tasks. Most of the time I create a task and I add either a deadline or a schedule date.</p><p>Sometime I also need to deal with interruptions. In that case, I <em>capture</em> the interruption that will also create a new task being clocked.</p><p>At the end of the day, every tasks I worked on are saved in a <code>tracker.org</code> file. That file look like a date tree. And I generally generate a <em>report</em> that tell me how much hours I worked today. Some tasks are tagged <code>work</code>. The report filter only on the <code>work</code> tagged tasks.</p><p>Also I have some repeating tasks like review memory cards using a spaced repetition plugin. I start it, and it shows me a few <code>cards</code> with questions that I review. So mainly those cards contain info I want to keep in my mind and not only in my notes.</p><h3 id="document-writing">document writing</h3><p>Writing documents with org mode and in particular technical document is just incredible. Org mode feels a lot like markdown.</p><p>But org mode shine with its use of <strong>org-babel</strong>. <strong>org-babel</strong> is used to execute code inside your document. So you can execute block of code and get their result in block of code. For technical writing this is extremely useful.</p><p>For example, I wrote most part of an OAuth2 provider in Clojure. And to generate a documentation to some of our advanced users it is very nice to provide the full HTTP request along the response.</p><p>But I also often need to play a few tricks in the doc and directly use our Clojure code to generate JWT for example. The great part is the ability to use those JWT generated from Clojure code in the following code block making HTTP call.</p><p>That plus the natural ability to fold/unfold the tree structure of the org mode file is great.</p><h3 id="note-taking">note taking</h3><p>Time to time, I need to really take the time write note on a technical subject or sometime about articles I read about anything. For that I use <a href="https://github.com/org-roam/org-roam">org roam</a>. I only started to use it a few months ago. But this is a great addition to my previous workflow that used <code>deft</code> (that I still use). But I must say, this is pretty perfect as a note taking app.</p><p>Mainly you capture notes quite easily and put links about the subject, but also tags. In the end that generate a graph of notes that you could use later to dig into your own notes.</p><h3 id="journaling">journal</h3><p>Along with note taking. I also try to write a journal note everyday. For that I use org-journal (another org mode related package). I have a default template which take care of a few metrics I want to focus on. And I guess it is different for anyone of us.</p><h2 id="task-management">Task Management</h2><p>So here is a more detailed description about my org mode usage.</p><h3 id="worfklow-1--planned-tasks---org-agenda---clock">Workflow 1; planned tasks : org-agenda + clock</h3><ol><li>look at the current tasks planned for today</li><li>select a task, clock it</li><li>work on the task</li><li>back to the task and clock it out.</li></ol><p>I work most of my using emacs<a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#fn1" class="g" id="fnref1" role="doc-noteref"><sup>1</sup></a>. Generally the first thing I do in the morning is opening `org-calendar`. It looks like this:</p><figure><img src="https://her.esy.fun/posts/0015-how-i-use-org-mode/img/org-super-agenda.png" title="org-super-agenda" alt="Org super calendar view"></img><figcaption aria-hidden="true">Org super calendar view</figcaption></figure><p>Pretty brutalist interface which is a great thing to me. Distraction free interface going to the essential.</p><p>With this view, I see what I planned to do today. I also see a few "Due Soon" tasks in case I have the time to handle those.</p><p>When I start working on a task I start a clock on it (I simply type <code>I</code> when my cursor is on the TODO line). When I finished some task I change its status from TODO to something else. Mainly I'm prompted when doing so:</p><pre><code>{ [t] TODO   [p] IN-PROGRESS   [h] HOLD   [w] WAITING
  [d] DONE   [c] CANCELLED     [l] HANDLED }
</code></pre><p>And that's it. The time spent on the task as been clocked I can work on another task.</p><p>Looking at the agenda view you could notice habits. They start to become green when you are doing them correctly.</p><p>But generally, I don't use much direct clocking from the agenda. Most of the time I prefer the capture mechanism. Which bring us to "Workflow 2".</p><h3 id="workflow-2--org-capture-org-refile">Workflow 2: Tracking; org-capture</h3><p>Most of the tasks I perform on the day are not planned. I have a generic routine + some prepared events and tasks to performs. But during the day you have multiple interruptions, and part of my job is to write code reviews too. I cannot plan those.</p><p>In that case I use <code>org-capture</code> along <code>org-refile</code>. Mainly <code>org-capture</code> helps you create a new TODO entry. And <code>org-refile</code> will help you move that TODO entry to the correct place.</p><p>So let say I get a direct message in the chat asking me to do something. I generally start org capture (for me it's <code>SPC X</code>). I am presented with the following choice:</p><pre><code>Select a capture template
=========================

[t] todo
[c] chat
[e] email
[m] meeting
[p] pause
[r] review
[w] work
[i] interruption
[f] chore
---------------------------------------------------------------------------
[q] Abort
</code></pre><p>In my example it was a chat interruption. So I type <code>i</code> that presents me with this</p><pre><code>**** IN-PROGRESS |  :interruption:
:LOGBOOK:
[2020-09-23 Wed 08:01]
ref :: [link-to-where-I-was-in-emacs-when-captured]
</code></pre><p>My cursor placed where the <code>|</code> is displayed. Here I add the tag <code>chat</code> and a small description, "dm from John about X" for example. Then I type <code>C-c C-c</code> and the TODO is placed in a <code>tracker.org</code> file under a date tree that looks like this:</p><pre class="v"><code>* 2020
** 2020-W39
*** 2020-09-21 Monday
*** 2020-09-22 Tuesday
*** 2020-09-23 Wednesday
**** IN-PROGRESS Chat with John about X                          :interruption:chat:
:LOGBOOK:
:END:
[2020-09-23 Wed 17:58]
ref ::
...
</code></pre><p>So the clock for this task started at the moment at made the capture. In my workflow, I prefer to finish the capture and stop clock later. So after I finished the capture, the clock is still running while the task is put in my tracker file.</p><p>Once I finished with that task. I can:</p><ol><li>Jump to the tasks with <code>SPC n o</code> (<code>org-clock-goto</code>), and stop the clock <code>SPC m c o</code> (<code>clock-out</code>).</li><li>Jump to the task and change its status to <code>DONE</code> which will stop the clock.</li><li>Capture another tasks which will stop the clock on the current task and will start on the new one.</li></ol><p>By the end of the day, my tracker file will contain a date tree with all the tasks I done in the day. All tasks nicely clocked. I generally create a clock report that look like this:</p><pre><code>#+BEGIN: clocktable :scope subtree :maxlevel 4 :timestamp t :narrow 36! :match &quot;work&quot;
#+CAPTION: Clock summary at [2020-09-23 Wed 08:20]
| Timestamp              | Headline                             | Time   |   |      |      |
|------------------------+--------------------------------------+--------+---+------+------|
|                        | *Total time*                         | *6:40* |   |      |      |
|------------------------+--------------------------------------+--------+---+------+------|
|                        | \_    2020-09-21 Monday              |        |   | 7:40 |      |
| [2020-09-21 Mon 08:54] | \_      check chat                   |        |   |      | 0:36 |
| [2020-09-21 Mon 09:30] | \_      check reviews                |        |   |      | 0:41 |
| [2020-09-21 Mon 10:11] | \_      check emails                 |        |   |      | 0:07 |
| [2020-09-21 Mon 10:37] | \_      review PR about xxx          |        |   |      | 0:44 |
| [2020-09-21 Mon 11:21] | \_      update my PR from feedbacks  |        |   |      | 0:36 |
| [2020-09-21 Mon 12:08] | \_      review John&#39;s PR about Foo   |        |   |      | 0:12 |
| [2020-09-21 Mon 13:41] | \_      review M&#39;s PR about Bar      |        |   |      | 0:11 |
| [2020-09-21 Mon 13:53] | \_      another thing                |        |   |      | 0:16 |
| [2020-09-21 Mon 14:09] | \_      review PR                    |        |   |      | 0:51 |
| [2020-09-21 Mon 15:00] | \_      work on PR                   |        |   |      | 1:30 |
| [2020-09-21 Mon 16:49] | \_      check another PR             |        |   |      | 0:33 |
| [2020-09-21 Mon 17:03] | \_      answer email                 |        |   |      | 0:55 |
| [2020-09-21 Mon 17:58] | \_      Chat John about X            |        |   |      | 0:28 |

</code></pre><p>And that's mostly it for TODOs and tasks handling.</p><h3 id="workflow-3--org-capture---org-refile">Workflow 3: Add new tasks; org-capture / org-refile</h3><p>Another thing I do quite often. I need to add new task to be done. Be it for today or another day.</p><p>In that case, I generally use org-capture again. This time I choose <code>t</code> for TODO and I generally detail the task to be done. I add either a SCHEDULE (when I plan to start) or a DEADLINE (when this must be finished) and I refile it.</p><p>So refile will start a fuzzy search to put this task under some subtree. So instead of going to my <code>tracker.org</code> file, this goes to my <code>inbox.org</code> file.</p><p>And it will appear in my agenda.</p><h3 id="configuration">Configuration</h3><p>So to have all of that, I added a lot of configuration over time. But here is the most important part.</p><p>Most of that config is what I personally think are better defaults. And a minor part of it only is about how I organize myself.</p><div class="m" id="cb6" data-org-language="emacs-lisp"><pre class="m commonlisp"><code class="m commonlisp"><span id="cb6-1"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-1" aria-hidden="true"></a>(<span class="kw">defun</span><span class="fu"> org-mode-config </span>()</span>
<span id="cb6-2"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-2" aria-hidden="true"></a>  <span class="st">&quot;Org-mode.&quot;</span></span>
<span id="cb6-3"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-3" aria-hidden="true"></a>  (<span class="kw">setq</span> org-extend-today-until <span class="dv">4</span></span>
<span id="cb6-4"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-4" aria-hidden="true"></a>        org-use-effective-time <span class="kw">t</span>)</span>
<span id="cb6-5"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-5" aria-hidden="true"></a>  (<span class="kw">setq</span> org-todo-keywords</span>
<span id="cb6-6"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-6" aria-hidden="true"></a>        &#39;((<span class="kw">sequence</span> <span class="st">&quot;TODO(t)&quot;</span></span>
<span id="cb6-7"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-7" aria-hidden="true"></a>                    <span class="st">&quot;IN-PROGRESS(p)&quot;</span></span>
<span id="cb6-8"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-8" aria-hidden="true"></a>                    <span class="st">&quot;|&quot;</span></span>
<span id="cb6-9"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-9" aria-hidden="true"></a>                    <span class="st">&quot;DONE(d)&quot;</span></span>
<span id="cb6-10"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-10" aria-hidden="true"></a>                    <span class="st">&quot;HOLD(h@/!)&quot;</span></span>
<span id="cb6-11"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-11" aria-hidden="true"></a>                    <span class="st">&quot;CANCELED(c@/!)&quot;</span></span>
<span id="cb6-12"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-12" aria-hidden="true"></a>                    <span class="st">&quot;HANDLED(l@/!)&quot;</span>)</span>
<span id="cb6-13"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-13" aria-hidden="true"></a>          (<span class="kw">sequence</span> <span class="st">&quot;|&quot;</span> <span class="st">&quot;PAUSE(p)&quot;</span> <span class="st">&quot;CHAT(c)&quot;</span> <span class="st">&quot;EMAIL(e)&quot;</span> <span class="st">&quot;MEETING(m)&quot;</span> <span class="st">&quot;REVIEW(r)&quot;</span> <span class="st">&quot;GEEK(g)&quot;</span>)))</span>
<span id="cb6-14"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-14" aria-hidden="true"></a></span>
<span id="cb6-15"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-15" aria-hidden="true"></a>  <span class="co">;;; Look &amp; Feel</span></span>
<span id="cb6-16"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-16" aria-hidden="true"></a></span>
<span id="cb6-17"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-17" aria-hidden="true"></a>  <span class="co">;; I like to have something different than ellipsis because I often use them</span></span>
<span id="cb6-18"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-18" aria-hidden="true"></a>  <span class="co">;; myself.</span></span>
<span id="cb6-19"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-19" aria-hidden="true"></a>  (<span class="kw">setq</span> org-ellipsis <span class="st">&quot; [+]&quot;</span>)</span>
<span id="cb6-20"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-20" aria-hidden="true"></a>  (custom-set-faces &#39;(org-ellipsis ((<span class="kw">t</span> (:foreground <span class="st">&quot;gray40&quot;</span> :underline <span class="kw">nil</span>)))))</span>
<span id="cb6-21"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-21" aria-hidden="true"></a></span>
<span id="cb6-22"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-22" aria-hidden="true"></a>  (<span class="kw">defun</span><span class="fu"> my-org-settings </span>()</span>
<span id="cb6-23"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-23" aria-hidden="true"></a>    (org-display-inline-images)</span>
<span id="cb6-24"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-24" aria-hidden="true"></a>    (<span class="kw">setq</span> fill-column <span class="dv">75</span>)</span>
<span id="cb6-25"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-25" aria-hidden="true"></a>    (abbrev-mode)</span>
<span id="cb6-26"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-26" aria-hidden="true"></a>    (org-indent-mode)</span>
<span id="cb6-27"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-27" aria-hidden="true"></a>    <span class="kw">nil</span>)</span>
<span id="cb6-28"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-28" aria-hidden="true"></a></span>
<span id="cb6-29"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-29" aria-hidden="true"></a>  (add-hook &#39;org-mode-hook #&#39;my-org-settings)</span>
<span id="cb6-30"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-30" aria-hidden="true"></a></span>
<span id="cb6-31"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-31" aria-hidden="true"></a>  (<span class="kw">setq</span> org-tags-column <span class="dv">69</span>)</span>
<span id="cb6-32"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-32" aria-hidden="true"></a></span>
<span id="cb6-33"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-33" aria-hidden="true"></a>  <span class="co">;; src block indentation / editing / syntax highlighting</span></span>
<span id="cb6-34"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-34" aria-hidden="true"></a>  (<span class="kw">setq</span> org-src-fontify-natively <span class="kw">t</span></span>
<span id="cb6-35"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-35" aria-hidden="true"></a>        org-src-window-setup &#39;current-window <span class="co">;; edit in current window</span></span>
<span id="cb6-36"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-36" aria-hidden="true"></a>        org-src-preserve-indentation <span class="kw">t</span> <span class="co">;; do not put two spaces on the left</span></span>
<span id="cb6-37"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-37" aria-hidden="true"></a>        org-src-tab-acts-natively <span class="kw">t</span>)</span>
<span id="cb6-38"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-38" aria-hidden="true"></a></span>
<span id="cb6-39"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-39" aria-hidden="true"></a>  <span class="co">;; *** Templates</span></span>
<span id="cb6-40"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-40" aria-hidden="true"></a>  <span class="co">;; the %a refer to the place you are in emacs when you make the capture</span></span>
<span id="cb6-41"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-41" aria-hidden="true"></a>  <span class="co">;; that&#39;s very neat when you do that in an email for example.</span></span>
<span id="cb6-42"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-42" aria-hidden="true"></a>  (<span class="kw">setq</span> org-capture-templates</span>
<span id="cb6-43"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-43" aria-hidden="true"></a>        &#39;((<span class="st">&quot;t&quot;</span> <span class="st">&quot;todo&quot;</span>         entry (file <span class="st">&quot;~/.org/inbox.org&quot;</span>)</span>
<span id="cb6-44"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-44" aria-hidden="true"></a>           <span class="st">&quot;* TODO %?</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span>)</span>
<span id="cb6-45"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-45" aria-hidden="true"></a>          <span class="co">;; time tracker (clocked tasks)</span></span>
<span id="cb6-46"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-46" aria-hidden="true"></a>          (<span class="st">&quot;g&quot;</span> <span class="st">&quot;geek&quot;</span>         entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-47"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-47" aria-hidden="true"></a>           <span class="st">&quot;* GEEK %?         :perso:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-48"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-48" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-49"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-49" aria-hidden="true"></a>          (<span class="st">&quot;c&quot;</span> <span class="st">&quot;chat&quot;</span>         entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-50"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-50" aria-hidden="true"></a>           <span class="st">&quot;* CHAT %?         :work:chat:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-51"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-51" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-52"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-52" aria-hidden="true"></a>          (<span class="st">&quot;e&quot;</span> <span class="st">&quot;email&quot;</span>        entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-53"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-53" aria-hidden="true"></a>           <span class="st">&quot;* EMAIL %?        :work:email:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-54"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-54" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-55"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-55" aria-hidden="true"></a>          (<span class="st">&quot;m&quot;</span> <span class="st">&quot;meeting&quot;</span>      entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-56"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-56" aria-hidden="true"></a>           <span class="st">&quot;* MEETING %?      :work:meeting:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-57"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-57" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-58"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-58" aria-hidden="true"></a>          (<span class="st">&quot;r&quot;</span> <span class="st">&quot;review&quot;</span>       entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-59"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-59" aria-hidden="true"></a>           <span class="st">&quot;* REVIEW %?       :work:review:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-60"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-60" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-61"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-61" aria-hidden="true"></a>          (<span class="st">&quot;w&quot;</span> <span class="st">&quot;work&quot;</span>         entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-62"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-62" aria-hidden="true"></a>           <span class="st">&quot;* IN-PROGRESS %?  :work:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-63"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-63" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-64"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-64" aria-hidden="true"></a>          (<span class="st">&quot;p&quot;</span> <span class="st">&quot;pause&quot;</span>        entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-65"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-65" aria-hidden="true"></a>           <span class="st">&quot;* PAUSE %?        :pause:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-66"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-66" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-67"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-67" aria-hidden="true"></a>          (<span class="st">&quot;i&quot;</span> <span class="st">&quot;interruption&quot;</span> entry (file+olp+datetree <span class="st">&quot;~/.org/tracker.org&quot;</span>)</span>
<span id="cb6-68"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-68" aria-hidden="true"></a>           <span class="st">&quot;* IN-PROGRESS %?  :interruption:work:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">- ref :: %a</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-69"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-69" aria-hidden="true"></a>           :prepend <span class="kw">t</span> :tree-type week :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)</span>
<span id="cb6-70"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-70" aria-hidden="true"></a>          (<span class="st">&quot;f&quot;</span> <span class="st">&quot;chore&quot;</span>        entry (file <span class="st">&quot;~/.org/inbox.org&quot;</span>)</span>
<span id="cb6-71"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-71" aria-hidden="true"></a>           <span class="st">&quot;* IN-PROGRESS %?  :chore:</span><span class="sc">\n</span><span class="st">%U</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-72"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-72" aria-hidden="true"></a>           :clock-in <span class="kw">t</span> :clock-keep <span class="kw">t</span>)))</span>
<span id="cb6-73"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-73" aria-hidden="true"></a></span>
<span id="cb6-74"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-74" aria-hidden="true"></a>  <span class="co">;; How to create default clocktable</span></span>
<span id="cb6-75"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-75" aria-hidden="true"></a>  (<span class="kw">setq</span> org-clock-clocktable-default-properties</span>
<span id="cb6-76"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-76" aria-hidden="true"></a>        &#39;(:scope subtree :maxlevel <span class="dv">4</span> :timestamp <span class="kw">t</span> :link <span class="kw">t</span> :tags <span class="kw">t</span> :narrow <span class="dv">36</span>! :match <span class="st">&quot;work&quot;</span>))</span>
<span id="cb6-77"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-77" aria-hidden="true"></a></span>
<span id="cb6-78"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-78" aria-hidden="true"></a>  <span class="co">;; How to display default clock report in agenda view</span></span>
<span id="cb6-79"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-79" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-clockreport-parameter-plist</span>
<span id="cb6-80"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-80" aria-hidden="true"></a>        &#39;(:lang <span class="st">&quot;en&quot;</span> :maxlevel <span class="dv">4</span> :fileskip0 <span class="kw">t</span> :link <span class="kw">t</span> :indent <span class="kw">t</span> :narrow <span class="dv">80</span>!))</span>
<span id="cb6-81"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-81" aria-hidden="true"></a></span>
<span id="cb6-82"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-82" aria-hidden="true"></a>  <span class="co">;; *** Projectile; default TODO file to create in your projects</span></span>
<span id="cb6-83"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-83" aria-hidden="true"></a>  (<span class="kw">setq</span> org-projectile-file <span class="st">&quot;inbox.org&quot;</span>)</span>
<span id="cb6-84"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-84" aria-hidden="true"></a></span>
<span id="cb6-85"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-85" aria-hidden="true"></a>  <span class="co">;; *** Refile mapped to SPC y o r</span></span>
<span id="cb6-86"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-86" aria-hidden="true"></a>  (map! :leader :desc <span class="st">&quot;org-refile&quot;</span> <span class="st">&quot;y o r&quot;</span> #&#39;org-refile)</span>
<span id="cb6-87"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-87" aria-hidden="true"></a></span>
<span id="cb6-88"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-88" aria-hidden="true"></a>  <span class="co">;; Refile to either the =refile.org= file or to =agenda.org= org =standup.org=</span></span>
<span id="cb6-89"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-89" aria-hidden="true"></a>  (<span class="kw">setq</span> org-refile-target-files</span>
<span id="cb6-90"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-90" aria-hidden="true"></a>        &#39;(<span class="st">&quot;~/.org/tracker.org&quot;</span></span>
<span id="cb6-91"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-91" aria-hidden="true"></a>          <span class="st">&quot;~/.org/inbox.org&quot;</span>))</span>
<span id="cb6-92"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-92" aria-hidden="true"></a></span>
<span id="cb6-93"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-93" aria-hidden="true"></a>  (<span class="kw">setq</span> org-refile-targets</span>
<span id="cb6-94"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-94" aria-hidden="true"></a>        &#39;((<span class="kw">nil</span> :maxlevel . <span class="dv">5</span>)</span>
<span id="cb6-95"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-95" aria-hidden="true"></a>          (org-refile-target-files :maxlevel . <span class="dv">5</span>)))</span>
<span id="cb6-96"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-96" aria-hidden="true"></a></span>
<span id="cb6-97"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-97" aria-hidden="true"></a>  <span class="co">;; *** Agenda</span></span>
<span id="cb6-98"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-98" aria-hidden="true"></a>  (<span class="kw">setq</span> org-log-into-drawer <span class="kw">t</span>) <span class="co">;; hide the log state change history a bit better</span></span>
<span id="cb6-99"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-99" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-files org-refile-target-files)</span>
<span id="cb6-100"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-100" aria-hidden="true"></a>  (<span class="kw">setq</span> org-deadline-warning-days <span class="dv">7</span>)</span>
<span id="cb6-101"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-101" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-skip-scheduled-if-deadline-is-shown <span class="kw">t</span>)</span>
<span id="cb6-102"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-102" aria-hidden="true"></a>  (<span class="kw">setq</span> org-habit-show-habits-only-for-today <span class="kw">nil</span>)</span>
<span id="cb6-103"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-103" aria-hidden="true"></a>  (<span class="kw">setq</span> org-habit-graph-column <span class="dv">65</span>)</span>
<span id="cb6-104"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-104" aria-hidden="true"></a>  (<span class="kw">setq</span> org-duration-format &#39;h:mm) <span class="co">;; show hours at max, not days</span></span>
<span id="cb6-105"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-105" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-compact-blocks <span class="kw">t</span>)</span>
<span id="cb6-106"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-106" aria-hidden="true"></a>  <span class="co">;; default show today</span></span>
<span id="cb6-107"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-107" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-span &#39;day)</span>
<span id="cb6-108"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-108" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-start-day <span class="st">&quot;-0d&quot;</span>)</span>
<span id="cb6-109"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-109" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-start-on-weekday <span class="kw">nil</span>)</span>
<span id="cb6-110"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-110" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-custom-commands</span>
<span id="cb6-111"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-111" aria-hidden="true"></a>        &#39;((<span class="st">&quot;d&quot;</span> <span class="st">&quot;Done tasks&quot;</span> tags <span class="st">&quot;/DONE|CANCELED&quot;</span>)</span>
<span id="cb6-112"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-112" aria-hidden="true"></a>          (<span class="st">&quot;g&quot;</span> <span class="st">&quot;Plan Today&quot;</span></span>
<span id="cb6-113"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-113" aria-hidden="true"></a>           ((agenda <span class="st">&quot;&quot;</span> ((org-agenda-span &#39;day)))</span>
<span id="cb6-114"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-114" aria-hidden="true"></a>            (org-agenda-skip-function &#39;(org-agenda-skip-deadline-if-not-today))</span>
<span id="cb6-115"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-115" aria-hidden="true"></a>            (org-agenda-entry-types &#39;(:deadline))</span>
<span id="cb6-116"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-116" aria-hidden="true"></a>            (org-agenda-overriding-header <span class="st">&quot;Today&#39;s Deadlines &quot;</span>)))))</span>
<span id="cb6-117"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-117" aria-hidden="true"></a>  (<span class="kw">setq</span> org-agenda-window-setup &#39;only-window)</span>
<span id="cb6-118"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-118" aria-hidden="true"></a></span>
<span id="cb6-119"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-119" aria-hidden="true"></a>  (<span class="kw">defun</span><span class="fu"> y/go-to-today-agenda </span>()</span>
<span id="cb6-120"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-120" aria-hidden="true"></a>    (interactive)</span>
<span id="cb6-121"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-121" aria-hidden="true"></a>    (org-agenda <span class="kw">nil</span> <span class="st">&quot;a&quot;</span>))</span>
<span id="cb6-122"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-122" aria-hidden="true"></a>  <span class="co">;; Faster jump to agenda today keybinding shortcut (SPC y a)</span></span>
<span id="cb6-123"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-123" aria-hidden="true"></a>  (map! :leader</span>
<span id="cb6-124"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-124" aria-hidden="true"></a>        :desc <span class="st">&quot;Today&#39;s agenda&quot;</span></span>
<span id="cb6-125"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-125" aria-hidden="true"></a>        <span class="st">&quot;y a&quot;</span> #&#39;y/go-to-today-agenda)</span>
<span id="cb6-126"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-126" aria-hidden="true"></a></span>
<span id="cb6-127"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-127" aria-hidden="true"></a>  <span class="co">;; ** Org Annotate</span></span>
<span id="cb6-128"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-128" aria-hidden="true"></a></span>
<span id="cb6-129"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-129" aria-hidden="true"></a>  <span class="co">;; Ability to take annotate some files, can of double usage with org-capture.</span></span>
<span id="cb6-130"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-130" aria-hidden="true"></a>  <span class="co">;; Still, I keep that keyboard shortcut here.</span></span>
<span id="cb6-131"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-131" aria-hidden="true"></a>  <span class="co">;; (evil-leader/set-key &quot;oa&quot; &#39;org-annotate-file)</span></span>
<span id="cb6-132"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-132" aria-hidden="true"></a>  (<span class="kw">setq</span> org-annotate-file-storage-file <span class="st">&quot;~/.org/annotations.org&quot;</span>)</span>
<span id="cb6-133"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-133" aria-hidden="true"></a></span>
<span id="cb6-134"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-134" aria-hidden="true"></a></span>
<span id="cb6-135"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-135" aria-hidden="true"></a>  <span class="co">;; ** Org colums</span></span>
<span id="cb6-136"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-136" aria-hidden="true"></a>  <span class="co">;; Can be nice sometime to have that column view</span></span>
<span id="cb6-137"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-137" aria-hidden="true"></a>  <span class="co">;; give a felling of Excel view</span></span>
<span id="cb6-138"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-138" aria-hidden="true"></a>  (<span class="kw">setq</span> org-columns-default-format</span>
<span id="cb6-139"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-139" aria-hidden="true"></a>        <span class="st">&quot;%TODO %3PRIORITY %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM %8TAGS(TAG)&quot;</span>)</span>
<span id="cb6-140"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-140" aria-hidden="true"></a>  (map! :leader <span class="st">&quot;y o c&quot;</span> #&#39;org-columns)</span>
<span id="cb6-141"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-141" aria-hidden="true"></a></span>
<span id="cb6-142"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-142" aria-hidden="true"></a>  <span class="co">;; ** Deft</span></span>
<span id="cb6-143"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-143" aria-hidden="true"></a>  <span class="co">;; useful to find files and jump to them</span></span>
<span id="cb6-144"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-144" aria-hidden="true"></a>  (<span class="kw">setq</span> deft-extensions &#39;(<span class="st">&quot;org&quot;</span> <span class="st">&quot;gpg&quot;</span> <span class="st">&quot;md&quot;</span> <span class="st">&quot;txt&quot;</span>))</span>
<span id="cb6-145"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-145" aria-hidden="true"></a>  (<span class="kw">setq</span> deft-recursive <span class="kw">t</span>)</span>
<span id="cb6-146"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-146" aria-hidden="true"></a>  (<span class="kw">setq</span> deft-use-filter-string-for-filename <span class="kw">t</span>)</span>
<span id="cb6-147"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-147" aria-hidden="true"></a>  (<span class="kw">setq</span> deft-default-extension <span class="st">&quot;org&quot;</span>)</span>
<span id="cb6-148"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-148" aria-hidden="true"></a>  (<span class="kw">setq</span> deft-directory <span class="st">&quot;~/.org&quot;</span>)</span>
<span id="cb6-149"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-149" aria-hidden="true"></a></span>
<span id="cb6-150"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-150" aria-hidden="true"></a></span>
<span id="cb6-151"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-151" aria-hidden="true"></a>  <span class="co">;; Org Babel</span></span>
<span id="cb6-152"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-152" aria-hidden="true"></a>  (org-babel-do-load-languages</span>
<span id="cb6-153"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-153" aria-hidden="true"></a>   &#39;org-babel-load-languages</span>
<span id="cb6-154"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-154" aria-hidden="true"></a>   &#39;(<span class="co">;; other Babel languages</span></span>
<span id="cb6-155"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-155" aria-hidden="true"></a>     (shell . <span class="kw">t</span>)</span>
<span id="cb6-156"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-156" aria-hidden="true"></a>     (http . <span class="kw">t</span>)</span>
<span id="cb6-157"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-157" aria-hidden="true"></a>     (clojure . <span class="kw">t</span>)</span>
<span id="cb6-158"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-158" aria-hidden="true"></a>     (haskell . <span class="kw">t</span>)</span>
<span id="cb6-159"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-159" aria-hidden="true"></a>     (plantuml . <span class="kw">t</span>) <span class="co">;; UML graphs</span></span>
<span id="cb6-160"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-160" aria-hidden="true"></a>     (gnuplot . <span class="kw">t</span>)))</span>
<span id="cb6-161"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-161" aria-hidden="true"></a>  (<span class="kw">setq</span> org-plantuml-jar-path <span class="st">&quot;~/bin/plantuml.jar&quot;</span>))</span>
<span id="cb6-162"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-162" aria-hidden="true"></a></span>
<span id="cb6-163"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-163" aria-hidden="true"></a>(use-package! org</span>
<span id="cb6-164"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb6-164" aria-hidden="true"></a>  :config (org-mode-config))</span></code></pre></div><p>And also</p><div class="m" id="cb7" data-org-language="emacs-lisp"><pre class="m commonlisp"><code class="m commonlisp"><span id="cb7-1"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-1" aria-hidden="true"></a>(use-package! org-super-agenda</span>
<span id="cb7-2"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-2" aria-hidden="true"></a>  :after org-agenda</span>
<span id="cb7-3"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-3" aria-hidden="true"></a>  :custom (org-super-agenda-groups</span>
<span id="cb7-4"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-4" aria-hidden="true"></a>           &#39;( <span class="co">;; Each group has an implicit boolean OR operator between its selectors.</span></span>
<span id="cb7-5"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-5" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Overdue&quot;</span> :deadline past :order <span class="dv">0</span>)</span>
<span id="cb7-6"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-6" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Evening Habits&quot;</span> :and (:habit <span class="kw">t</span> :tag <span class="st">&quot;evening&quot;</span>) :order <span class="dv">8</span>)</span>
<span id="cb7-7"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-7" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Habits&quot;</span> :habit <span class="kw">t</span> :order <span class="dv">6</span>)</span>
<span id="cb7-8"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-8" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Today&quot;</span> <span class="co">;; Optionally specify section name</span></span>
<span id="cb7-9"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-9" aria-hidden="true"></a>              :time-grid <span class="kw">t</span>  <span class="co">;; Items that appear on the time grid (scheduled/deadline with time)</span></span>
<span id="cb7-10"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-10" aria-hidden="true"></a>              :order <span class="dv">3</span>)     <span class="co">;; capture the today first but show it in order 3</span></span>
<span id="cb7-11"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-11" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Low Priority&quot;</span> :priority <span class="st">&quot;C&quot;</span> :tag <span class="st">&quot;maybe&quot;</span> :order <span class="dv">7</span>)</span>
<span id="cb7-12"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-12" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Due Today&quot;</span> :deadline today :order <span class="dv">1</span>)</span>
<span id="cb7-13"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-13" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Important&quot;</span></span>
<span id="cb7-14"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-14" aria-hidden="true"></a>              :and (:priority <span class="st">&quot;A&quot;</span> :not (:todo (<span class="st">&quot;DONE&quot;</span> <span class="st">&quot;CANCELED&quot;</span>)))</span>
<span id="cb7-15"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-15" aria-hidden="true"></a>              :order <span class="dv">2</span>)</span>
<span id="cb7-16"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-16" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Due Soon&quot;</span> :deadline future :order <span class="dv">4</span>)</span>
<span id="cb7-17"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-17" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Todo&quot;</span> :not (:habit <span class="kw">t</span>) :order <span class="dv">5</span>)</span>
<span id="cb7-18"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-18" aria-hidden="true"></a>             (<span class="bu">:name</span> <span class="st">&quot;Waiting&quot;</span> :todo (<span class="st">&quot;WAITING&quot;</span> <span class="st">&quot;HOLD&quot;</span>) :order <span class="dv">9</span>)))</span>
<span id="cb7-19"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-19" aria-hidden="true"></a>  :config</span>
<span id="cb7-20"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-20" aria-hidden="true"></a>  (<span class="kw">setq</span> org-super-agenda-header-map <span class="kw">nil</span>)</span>
<span id="cb7-21"><a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#cb7-21" aria-hidden="true"></a>  (org-super-agenda-mode <span class="kw">t</span>))</span></code></pre></div><h2 id="conclusions">Conclusions</h2><p>That article is already quite long. But if you intend to dig into org mode, this can be a nice default starting point.</p><p>I haven't really dig into some details but only given you the ability to start not completely from scratch and with decent default values for an already advanced usage.</p><p>To resume:</p><ul><li><code>SPC y a</code> â Show agenda view for today</li><li><code>SPC X</code> â Capture a new task, write a description, then <code>C-c C-c</code>, save that in <code>tracker.org</code> (or <code>inbox.org</code> depending of the capture template)</li><li><code>SPC n o</code> â jump to the current time tracked tasks</li><li><code>SPC m c o</code> â stop the clock on that task; if you capture a new time tracking tasks you don't need to clock-out</li><li><code>SPC y o r</code> â <code>org-refile</code>, meaning move that task somewhere else</li><li><code>SPC q</code> â add/remove tags to that task</li></ul><h2 id="footnotes">Footnotes</h2><section class="s" role="doc-endnotes"><hr></hr><ol><li id="fn1" role="doc-endnote"><p><em>Short digression</em>: Historically, I coded using different IDEs. Then I worked for a company that forced me to use terrible keyboards and after just a few weeks I started to have serious wrist issues. So to minimize that pain I switched to vim. And it was <em>awesome</em>. Once you're use to the power of vim keybinding forever your soul will bound to them. So learning vim is a bit like learning a new music instrument. You need to construct some muscle memory and integrate one after one new tricks. Once learned your personal editing power start to become overwhelming.</p><p>After a few years of vim, I wanted to try to explore new editor tooling. So I switched to emacs using the spacemacs distribution. So mainly it's vim but with even better keybindgs, helpers and within emacs. The main reason for the switch was that vimscript is a really bad language to configure your editor. Emacs use emacs-LISP. For editor customization a LISP looked perfect to me. LISP is still one of the most powerful and easy to use programming language to date.</p><p>And recently, as my personal configuration started to grow so much I switched to <a href="https://github.com/hlissner/doom-emacs">doom-emacs</a>. I was quite hesitant to do the switch but so far its been a pleasure. IMHO using <a href="https://github.com/hlissner/doom-emacs">doom-emacs</a> is a lot better than using my own personal configuration from scratch because I wouldn't be able to end up with so much configuration quality.<a href="https://her.esy.fun/posts/0015-how-i-use-org-mode/index.html#fnref1" class="c" role="doc-backlink">â©ï¸</a></p></li></ol></section></div>
]]></description>
</item>


<item>
<title>Auto change emacs theme</title>
<guid>https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html</guid>
<pubDate>Tue, 22 Sep 2020 00:00:00 +0200</pubDate>
<category>emacs</category>
<description><![CDATA[
<div id="content"><p>One thing I kind of like is the ability to change emacs theme depending of the hour. There are two possibilities. One would be to sync with the sun using the current location. There is an emacs package for that. It's called <a href="https://github.com/hadronzoo/theme-changer">theme-changer</a> which at the time of writing those lines is asking for a new maintainer. This theme changer is very elegant because like macOS use the location to determine if it is day or night. But I wanted to have more themes from morning to night:</p><ol><li>early morning: deep yellow (gruvbox-light),</li><li>morning: light yellow (solarized-light),</li><li>day: grey/blueish during the day (nord-light),</li><li>evening: deep yellow again (gruvbox-light)</li><li>night: dark theme (oceanic-next)</li><li>sleep time: neon-like (laserwave)</li></ol><p>And also, I wanted that to follow my working hours and not really the sun. I might change my mind and use the code of theme-changer to follow the curve of the sun. But for now, just using straight hours should be good enough. So here is my piece of code I added to my doom-emacs <code>config.el</code>:</p><div class="m" id="cb1" data-org-language="emacs-lisp"><pre class="m commonlisp"><code class="m commonlisp"><span id="cb1-1"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-1" aria-hidden="true"></a>(<span class="kw">defun</span><span class="fu"> y/auto-update-theme </span>()</span>
<span id="cb1-2"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-2" aria-hidden="true"></a>  <span class="st">&quot;depending on time use different theme&quot;</span></span>
<span id="cb1-3"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-3" aria-hidden="true"></a>  <span class="co">;; very early =&gt; gruvbox-light, solarized-light, nord-light</span></span>
<span id="cb1-4"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-4" aria-hidden="true"></a>  (<span class="kw">let*</span> ((hour (<span class="kw">nth</span> <span class="dv">2</span> (decode-time (current-time))))</span>
<span id="cb1-5"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-5" aria-hidden="true"></a>         (theme (<span class="kw">cond</span> ((<span class="op">&lt;=</span> <span class="dv">7</span> hour <span class="dv">8</span>)   &#39;doom-gruvbox-light)</span>
<span id="cb1-6"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-6" aria-hidden="true"></a>                      ((<span class="op">=</span> <span class="dv">9</span> hour)      &#39;doom-solarized-light)</span>
<span id="cb1-7"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-7" aria-hidden="true"></a>                      ((<span class="op">&lt;=</span> <span class="dv">10</span> hour <span class="dv">16</span>) &#39;doom-nord-light)</span>
<span id="cb1-8"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-8" aria-hidden="true"></a>                      ((<span class="op">&lt;=</span> <span class="dv">17</span> hour <span class="dv">18</span>) &#39;doom-gruvbox-light)</span>
<span id="cb1-9"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-9" aria-hidden="true"></a>                      ((<span class="op">&lt;=</span> <span class="dv">19</span> hour <span class="dv">22</span>) &#39;doom-oceanic-next)</span>
<span id="cb1-10"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-10" aria-hidden="true"></a>                      (<span class="kw">t</span>               &#39;doom-laserwave))))</span>
<span id="cb1-11"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-11" aria-hidden="true"></a>    (<span class="kw">when</span> (<span class="kw">not</span> (<span class="kw">equal</span> doom-theme theme))</span>
<span id="cb1-12"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-12" aria-hidden="true"></a>      (<span class="kw">setq</span> doom-theme theme)</span>
<span id="cb1-13"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-13" aria-hidden="true"></a>      (load-theme doom-theme <span class="kw">t</span>))</span>
<span id="cb1-14"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-14" aria-hidden="true"></a>    <span class="co">;; run that function again next hour</span></span>
<span id="cb1-15"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-15" aria-hidden="true"></a>    (run-at-time (<span class="kw">format</span> <span class="st">&quot;%02d:%02d&quot;</span> (<span class="op">+</span> hour <span class="dv">1</span>) <span class="dv">0</span>) <span class="kw">nil</span> &#39;y/auto-update-theme)))</span>
<span id="cb1-16"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-16" aria-hidden="true"></a></span>
<span id="cb1-17"><a href="https://her.esy.fun/posts/0014-change-emacs-theme-automatically/index.html#cb1-17" aria-hidden="true"></a>(y/auto-update-theme)</span></code></pre></div><p>I'm still playing with it. So there still might be a bug. Use at your own risk. Happy hacking to all of you.</p></div>
]]></description>
</item>


<item>
<title>How to choose your tools</title>
<guid>https://her.esy.fun/posts/0013-how-to-choose-your-tools/index.html</guid>
<pubDate>Sat, 09 May 2020 00:00:00 +0200</pubDate>
<category>emacs</category>
<category>softwares</category>
<description><![CDATA[
<div id="content"><p>This week I didn't take a look at HN to grab some news. And this week-end, in the morning I read those:</p><ul><li><a href="https://news.ycombinator.com/item?id=23102430">Zoom acquires keybase</a></li><li><a href="https://news.ycombinator.com/item?id=23107123">Making Emacs popular again</a></li><li><a href="https://news.ycombinator.com/item?id=23092904">Github Codespace</a></li></ul><figure><img src="https://her.esy.fun/posts/0013-how-to-choose-your-tools/Welcome-to-Halsingland.jpg" title="Welcome to Halsingland" alt="Midsommar Welcome" alt="Welcome to Halsingland"></img><figcaption aria-hidden="true">Welcome to Halsingland</figcaption></figure><p>Similar articles have existed for years on different products. What is their common point? <em>Software tooling and their potential change and disappearance</em>.</p><p>Across the years, too many times I saw tools disappear. By tools I mean applications, web applications, web sites. I think we can also include programming languages, control versioning tools, building tools, package manager, etcâ¦</p><p>The story can be quite different. Sometimes the disappearance of a tool is positive, because I found a better one (from cvs to svn to git). But, too often, the tool simply disappears or worse downgrade its quality. I think we can find different names for those softwares:</p><ul><li><em>bloatware</em>: remember digg, stumbleupon, windows?</li><li><em>downgradeware</em>: Swagger-UI v3 (v2 is neat), reddit new redesign (looks better, but slow)</li><li><em>payware</em>: Useful free service ask for money now. Or cost a lot more.</li><li><em>crapware</em>: Stop to works, quality degrate unless you pay: Twitter streaming API?</li><li><em>dieware</em>: Remember Friendfeed, Google Readerâ¢, etcâ¦</li><li>etcâ¦</li></ul><p>This is often quite frustrating because you lose a lot of your investment with that tool.</p><p>Regarding Github Codespace; the integration of VSCodeâ¢ inside GitHubâ¢ can be even worse. This is what I would call a <em>trapware</em>.</p><div class="bf"><p><em>trapware</em>: A software that is intended to put you inside a closed ecosystem. By slowly but surely add features that while looking great for the user at first sight will prevent interoperability with other tools.</p></div><p>Furthermore, the fact that Microsoft is involved give this story a taste of <a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish">Embrace, Extend and Extinguish</a>.</p><p>My real concern is that it could become a <em>work framework</em>. This could impose the full tooling on a lot of developers without giving them the freedom of choice.</p><p>For a startup CTO/CEO this GitHubâ¢ Codespaceâ¢ could offer the following advantages:</p><ul><li><em>security</em>: impossible or very hard to steal the source code by a single dev.</li><li><em>homogeneity</em>: all dev must use the same development environment. Thus the integration of new dev is faster.</li><li><em>cheaper</em>: don't need to pay for a full featured, fast machine to each new developer. A less performant machine able to display an electron app will do the trick.</li><li><em>stats</em>: you can observe the throughput of your developers. How many commits a day, how many lines of code, etcâ¦ How much bugs involved which part of the code and thus which dev to blame? How much time the dev is typing, moving its mouse, how much copy/paste is involved, etcâ¦</li></ul><p>For the single developers and open source developers this offer:</p><ul><li><em>homogeneity</em>: if I learn how to work in this environment, I'll be easier to recruit and I'll know how to work fast.</li><li><em>lower barrier to entry</em>: for an opensource repository, it will become much easier for anyone to propose a PR to fix some issue. No need to local clone the project, no need to download all the dependencies to test it locally, etcâ¦</li></ul><p>But the price to pay is hidden.</p><figure><img src="https://her.esy.fun/posts/0013-how-to-choose-your-tools/midsommar-cry.jpg" alt="Midsommar Sorrow" alt="Midsommar Sorrow"></img><figcaption aria-hidden="true">Midsommar Sorrow</figcaption></figure><ol><li>First, you are now, not able to choose your local working environment on your machine.</li><li>GitHubâ¢ can still change so much to become one of the previously mentionned <code>/.*ware/</code> you don't want to be involved with. They could forces you to pay a lot more, remove features, redesign to a bloatware, make it harder to interop with other platforms (prefer Azure to AWS etcâ¦).</li><li>If everything involve machines in the cloud via the browser and via authorized plugins only. A lot of tools, features will never be allowed in this new ecosystem.</li><li>Surveillance on meaningless or wrong metrics about your work. Instead of being evaluated on the feature you shipped or on other higher level metrics. It will be very tempting for your bosses to find flaws in your working habits. We are already living in a world were surveillance, metrics and stats are too easy to grab about a person. And anyone involved know this is all bullshit. Human are very good to play those kind of games. So people really working hard for the best will certainly perform badly compared to other people that simply trick the system.</li></ol><p>So as good as Codespace can be, I think this warning is good to keep that in mind. Don't put yourself in a trap.</p><p>The <a href="https://news.ycombinator.com/item?id=23102430">Zoom acquires keybase</a> is just another story of a dying product. Apparently the keybase team will probably stop maintaining keybase. The idea behind keybase was pretty nice. And they filled a gap in the current open source world.</p><p>The last article I mentionned was <a href="https://news.ycombinator.com/item?id=23107123">Making Emacs popular again</a>. The first comment in HN was about how VSCode is easy to start with as compared to Emacs that need a lot more time to configure correctly for your needs. Yes, VSCode certainly just work and is easy to use. But Emacs is another beast. VSCode can become bad very fast, you don't control how it will evolve. The fact that this is a succesful Microsoft product does not garanty it will keep its currently quality. Emacs on the other hand is 44 year old and was designed so that it adapts to you. You are the one using libs and customizing it.</p><p>The argument to chose VSCode instead of Emacs look similar to me to the debate "Frameworks vs Libraries". Frameworks are easier to start with, but soon you find corner cases were you start to fight against them.</p><p>A Library on the other hand, is just a bunch of helpers you can use. And if you need another functionality, just make it using the libraries. But you have a lot more work to do yourself.</p><p>The common pattern I see during choice decision is often reducible to:</p><ol><li>Easy now, but less extensible and harder in the long run.</li><li>Harder now, but more extensible and easier in the long run.</li></ol><p>As a conclustion I would state that when you need to choose between different tools. Take the time to think about the investment costs. Sometime, the bit of pain in the begining is worth it. In particular if you are going to use this tool every days for many hours during the following years. If on the other hand you don't plan to use that tool much. Going with the easy option is certainly the best choice.</p><p>I consider Emacs to be of the 2nd option when compared to VSCode. Harder to start, but with a lot more control and potential power that you will probably never be able to get with most modern IDE/Editor. Also choosing a Free Software<a href="https://her.esy.fun/posts/0013-how-to-choose-your-tools/index.html#fn1" class="g" id="fnref1" role="doc-noteref"><sup>1</sup></a> gives you a lot more control about its future.</p><h2 id="post-conclusion">Post-conclusion â Emacs is awesome</h2><figure><img src="https://her.esy.fun/posts/0013-how-to-choose-your-tools/midsommar-joy.jpg" alt="Midsommar Joy" alt="Midsommar Joy"></img><figcaption aria-hidden="true">Midsommar Joy</figcaption></figure><p>To go beyond my opinion, I'd like to share my experience with editors and emacs.</p><p>When I started to be serious about coding, I was taught to use vi, not vim, vi. I only knew a few survival vi commands: <code>i</code>, <code>a</code>, <code>dd</code> and <code>cw</code>. A few years later I started to use IDEs and I was thrilled. A few years forward I started to work for a company that forced me to use their shitty computers. Quite soon, I started to have wrist issues. Thus I decided to use vim again but be serious about it this time. And I saw the benefits only after a few weeks. They were tremendous. No more wrist pain. And an incredible edition power at the tip of my fingers<a href="https://her.esy.fun/posts/0013-how-to-choose-your-tools/index.html#fn2" class="g" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p><p>Then, I started a new job where we decided to code in Clojure. Of course Clojure being a LISP and emacs using also a LISP as script language, it sound natural to try Emacs even though I loved Vim. I started by installing spacemacs. At that time I didn't want to invest much time in learning Emacs. I just wanted to learn the tricks that will make Emacs more valuable to my work. It did after just a few days or maybe weeks. I used Emacs superficially for years. This was already quite efficient, at least as much as vim.</p><p>Recently I dug deeper. I heard much praise about org-mode and I became curious. I discovered why it is so great. Basic org-mode is already quite valuable. But if you dig, it starts to be awesome. Unfortunately this is a bit hard to describe how org-mode is great without really digging a bit.</p><p>You can think of org-mode as an extremely versatile todo-list and note taker with agenda and time tracking integration. You are in deep control of your workflow. But mainly here are a few example of usages that are really worth it:</p><ul><li>note taker</li><li>documentation; this is a far better than markdown</li><li>interactive document; run code inside the doc, keep track of the results</li><li>export to HMTL/PDF</li><li>time tracking</li><li>reminders</li></ul><p>Recently there is also org-roam that is a step further to make orgmode a nice place to keep track of all your knowledge in one place. You can take a look at this <a href="https://www.youtube.com/watch?v=Lg61ocfxk3c">great video</a> by Matt Williams.</p><p>Emacs changed my workflow by making me more productive. It improved not only my coding workflow, but my full work environment. I started with the editor, a few plugins, and slowly, I integrated more aspect of my day to day tasks in emacs. Emacs is designed to adapt to your own needs. As such it is a lot easier to automate a lot of small tasks.</p><p>I really love Emacs and if you want to joyfully join the Emacs users here are my advices:</p><p>Start by using either <a href="https://www.spacemacs.org">spacemacs</a> or <a href="https://github.com/hlissner/doom-emacs">doom-emacs</a>. It will take a few weeks to absorb vim keybindings. Slowly you'll start to learn how to configure it for your needs.</p><p>I really advise you to take a look at org-mode. Mastering it could change your carrier. Im my opinion <a href="https://orgmode.org">org-mode</a> alone is a good reason enough to use emacs. But there are a lot more to discover.</p><p>However, if you are used to tools from startups, with nice UI/UX. Almost no configuration cost. Be aware that digging in Free Softwares is a lot different. Instead of having a big bundle with everything prepared to work you you will need to take the time to configure each part of a big system separately.</p><p>Howevery I'm deeply convinced the investment is really worth it.</p><section class="s" role="doc-endnotes"><hr></hr><ol><li id="fn1" role="doc-endnote"><p>note I said <em>free software</em> and not <em>open source</em>; c.f <a href="https://www.gnu.org/philosophy/open-source-misses-the-point.en.html">Why Open Source misses the point of Free Software</a><a href="https://her.esy.fun/posts/0013-how-to-choose-your-tools/index.html#fnref1" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn2" role="doc-endnote"><p><a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">Lear Vim Progressively</a> is an old "popular" blog post of mine.<a href="https://her.esy.fun/posts/0013-how-to-choose-your-tools/index.html#fnref2" class="c" role="doc-backlink">â©ï¸</a></p></li></ol></section></div>
]]></description>
</item>


<item>
<title>Solaryzed: A Generalisation of Solarized</title>
<guid>https://her.esy.fun/posts/0012-solaryzed-theme/index.html</guid>
<pubDate>Sun, 01 Mar 2020 00:00:00 +0100</pubDate>
<category>colorscheme</category>
<description><![CDATA[
<div id="content"><p>After many years using <a href="https://ethanschoonover.com/solarized/">Solarized</a> I changed to a new one. I use it for my terminal, emacs and most of my tools.</p><p>This is inspired by both <a href="https://ethanschoonover.com/solarized/">Solarized</a> and <a href="https://nordtheme.com">Nord</a>. I switched because I wanted a greyer theme.</p><p>Ethan Shoovnover the creator of Solarized gave plenty of information about the creation of his colorscheme. And I stumbled upon the <a href="https://nordtheme.com">Nord</a> theme. And I really liked it. But while the colors are great, it is not as easy to switch from light to dark theme than with solarized because Solarized has a lot of nice properties.</p><p>So I kept the main principle used to create Solarized but freed a few parameters. The tint of the dark and light colors for the background and the text, as well as the contrast of the colors.</p><p>And I created this minimal application in Purescript:</p><p><a href="https://solaryzed.esy.fun">https://solaryzed.esy.fun</a></p><p>It is still not perfect, because the real theme I use for my website as a slightly bigger contrast for text.</p><p>Here is the CSS you could use:</p></div>
]]></description>
</item>


<item>
<title>Add links to code block during orgmode export</title>
<guid>https://her.esy.fun/posts/0011-export-tangle-names/index.html</guid>
<pubDate>Sat, 29 Feb 2020 00:00:00 +0100</pubDate>
<category>org-mode</category>
<category>blog</category>
<description><![CDATA[
<div id="content"><p>I wanted to add a link to the file I export with org tangle. And it was surprisingly difficult to find. Apparently I am one of the few people that use orgmode the way I do.</p><p>Using orgmode file as markdown to blog. And exporting to a different file some code block. So I often endup writing something like:</p><pre class="cq"><code>..begin_src elisp :tangle foo.el
</code></pre><p>I tangle the source code that export the code block to an external file. Then I use this hook during HTML export to add a caption with the link the file I tangled:</p><pre class="bm" data-tangle="org_html_export_show_tangle.el"><code>(defun my-add-link-to-tangled-files (backend)
  &quot;Add a link just before source code block with tangled files.
BACKEND is the export backend. Used as symbol.&quot;
  (while ;; (re-search-forward )
      (re-search-forward &quot;^\\( *\\)#\\+begin_src .*:tangle \\([^\s\n]*\\)&quot; nil t)
    (replace-match &quot;\\1#+CAPTION: [[./\\2][=\\2=]]\n\\&amp;&quot;)))

(add-hook &#39;org-export-before-processing-hook
          &#39;my-add-link-to-tangled-files)
</code></pre><p>And this article is an example of the result. The link with the listing is generated automatically for me.</p><p>A small note regarding CSS. My <code>pre</code> have a <code>margin-top</code>. But I wanted to get rid of it when the previous block was a <code>label</code>. This is achievable with:</p><div class="m" id="cb3"><pre class="m css"><code class="m css"><span id="cb3-1"><a href="https://her.esy.fun/posts/0011-export-tangle-names/index.html#cb3-1" aria-hidden="true"></a>label <span class="op">+</span> pre {<span class="kw">margin-top</span>: <span class="dv">0</span><span class="op">;</span>}</span></code></pre></div><p>That's it. It took me really a long time to just think about using caption, and not trying something smarter like injecting html code, etcâ¦ So I hope it could help someone.</p></div>
]]></description>
</item>


<item>
<title>Learn Haskell Now!</title>
<guid>https://her.esy.fun/posts/0010-Haskell-Now/index.html</guid>
<pubDate>Sun, 15 Dec 2019 00:00:00 +0100</pubDate>
<category>Haskell</category>
<category>programming</category>
<category>functional</category>
<category>tutorial</category>
<description><![CDATA[
<div id="content"><blockquote><p><strong>Prelude</strong></p><p>In 2012, I really believed that every developer should learn Haskell. This is why I wrote my old article. This is the end of 2019 and I still strongly believe that. I think you should at least be able to understand enough Haskell to write a simple tool. There are some features in Haskell that I really miss in most programming languages and that would not appear to be difficult to provide. Typically sum types. A concept so simple yet so helpful.</p><p>Since I wrote my article the Haskell ecosystem has evolved:</p><ol><li>Project building has different existing solutions. When I wrote this article I made some web applications that I can no longer build today. I mean, if I really want to invest some time, I'm sure I could upgrade those projects to build again. But this is not worth the hassle. Now we have <code>stack</code>, <code>nix</code>, <code>cabal new-build</code> and I'm sure other solutions.</li><li>GHC is able to do a lot more magic. This is beyond the scope of an introduction material in my opinion. While the learning curve is as steep as before, the highest point of learning just climbed higher and higher with each successive new GHC release.</li><li>Still no real consencus about how to work, learn, and use Haskell. In my opinion there are three different perspectives on Haskell that could definitively change how you make decisions about different aspect of Haskell programming. I believe the main groups of ideolgies are application developers, library developers and the main compiler (GHC) developers. I find those tensions a proof of a healthy environment. There are different solutions to the same problems and that is perfectly fine. This is different when you compare to other language ecosystems where decisions are more controlled or enforced. I feel fine with both approaches. But you must understand that there is no central mindset within Haskellers unlike I can find in some other programming language communities.</li><li>I think that Haskell is now perceived as a lot more serious programming language now. A lot more big projects uses Haskell. Haskell proved its utility to write succesful complex entreprise projects.</li></ol><p>While the ecosystem evolved I believe that I myself have certainly matured. Since 2013 I'm paid to develop in Clojure. I write most of my personal side projects in Haskell or in some Haskell-inspired language.</p><p>As such I can follow two functional programming communities growth and evolution. I am kind of confident that my Haskell understanding is a lot better than before. But I still think, the ability to learn new Haskell subject is infinite.</p><p>Someday I would like to write a post about my current team philosophy about programming. Our main rule is to use as few features of a programming language as possible to achieve our goal. This is a kind of merge between minimalism and pragmatism that in the end provide a tremendous amount of benefits. This is why, even if I like to play with the latest Haskell trendy features, I generally program without those. With just a very few amount of Haskell features you will already be in enviromnent with a <strong>lot</strong> of benefits as compared to many programming languages.</p><p>So enough talk, here is my updated article. I added a section about how to create a new project template with nix.</p><p>I will try to write other articles about how to write a real program in Haskell. I tried to add those to this already long article, but, it occurs to be more work than expected. So I preferred stop at this point for now and provide separate articles in the future related to Haskell application development.</p></blockquote><h1 id="introduction">Introduction</h1><p>I really believe that every developer should learn Haskell. I don't think every dev needs to be a super Haskell ninja, but they should at least discover what Haskell has to offer. Learning Haskell opens your mind.</p><p>Mainstream languages share the same foundations:</p><ul><li>variables</li><li>loops</li><li>pointers<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn1" class="g" id="fnref1" role="doc-noteref"><sup>1</sup></a></li><li>data structures, objects and classes (for most)</li></ul><p>Haskell is very different. The language uses a lot of concepts I had never heard about before. Many of those concepts will help you become a better programmer.</p><p>But learning Haskell can be (and will certainly be) hard. It was for me. In this article I try to provide as much help as possible to accelerate your learning.</p><p>This article will certainly be hard to follow. This is on purpose. There is no shortcut to learning Haskell. It is hard and challenging. But I believe this is a good thing. It is because it is hard that Haskell is interesting and rewarding.</p><p>Today, I could not really provide a conventional path to learn Haskell. So I think the best I can do is point you to the <a href="https://www.haskell.org/documentation/">haskell.org</a> documentation website. And you will see that most path involve a long learning process. By that, I mean that you should read a long book and invest a lot of hours and certainly days before having a good idea about what Haskell is all about.</p><p>In contrast, this article is a brief and dense overview of all major aspects of Haskell. I also added some information I lacked while I learned Haskell.</p><p>The article contains five parts:</p><ul><li><p><strong>Essential Haskell</strong>: Haskell syntax, and some essential notions.</p></li><li><p><strong>First Dive</strong>:</p><ul><li>Functional style; a progressive example, from imperative to functional style</li><li>Types; types and a standard binary tree example</li><li>Infinite Structure; manipulate an infinite binary tree!</li></ul></li><li><p><strong>Dive into the impure</strong>:</p><ul><li>Deal with IO; A minimal example</li><li>IO trick explained; the hidden detail I lacked to understand IO</li><li>Monads; incredible how we can generalize</li></ul></li><li><p><strong>Start swimming</strong>: Start a new project.</p></li></ul><h2 id="install">Install</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/Haskell-logo.png" alt="Haskell logo"></img><figcaption aria-hidden="true">Haskell logo</figcaption></figure><p>If you are not using either Linux nor macOS, you should look here: <a href="https://www.haskell.org/downloads/">https://www.haskell.org/downloads/</a>. Otherwise, you can follow my advice to use nix:</p><ol><li><p>Install <a href="https://nixos.org/nix">nix</a> (The version I used while writting this article was nix (Nix) 2.3.1, future 2.X.X versions should work with the examples in this article)</p></li><li><p>create a new empty directory <code>hsenv</code> somewhere</p></li><li><p>Put the following <code>shell.nix</code> file inside it</p><div class="m" id="cb1" data-tangle="shell.nix"><pre class="m nix"><code class="m bash"><span id="cb1-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-1" aria-hidden="true"></a><span class="kw">{</span> <span class="ex">nixpkgs</span> ? import (fetchTarball https://github.com/NixOS/nixpkgs/archive/19.09.tar.gz) {<span class="kw">}</span> }:</span>
<span id="cb1-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-2" aria-hidden="true"></a><span class="bu">let</span></span>
<span id="cb1-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-3" aria-hidden="true"></a>  <span class="ex">inherit</span> (nixpkgs) <span class="ex">pkgs</span><span class="kw">;</span></span>
<span id="cb1-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-4" aria-hidden="true"></a>  <span class="ex">inherit</span> (pkgs) <span class="ex">haskellPackages</span><span class="kw">;</span></span>
<span id="cb1-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-6" aria-hidden="true"></a>  <span class="ex">haskellDeps</span> = ps: with ps<span class="kw">;</span><span class="bu"> [</span></span>
<span id="cb1-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-7" aria-hidden="true"></a>    base</span>
<span id="cb1-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-8" aria-hidden="true"></a>    protolude</span>
<span id="cb1-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-9" aria-hidden="true"></a>    containers</span>
<span id="cb1-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-10" aria-hidden="true"></a>  ];</span>
<span id="cb1-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-11" aria-hidden="true"></a></span>
<span id="cb1-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-12" aria-hidden="true"></a>  ghc <span class="ot">=</span> haskellPackages.ghcWithPackages haskellDeps;</span>
<span id="cb1-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-13" aria-hidden="true"></a></span>
<span id="cb1-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-14" aria-hidden="true"></a>  nixPackages <span class="ot">=</span> [</span>
<span id="cb1-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-15" aria-hidden="true"></a>    ghc</span>
<span id="cb1-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-16" aria-hidden="true"></a>    pkgs.gdb</span>
<span id="cb1-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-17" aria-hidden="true"></a>    haskellPackages.cabal-install</span>
<span id="cb1-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-18" aria-hidden="true"></a>  ];</span>
<span id="cb1-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-19" aria-hidden="true"></a>in</span>
<span id="cb1-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-20" aria-hidden="true"></a>pkgs.stdenv.mkDerivation {</span>
<span id="cb1-21"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-21" aria-hidden="true"></a>  name <span class="ot">=</span> <span class="st">&quot;env&quot;</span>;</span>
<span id="cb1-22"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-22" aria-hidden="true"></a>  buildInputs <span class="ot">=</span> nixPackages;</span>
<span id="cb1-23"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-23" aria-hidden="true"></a>  shellHook <span class="ot">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb1-24"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-24" aria-hidden="true"></a>     export PS1=<span class="st">&quot;\n\[[hs:\033[1;32m\]\W\[\033[0m\]]&gt; &quot;</span></span>
<span id="cb1-25"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-25" aria-hidden="true"></a>  <span class="st">&#39;&#39;</span>;</span>
<span id="cb1-26"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb1-26" aria-hidden="true"></a>}</span></code></pre></div></li><li><p>In the <code>hsenv</code> directory, in a terminal, run <code>nix-shell --pure</code>. You should wait a lot of time for everything to download. And you should be ready. You will have in your PATH:</p><ul><li><code>ghc</code>, the Haskell compiler</li><li><code>ghci</code> that we can described as a Haskell REPL</li><li><code>runghc</code> that will be able to interpret a Haskell file</li><li><code>cabal</code> which is the main tool to deal with Haskell projects</li><li>the Haskell libraries <code>protolude</code> and <code>containers</code>.</li></ul></li><li><p>To test your env, rung <code>ghci</code> and type <code>import Protolude</code> you should see something like this:</p><pre><code>~/hsenv&gt; nix-shell
[nix-shell:~/hsenv]$ ghci
GHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help
Prelude&gt; import Protolude
Prelude Protolude&gt;
</code></pre></li></ol><p>Congratulations you should be ready to start now.</p><div class="bf"><ul><li>There are multiple ways to install Haskell and I don't think there is a full consensus between developer about what is the best method. If you whish to use another method take a look at <a href="http://haskell.org">haskell.org</a>.</li><li>This install method is only suitable for using as a playground and I think perfectly adapted to run code example from this article. I do not recommend it for serious development.</li><li><code>nix</code> is a generic package manager and goes beyond Haskell. One great good point is that it does not only manage Haskell packages but really a lot of other kind of packages. This can be helpful if you need to depends on a Haskell package that itself depends on a system library, for example <code>ncurses</code>.</li><li>I use <a href="http://nixos.org/nix"><code>nix</code></a> for other projects unrelated to Haskell. For example, I use the nix-shell bang pattern for shell script for which I can assume the executable I want are present.</li></ul></div><div class="bf"><p><strong>BONUS</strong>: use <a href="https://direnv.net"><code>direnv</code></a></p><pre><code>~ cd hsenv
~ echo &quot;use nix&quot; &gt; .envrc
~ direnv allow
</code></pre><p>Now each time you'll cd into your hsenv directory you'll get the environment set for you.</p></div><h2 id="don't-be-afraid">Don't be afraid</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/munch_TheScream.jpg" alt="The Scream"></img><figcaption aria-hidden="true">The Scream</figcaption></figure><p>Many books/articles about Haskell start by introducing some esoteric formula (quick sort, Fibonacci, etcâ¦). I will do the exact opposite. At first I won't show you any Haskell super power. I will start with similarities between Haskell and other programming languages. Let's jump to the mandatory "Hello World".</p><div class="m" id="cb4" data-tangle="hello.hs"><pre class="m haskell"><code class="m haskell"><span id="cb4-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb4-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;Hello World!&quot;</span></span></code></pre></div><pre class="example"><code>~ runghc hello.hs
Hello World!
</code></pre><p>Now, a program asking your name and replying "Hello" using the name you entered:</p><div class="m" id="cb6" data-tangle="name.hs"><pre class="m haskell"><code class="m haskell"><span id="cb6-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb6-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb6-2" aria-hidden="true"></a>    <span class="fu">print</span> <span class="st">&quot;What is your name?&quot;</span></span>
<span id="cb6-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb6-3" aria-hidden="true"></a>    name <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb6-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb6-4" aria-hidden="true"></a>    <span class="fu">print</span> (<span class="st">&quot;Hello &quot;</span> <span class="op">++</span> name <span class="op">++</span> <span class="st">&quot;!&quot;</span>)</span></code></pre></div><p>First, let us compare this with similar programs in a few imperative languages:</p><div class="m" id="cb7"><pre class="m python"><code class="m python"><span id="cb7-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb7-1" aria-hidden="true"></a><span class="co"># Python</span></span>
<span id="cb7-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb7-2" aria-hidden="true"></a><span class="bu">print</span> <span class="st">&quot;What is your name?&quot;</span></span>
<span id="cb7-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb7-3" aria-hidden="true"></a>name <span class="op">=</span> <span class="bu">raw_input</span>()</span>
<span id="cb7-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb7-4" aria-hidden="true"></a><span class="bu">print</span> <span class="st">&quot;Hello </span><span class="sc">%s</span><span class="st">!&quot;</span> <span class="op">%</span> name</span></code></pre></div><div class="m" id="cb8"><pre class="m ruby"><code class="m ruby"><span id="cb8-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb8-1" aria-hidden="true"></a><span class="co"># Ruby</span></span>
<span id="cb8-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb8-2" aria-hidden="true"></a>puts <span class="st">&quot;What is your name?&quot;</span></span>
<span id="cb8-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb8-3" aria-hidden="true"></a>name = gets.chomp</span>
<span id="cb8-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb8-4" aria-hidden="true"></a>puts <span class="st">&quot;Hello </span><span class="ot">#{</span>name<span class="ot">}</span><span class="st">!&quot;</span></span></code></pre></div><div class="m" id="cb9" data-org-language="C"><pre class="m c"><code class="m c"><span id="cb9-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-1" aria-hidden="true"></a><span class="co">// In C</span></span>
<span id="cb9-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-2" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb9-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-3" aria-hidden="true"></a><span class="dt">int</span> main (<span class="dt">int</span> argc, <span class="dt">char</span> **argv) {</span>
<span id="cb9-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-4" aria-hidden="true"></a>    <span class="dt">char</span> name[<span class="dv">666</span>]; <span class="co">// &lt;- An Evil Number!</span></span>
<span id="cb9-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-5" aria-hidden="true"></a>    <span class="co">// What if my name is more than 665 character long?</span></span>
<span id="cb9-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-6" aria-hidden="true"></a>    printf(<span class="st">&quot;What is your name?</span><span class="sc">\n</span><span class="st">&quot;</span>);</span>
<span id="cb9-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-7" aria-hidden="true"></a>    scanf(<span class="st">&quot;%s&quot;</span>, name);</span>
<span id="cb9-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-8" aria-hidden="true"></a>    printf(<span class="st">&quot;Hello %s!</span><span class="sc">\n</span><span class="st">&quot;</span>, name);</span>
<span id="cb9-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-9" aria-hidden="true"></a>    <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb9-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb9-10" aria-hidden="true"></a>}</span></code></pre></div><p>The structure is the same, but there are some syntax differences. The main part of this tutorial will be dedicated to explaining why.</p><p>In Haskell there is a <code>main</code> function and every object has a type. The type of <code>main</code> is <code>IO ()</code>. This means <code>main</code> will cause side effects.</p><p>Just remember that Haskell can look a lot like mainstream imperative languages.</p><h2 id="very-basic-haskell">Very basic Haskell</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/picasso_owl.jpg" alt="Picasso minimal owl"></img><figcaption aria-hidden="true">Picasso minimal owl</figcaption></figure><p>Before continuing you need to be warned about some essential properties of Haskell.</p><p><em>Functional</em></p><p>Haskell is a functional language. If you have an imperative language background, you'll have to learn a lot of new things. Hopefully many of these new concepts will help you to program even in imperative languages.</p><p><em>Advanced Static Typing</em></p><p>Instead of being in your way like in <code>C</code>, <code>C++</code> or <code>Java</code>, the type system is here to help you.</p><p><em>Purity</em></p><p>Generally your functions won't modify anything in the outside world. This means they can't modify the value of a variable, can't get user input, can't write on the screen, can't launch a missile. On the other hand, parallelism will be very easy to achieve. Haskell makes it clear where effects occur and where your code is pure. Also, it will be far easier to reason about your program. Most bugs will be prevented in the pure parts of your program.</p><p>Furthermore, pure functions follow a fundamental law in Haskell:</p><blockquote><p>Applying a function with the same parameters always returns the same value.</p></blockquote><p><em>Laziness</em></p><p>Laziness by default is an uncommon language design. By default, Haskell evaluates something only when it is needed. In consequence, it provides an elegant way to manipulate infinite structures, for example.</p><p>A last warning about how you should read Haskell code. For me, it is like reading scientific papers. Some parts are clear, but when you see a formula, just focus and read slower. Also, while learning Haskell, it <em>really</em> doesn't matter much if you don't understand syntax details. If you meet a <code>>>=</code>, <code>&lt;$></code>, <code>&lt;-</code> or any other weird symbol, just ignore them and follows the flow of the code.</p><h3 id="function-declaration">Function declaration</h3><p>You might be used to declaring functions like this:</p><p>In <code>C</code>:</p><div class="m" id="cb10" data-org-language="C"><pre class="m c"><code class="m c"><span id="cb10-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb10-1" aria-hidden="true"></a><span class="dt">int</span> f(<span class="dt">int</span> x, <span class="dt">int</span> y) {</span>
<span id="cb10-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb10-2" aria-hidden="true"></a>    <span class="cf">return</span> x*x + y*y;</span>
<span id="cb10-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb10-3" aria-hidden="true"></a>}</span></code></pre></div><p>In JavaScript:</p><div class="m" id="cb11"><pre class="m javascript"><code class="m javascript"><span id="cb11-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb11-1" aria-hidden="true"></a><span class="kw">function</span> <span class="fu">f</span>(x<span class="op">,</span>y) {</span>
<span id="cb11-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb11-2" aria-hidden="true"></a>    <span class="cf">return</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y<span class="op">;</span></span>
<span id="cb11-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb11-3" aria-hidden="true"></a>}</span></code></pre></div><p>in Python:</p><div class="m" id="cb12"><pre class="m python"><code class="m python"><span id="cb12-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb12-1" aria-hidden="true"></a><span class="kw">def</span> f(x,y):</span>
<span id="cb12-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb12-2" aria-hidden="true"></a>    <span class="cf">return</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span></code></pre></div><p>in Ruby:</p><div class="m" id="cb13"><pre class="m ruby"><code class="m ruby"><span id="cb13-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb13-1" aria-hidden="true"></a><span class="kw">def</span> f(x,y)</span>
<span id="cb13-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb13-2" aria-hidden="true"></a>    x*x + y*y</span>
<span id="cb13-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb13-3" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div><p>In Scheme:</p><div class="m" id="cb14"><pre class="m scheme"><code class="m scheme"><span id="cb14-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb14-1" aria-hidden="true"></a>(<span class="ex">define</span><span class="fu"> </span>(f x y)</span>
<span id="cb14-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb14-2" aria-hidden="true"></a>    (<span class="op">+</span> (* x x) (* y y)))</span></code></pre></div><p>Finally, the Haskell way is:</p><div class="m" id="cb15"><pre class="m haskell"><code class="m haskell"><span id="cb15-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb15-1" aria-hidden="true"></a>f x y <span class="ot">=</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span></code></pre></div><p>Very clean. No parenthesis, no <code>def</code>.</p><p>Don't forget, Haskell uses functions and types a lot. It is thus very easy to define them. The syntax was particularly well thought out for these objects.</p><h3 id="a-type-example">A Type Example</h3><p>Although it is not mandatory, type information for functions is usually made explicit. It's not mandatory because the compiler is smart enough to infer it for you. It's a good idea because it indicates intent and understanding.</p><p>Let's play a little. We declare the type using <code>::</code></p><div class="m" id="cb16" data-tangle="basic.hs"><pre class="m haskell"><code class="m haskell"><span id="cb16-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb16-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb16-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb16-2" aria-hidden="true"></a>f x y <span class="ot">=</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span>
<span id="cb16-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb16-3" aria-hidden="true"></a></span>
<span id="cb16-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb16-4" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="dv">2</span> <span class="dv">3</span>)</span></code></pre></div><pre class="example"><code>[nix-shell:~/hsenv]$ runghc basic.hs
13
</code></pre><p>Now try</p><div class="m" id="cb18" data-tangle="error_basic.hs"><pre class="m haskell"><code class="m haskell"><span id="cb18-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb18-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb18-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb18-2" aria-hidden="true"></a>f x y <span class="ot">=</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span>
<span id="cb18-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb18-3" aria-hidden="true"></a></span>
<span id="cb18-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb18-4" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="fl">2.3</span> <span class="fl">4.2</span>)</span></code></pre></div><p>You should get this error:</p><pre class="example"><code>[nix-shell:~/hsenv]$ runghc error_basic.hs

error_basic.hs:4:17: error:
    â¢ No instance for (Fractional Int) arising from the literal â2.3â
    â¢ In the first argument of âfâ, namely â2.3â
      In the first argument of âprintâ, namely â(f 2.3 4.2)â
      In the expression: print (f 2.3 4.2)
  |
4 | main = print (f 2.3 4.2)
  |                 ^^^
</code></pre><p>The problem: <code>4.2</code> isn't an Int.</p><p>The solution: don't declare a type for <code>f</code> for the moment and let Haskell infer the most general type for us:</p><div class="m" id="cb20" data-tangle="float_basic.hs"><pre class="m haskell"><code class="m haskell"><span id="cb20-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb20-1" aria-hidden="true"></a>f x y <span class="ot">=</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span>
<span id="cb20-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb20-2" aria-hidden="true"></a></span>
<span id="cb20-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb20-3" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="fl">2.3</span> <span class="fl">4.2</span>)</span></code></pre></div><pre class="example"><code>[nix-shell:~/hsenv]$ runghc float_basic.hs
22.93
</code></pre><p>It works! Luckily, we don't have to declare a new function for every single type. For example, in <code>C</code>, you'll have to declare a function for <code>int</code>, for <code>float</code>, for <code>long</code>, for <code>double</code>, etcâ¦</p><p>But, what type should we declare? To discover the type Haskell has found for us, just launch ghci:</p><pre class="example"><code>% ghci
GHCi, version 7.0.4: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Loading package ffi-1.0 ... linking ... done.
Prelude&gt; let f x y = x*x + y*y
Prelude&gt; :type f
f :: Num a =&gt; a -&gt; a -&gt; a
</code></pre><p>Uh? What is this strange type?</p><div class="m" id="cb23"><pre class="m haskell"><code class="m haskell"><span id="cb23-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb23-1" aria-hidden="true"></a><span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span></code></pre></div><p>First, let's focus on the right part <code>a -> a -> a</code>. To understand it, just look at a list of progressive examples:</p><table><thead><tr class="aw"><th>TheÂ writtenÂ type</th><th>Its meaning</th></tr></thead><tbody><tr class="cr"><td><code>Int</code></td><td>the type <code>Int</code></td></tr><tr class="ce"><td><code>Int -> Int</code></td><td>the type function from <code>Int</code> to <code>Int</code></td></tr><tr class="cr"><td><code>Float -> Int</code></td><td>the type function from <code>Float</code> to <code>Int</code></td></tr><tr class="ce"><td><code>a -> Int</code></td><td>the type function from any type to <code>Int</code></td></tr><tr class="cr"><td><code>a -> a</code></td><td>the type function from any type <code>a</code> to the same type <code>a</code></td></tr><tr class="ce"><td><code>a -> a -> a</code></td><td>the type function of two arguments of any type <code>a</code> to the same type <code>a</code></td></tr></tbody></table><p>In the type <code>a -> a -> a</code>, the letter <code>a</code> is a <em>type variable</em>. It means <code>f</code> is a function with two arguments and both arguments and the result have the same type. The type variable <code>a</code> could take many different type values. For example <code>Int</code>, <code>Integer</code>, <code>Float</code>â¦</p><p>So instead of having a forced type like in <code>C</code> and having to declare a function for <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, etc., we declare only one function like in a dynamically typed language.</p><p>This is sometimes called parametric polymorphism. It's also called having your cake and eating it too.</p><p>Generally <code>a</code> can be any type, for example a <code>String</code> or an <code>Int</code>, but also more complex types, like <code>Trees</code>, other functions, etcâ¦ But here our type is prefixed with <code>Num a =></code>.</p><p><code>Num</code> is a <em>type class</em>. A type class can be understood as a set of types. <code>Num</code> contains only types which behave like numbers. More precisely, <code>Num</code> is class containing types which implement a specific list of functions, and in particular <code>(+)</code> and <code>(*)</code>.</p><p>Type classes are a very powerful language construct. We can do some incredibly powerful stuff with this. More on this later.</p><p>Finally, <code>Num a => a -> a -> a</code> means:</p><p>Let <code>a</code> be a type belonging to the <code>Num</code> type class. This is a function from type <code>a</code> to (<code>a -> a</code>).</p><p>Yes, strange. In fact, in Haskell no function really has two arguments. Instead all functions have only one argument. But we will note that taking two arguments is equivalent to taking one argument and returning a function taking the second argument as a parameter.</p><p>More precisely <code>f 3 4</code> is equivalent to <code>(f 3) 4</code>. Note <code>f 3</code> is a function:</p><div class="m" id="cb24"><pre class="m haskell"><code class="m haskell"><span id="cb24-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb24-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb24-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb24-2" aria-hidden="true"></a></span>
<span id="cb24-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb24-3" aria-hidden="true"></a><span class="ot">g ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb24-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb24-4" aria-hidden="true"></a>g <span class="ot">=</span> f <span class="dv">3</span></span>
<span id="cb24-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb24-5" aria-hidden="true"></a></span>
<span id="cb24-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb24-6" aria-hidden="true"></a>g y â <span class="dv">3</span><span class="op">*</span><span class="dv">3</span> <span class="op">+</span> y<span class="op">*</span>y</span></code></pre></div><p>Another notation exists for functions. The lambda notation allows us to create functions without assigning them a name. We call them anonymous functions. We could also have written:</p><div class="m" id="cb25"><pre class="m haskell"><code class="m haskell"><span id="cb25-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb25-1" aria-hidden="true"></a>g <span class="ot">=</span> \y <span class="ot">-&gt;</span> <span class="dv">3</span><span class="op">*</span><span class="dv">3</span> <span class="op">+</span> y<span class="op">*</span>y</span></code></pre></div><p>The <code>\</code> is used because it looks like <code>Î»</code> and is ASCII.</p><p>If you are not used to functional programming your brain should be starting to heat up. It is time to make a real application.</p><p>But just before that, we should verify the type system works as expected:</p><div class="m" id="cb26" data-tangle="typed_float_basic.hs"><pre class="m haskell"><code class="m haskell"><span id="cb26-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb26-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb26-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb26-2" aria-hidden="true"></a>f x y <span class="ot">=</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span>
<span id="cb26-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb26-3" aria-hidden="true"></a></span>
<span id="cb26-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb26-4" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="dv">3</span> <span class="fl">2.4</span>)</span></code></pre></div><p>It works, because, <code>3</code> is a valid representation both for Fractional numbers like Float and for Integer. As <code>2.4</code> is a Fractional number, <code>3</code> is then interpreted as being also a Fractional number.</p><p>If we force our function to work with different types, it will fail:</p><div class="m" id="cb27"><pre class="m haskell"><code class="m haskell"><span id="cb27-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb27-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-2" aria-hidden="true"></a>f x y <span class="ot">=</span> x<span class="op">*</span>x <span class="op">+</span> y<span class="op">*</span>y</span>
<span id="cb27-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-3" aria-hidden="true"></a></span>
<span id="cb27-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-4" aria-hidden="true"></a><span class="ot">x ::</span> <span class="dt">Int</span></span>
<span id="cb27-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-5" aria-hidden="true"></a>x <span class="ot">=</span> <span class="dv">3</span></span>
<span id="cb27-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-6" aria-hidden="true"></a><span class="ot">y ::</span> <span class="dt">Float</span></span>
<span id="cb27-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-7" aria-hidden="true"></a>y <span class="ot">=</span> <span class="fl">2.4</span></span>
<span id="cb27-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-8" aria-hidden="true"></a><span class="co">-- won&#39;t work because type x â  type y</span></span>
<span id="cb27-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb27-9" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> (f x y)</span></code></pre></div><p>The compiler complains. The two parameters must have the same type.</p><p>If you believe that this is a bad idea, and that the compiler should make the transformation from one type to another for you, you should really watch this great (and funny) video: <a href="https://www.destroyallsoftware.com/talks/wat">WAT</a></p><h1 id="essential-haskell">Essential Haskell</h1><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/kandinsky_gugg.jpg" alt="Kandinsky Gugg"></img><figcaption aria-hidden="true">Kandinsky Gugg</figcaption></figure><p>I suggest that you skim this part. Think of it as a reference. Haskell has a lot of features. A lot of information is missing here. Come back here if the notation feels strange.</p><p>I use the <code>â</code> symbol to state that two expression are equivalent. It is a meta notation, <code>â</code> does not exists in Haskell. I will also use <code>â</code> to show what the return value of an expression is.</p><h2 id="notations">Notations</h2><p>Arithmetic</p><pre><code>3 + 2 * 6 / 3 â 3 + ((2*6)/3)
</code></pre><p>Logic</p><pre><code>True || False â True
True &amp;&amp; False â False
True == False â False
True /= False â True  (/=) is the operator for different
</code></pre><p>Powers</p><pre><code>x^n     for n an integral (understand Int or Integer)
x**y    for y any kind of number (Float for example)
</code></pre><p><code>Integer</code> has no limit except the capacity of your machine:</p><pre class="example"><code>4^103
102844034832575377634685573909834406561420991602098741459288064
</code></pre><p>Yeah! And also rational numbers FTW! But you need to import the module <code>Data.Ratio</code>:</p><pre class="example"><code>$ ghci
....
Prelude&gt; :m Data.Ratio
Data.Ratio&gt; (11 % 15) * (5 % 3)
11 % 9
</code></pre><p>Lists</p><pre class="example"><code>[]                      â empty list
[1,2,3]                 â List of integral
[&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;]     â List of String
1:[2,3]                 â [1,2,3], (:) prepend one element
1:2:[]                  â [1,2]
[1,2] ++ [3,4]          â [1,2,3,4], (++) concatenate
[1,2,3] ++ [&quot;foo&quot;]      â ERROR String â  Integral
[1..4]                  â [1,2,3,4]
[1,3..10]               â [1,3,5,7,9]
[2,3,5,7,11..100]       â ERROR! I am not so smart!
[10,9..1]               â [10,9,8,7,6,5,4,3,2,1]
</code></pre><p>Strings</p><p>In Haskell strings are list of <code>Char</code>.</p><pre class="example"><code>&#39;a&#39; :: Char
&quot;a&quot; :: [Char]
&quot;&quot;  â []
&quot;ab&quot; â [&#39;a&#39;,&#39;b&#39;] â  &#39;a&#39;:&quot;b&quot; â &#39;a&#39;:[&#39;b&#39;] â &#39;a&#39;:&#39;b&#39;:[]
&quot;abc&quot; â &quot;ab&quot;++&quot;c&quot;
</code></pre><blockquote><p><em>Remark</em>: In real code you shouldn't use list of char to represent text. You should mostly use <code>Data.Text</code> instead. If you want to represent a stream of ASCII char, you should use <code>Data.ByteString</code>.</p></blockquote><p>Tuples</p><p>The type of couple is <code>(a,b)</code>. Elements in a tuple can have different types.</p><pre class="example"><code>-- All these tuples are valid
(2,&quot;foo&quot;)
(3,&#39;a&#39;,[2,3])
((2,&quot;a&quot;),&quot;c&quot;,3)

fst (x,y)       â  x
snd (x,y)       â  y

fst (x,y,z)     â  ERROR: fst :: (a,b) -&gt; a
snd (x,y,z)     â  ERROR: snd :: (a,b) -&gt; b
</code></pre><p>Deal with parentheses</p><p>To remove some parentheses you can use two functions: <code>($)</code> and <code>(.)</code>.</p><pre class="example"><code>-- By default:
f g h x         â  (((f g) h) x)

-- the $ replace parenthesis from the $
-- to the end of the expression
f g $ h x       â  f g (h x) â (f g) (h x)
f $ g h x       â  f (g h x) â f ((g h) x)
f $ g $ h x     â  f (g (h x))

-- (.) the composition function
(f . g) x       â  f (g x)
(f . g . h) x   â  f (g (h x))
</code></pre><h2 id="useful-notations-for-functions">Useful notations for functions</h2><p>Just a reminder:</p><pre class="example"><code>x :: Int            â x is of type Int
x :: a              â x can be of any type
x :: Num a =&gt; a     â x can be any type a
                      such that a belongs to Num type class
f :: a -&gt; b         â f is a function from a to b
f :: a -&gt; b -&gt; c    â f is a function from a to (bâc)
f :: (a -&gt; b) -&gt; c  â f is a function from (aâb) to c
</code></pre><p>Remember that defining the type of a function before its declaration isn't mandatory. Haskell infers the most general type for you. But it is considered a good practice to do so.</p><p><em>Infix notation</em></p><div class="m" id="cb38" data-tangle="functions.hs"><pre class="m haskell"><code class="m haskell"><span id="cb38-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb38-1" aria-hidden="true"></a><span class="ot">square ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb38-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb38-2" aria-hidden="true"></a>square x <span class="ot">=</span> x<span class="op">^</span><span class="dv">2</span></span></code></pre></div><p>Note <code>^</code> uses infix notation. For each infix operator there its associated prefix notation. You just have to put it inside parenthesis.</p><div class="m" id="cb39" data-tangle="functions.hs"><pre class="m haskell"><code class="m haskell"><span id="cb39-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb39-1" aria-hidden="true"></a>square&#39; x <span class="ot">=</span> (<span class="op">^</span>) x <span class="dv">2</span></span>
<span id="cb39-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb39-2" aria-hidden="true"></a></span>
<span id="cb39-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb39-3" aria-hidden="true"></a>square&#39;&#39; x <span class="ot">=</span> (<span class="op">^</span><span class="dv">2</span>) x</span></code></pre></div><p>We can remove <code>x</code> in the left and right side! It's called Î·-reduction.</p><div class="m" id="cb40" data-tangle="functions.hs"><pre class="m haskell"><code class="m haskell"><span id="cb40-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb40-1" aria-hidden="true"></a>square&#39;&#39;&#39; <span class="ot">=</span> (<span class="op">^</span><span class="dv">2</span>)</span></code></pre></div><p>Note we can declare functions with <code>'</code> in their name. Here:</p><blockquote><p><code>square</code> â <code>square'</code> â <code>square''</code> â <code>square'''</code></p></blockquote><p>Note for each prefix notation you can transform it to infix notation with <code>`</code> like this:</p><pre class="example"><code>foo x y â x `foo` y
</code></pre><p><em>Tests</em></p><p>An implementation of the absolute function.</p><div class="m" id="cb42" data-tangle="functions.hs"><pre class="m haskell"><code class="m haskell"><span id="cb42-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb42-1" aria-hidden="true"></a><span class="ot">absolute ::</span> (<span class="dt">Ord</span> a, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb42-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb42-2" aria-hidden="true"></a>absolute x <span class="ot">=</span> <span class="kw">if</span> x <span class="op">&gt;=</span> <span class="dv">0</span> <span class="kw">then</span> x <span class="kw">else</span> <span class="op">-</span>x</span></code></pre></div><p>Note: the <code>if .. then .. else</code> Haskell notation is more like the <code>Â¤?Â¤:Â¤</code> C operator. You cannot forget the <code>else</code>.</p><p>Another equivalent version:</p><div class="m" id="cb43" data-tangle="functions.hs"><pre class="m haskell"><code class="m haskell"><span id="cb43-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb43-1" aria-hidden="true"></a>absolute&#39; x</span>
<span id="cb43-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb43-2" aria-hidden="true"></a>    <span class="op">|</span> x <span class="op">&gt;=</span> <span class="dv">0</span> <span class="ot">=</span> x</span>
<span id="cb43-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb43-3" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="op">-</span>x</span></code></pre></div><blockquote><p>Notation warning: indentation is <em>important</em> in Haskell. Like in Python, bad indentation can break your code!</p></blockquote><div class="m" id="cb44" data-tangle="functions.hs"><pre class="m haskell"><code class="m haskell"><span id="cb44-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb44-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-2" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> square <span class="dv">10</span></span>
<span id="cb44-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-3" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> square&#39; <span class="dv">10</span></span>
<span id="cb44-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-4" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> square&#39;&#39; <span class="dv">10</span></span>
<span id="cb44-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-5" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> square&#39;&#39;&#39; <span class="dv">10</span></span>
<span id="cb44-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-6" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> absolute <span class="dv">10</span></span>
<span id="cb44-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-7" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> absolute (<span class="op">-</span><span class="dv">10</span>)</span>
<span id="cb44-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-8" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> absolute&#39; <span class="dv">10</span></span>
<span id="cb44-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb44-9" aria-hidden="true"></a>      <span class="fu">print</span> <span class="op">$</span> absolute&#39; (<span class="op">-</span><span class="dv">10</span>)</span></code></pre></div><pre class="example"><code>~/t/hsenv&gt; runghc functions.hs
100
100
100
100
10
10
10
10
</code></pre><h1 id="first-dive">First dive</h1><p>In this part, you will be introduced to functional style, types and infinite structures manipulation.</p><h2 id="functional-style">Functional style</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/hr_giger_biomechanicallandscape_500.jpg" alt="Biomechanical Landscape by H.R. Giger"></img><figcaption aria-hidden="true">Biomechanical Landscape by H.R. Giger</figcaption></figure><p>In this section, I will give a short example of the impressive refactoring ability provided by Haskell. We will select a problem and solve it in a standard imperative way. Then I will make the code evolve. The end result will be both more elegant and easier to adapt.</p><p>Let's solve the following problem:</p><blockquote><p>Given a list of integers, return the sum of the even numbers in the list.</p><p>example: <code>[1,2,3,4,5] â 2 + 4 â 6</code></p></blockquote><p>To show differences between functional and imperative approaches, I'll start by providing an imperative solution (in javascript):</p><div class="m" id="cb46"><pre class="m javascript"><code class="m javascript"><span id="cb46-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-1" aria-hidden="true"></a><span class="kw">function</span> <span class="fu">evenSum</span>(list) {</span>
<span id="cb46-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-2" aria-hidden="true"></a>    <span class="kw">var</span> result <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb46-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-3" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="kw">var</span> i<span class="op">=</span><span class="dv">0</span><span class="op">;</span> i<span class="op">&lt;</span> list<span class="op">.</span><span class="at">length</span> <span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb46-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-4" aria-hidden="true"></a>        <span class="cf">if</span> (list[i] <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span><span class="dv">0</span>) {</span>
<span id="cb46-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-5" aria-hidden="true"></a>            result <span class="op">+=</span> list[i]<span class="op">;</span></span>
<span id="cb46-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-6" aria-hidden="true"></a>        }</span>
<span id="cb46-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-7" aria-hidden="true"></a>    }</span>
<span id="cb46-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-8" aria-hidden="true"></a>    <span class="cf">return</span> result<span class="op">;</span></span>
<span id="cb46-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb46-9" aria-hidden="true"></a>}</span></code></pre></div><p>In Haskell, by contrast, we don't have variables or a for loop. One solution to achieve the same result without loops is to use recursion.</p><blockquote><p><em>Remark</em>: Recursion is generally perceived as slow in imperative languages. But this is generally not the case in functional programming. Most of the time Haskell will handle recursive functions efficiently.</p></blockquote><p>Here is a <code>C</code> version of the recursive function. Note that for simplicity I assume the int list ends with the first <code>0</code> value.</p><div class="m" id="cb47" data-org-language="C"><pre class="m c"><code class="m c"><span id="cb47-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-1" aria-hidden="true"></a><span class="dt">int</span> evenSum(<span class="dt">int</span> *list) {</span>
<span id="cb47-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-2" aria-hidden="true"></a>    <span class="cf">return</span> accumSum(<span class="dv">0</span>,list);</span>
<span id="cb47-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-3" aria-hidden="true"></a>}</span>
<span id="cb47-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-4" aria-hidden="true"></a></span>
<span id="cb47-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-5" aria-hidden="true"></a><span class="dt">int</span> accumSum(<span class="dt">int</span> n, <span class="dt">int</span> *list) {</span>
<span id="cb47-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-6" aria-hidden="true"></a>    <span class="dt">int</span> x;</span>
<span id="cb47-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-7" aria-hidden="true"></a>    <span class="dt">int</span> *xs;</span>
<span id="cb47-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-8" aria-hidden="true"></a>    <span class="cf">if</span> (*list == <span class="dv">0</span>) { <span class="co">// if the list is empty</span></span>
<span id="cb47-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-9" aria-hidden="true"></a>        <span class="cf">return</span> n;</span>
<span id="cb47-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-10" aria-hidden="true"></a>    } <span class="cf">else</span> {</span>
<span id="cb47-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-11" aria-hidden="true"></a>        x = list[<span class="dv">0</span>]; <span class="co">// let x be the first element of the list</span></span>
<span id="cb47-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-12" aria-hidden="true"></a>        xs = list+<span class="dv">1</span>; <span class="co">// let xs be the list without x</span></span>
<span id="cb47-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-13" aria-hidden="true"></a>        <span class="cf">if</span> ( <span class="dv">0</span> == (x%<span class="dv">2</span>) ) { <span class="co">// if x is even</span></span>
<span id="cb47-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-14" aria-hidden="true"></a>            <span class="cf">return</span> accumSum(n+x, xs);</span>
<span id="cb47-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-15" aria-hidden="true"></a>        } <span class="cf">else</span> {</span>
<span id="cb47-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-16" aria-hidden="true"></a>            <span class="cf">return</span> accumSum(n, xs);</span>
<span id="cb47-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-17" aria-hidden="true"></a>        }</span>
<span id="cb47-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-18" aria-hidden="true"></a>    }</span>
<span id="cb47-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb47-19" aria-hidden="true"></a>}</span></code></pre></div><p>Keep this code in mind. We will translate it into Haskell. First, however, I need to introduce three simple but useful functions we will use:</p><div class="m" id="cb48"><pre class="m haskell"><code class="m haskell"><span id="cb48-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb48-1" aria-hidden="true"></a><span class="fu">even</span><span class="ot"> ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb48-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb48-2" aria-hidden="true"></a><span class="fu">head</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb48-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb48-3" aria-hidden="true"></a><span class="fu">tail</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> [a]</span></code></pre></div><p><code>even</code> verifies if a number is even.</p><div class="m" id="cb49"><pre class="m haskell"><code class="m haskell"><span id="cb49-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb49-1" aria-hidden="true"></a><span class="fu">even</span><span class="ot"> ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb49-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb49-2" aria-hidden="true"></a><span class="fu">even</span> <span class="dv">3</span>  <span class="ot">â</span> <span class="dt">False</span></span>
<span id="cb49-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb49-3" aria-hidden="true"></a><span class="fu">even</span> <span class="dv">2</span>  <span class="ot">â</span> <span class="dt">True</span></span></code></pre></div><p><code>head</code> returns the first element of a list:</p><div class="m" id="cb50"><pre class="m haskell"><code class="m haskell"><span id="cb50-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb50-1" aria-hidden="true"></a><span class="fu">head</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb50-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb50-2" aria-hidden="true"></a><span class="fu">head</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="ot">â</span> <span class="dv">1</span></span>
<span id="cb50-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb50-3" aria-hidden="true"></a><span class="fu">head</span> []      <span class="ot">â</span> <span class="dt">ERROR</span></span></code></pre></div><p><code>tail</code> returns all elements of a list, except the first:</p><div class="m" id="cb51"><pre class="m haskell"><code class="m haskell"><span id="cb51-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb51-1" aria-hidden="true"></a><span class="fu">tail</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb51-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb51-2" aria-hidden="true"></a><span class="fu">tail</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="ot">â</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb51-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb51-3" aria-hidden="true"></a><span class="fu">tail</span> [<span class="dv">3</span>]     <span class="ot">â</span> []</span>
<span id="cb51-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb51-4" aria-hidden="true"></a><span class="fu">tail</span> []      <span class="ot">â</span> <span class="dt">ERROR</span></span></code></pre></div><p>Note that for any non empty list <code>l</code>, <code>l â (head l):(tail l)</code></p><p>The first Haskell solution. The function <code>evenSum</code> returns the sum of all even numbers in a list:</p><div class="m" id="cb52" data-tangle="evenSum_v1.hs"><pre class="m haskell"><code class="m haskell"><span id="cb52-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-1" aria-hidden="true"></a><span class="co">-- Version 1</span></span>
<span id="cb52-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-2" aria-hidden="true"></a><span class="ot">evenSum ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb52-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-3" aria-hidden="true"></a>evenSum l <span class="ot">=</span> accumSum <span class="dv">0</span> l</span>
<span id="cb52-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-4" aria-hidden="true"></a>accumSum n l <span class="ot">=</span> <span class="kw">if</span> l <span class="op">==</span> []</span>
<span id="cb52-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-5" aria-hidden="true"></a>                  <span class="kw">then</span> n</span>
<span id="cb52-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-6" aria-hidden="true"></a>                  <span class="kw">else</span> <span class="kw">let</span> x <span class="ot">=</span> <span class="fu">head</span> l</span>
<span id="cb52-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-7" aria-hidden="true"></a>                           xs <span class="ot">=</span> <span class="fu">tail</span> l</span>
<span id="cb52-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-8" aria-hidden="true"></a>                       <span class="kw">in</span> <span class="kw">if</span> <span class="fu">even</span> x</span>
<span id="cb52-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-9" aria-hidden="true"></a>                              <span class="kw">then</span> accumSum (n<span class="op">+</span>x) xs</span>
<span id="cb52-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb52-10" aria-hidden="true"></a>                              <span class="kw">else</span> accumSum n xs</span></code></pre></div><p>To test a function you can use <code>ghci</code>:</p><pre class="example"><code>~/t/hsenv&gt; ghci
GHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help
Prelude&gt; :l evenSum_v1.hs
[1 of 1] Compiling Main             ( evenSum_v1.hs, interpreted )
Ok, one module loaded.
*Main&gt; evenSum [1..5]
6
</code></pre><p>Here is an example of execution<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn2" class="g" id="fnref2" role="doc-noteref"><sup>2</sup></a>:</p><pre class="example"><code>*Main&gt; evenSum [1..5]
accumSum 0 [1,2,3,4,5]
1 is odd
accumSum 0 [2,3,4,5]
2 is even
accumSum (0+2) [3,4,5]
3 is odd
accumSum (0+2) [4,5]
2 is even
accumSum (0+2+4) [5]
5 is odd
accumSum (0+2+4) []
l == []
0+2+4
0+6
6
</code></pre><p>Coming from an imperative language all should seem right. In fact, many things can be improved here. First, we can generalize the type.</p><div class="m" id="cb55"><pre class="m haskell"><code class="m haskell"><span id="cb55-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb55-1" aria-hidden="true"></a><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span></code></pre></div><p>Next, we can use sub functions using <code>where</code> or <code>let</code>. This way our <code>accumSum</code> function will not pollute the namespace of our module.</p><div class="m" id="cb56" data-tangle="evenSum_v2.hs"><pre class="m haskell"><code class="m haskell"><span id="cb56-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-1" aria-hidden="true"></a><span class="co">-- Version 2</span></span>
<span id="cb56-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-2" aria-hidden="true"></a><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb56-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-3" aria-hidden="true"></a>evenSum l <span class="ot">=</span> accumSum <span class="dv">0</span> l</span>
<span id="cb56-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-4" aria-hidden="true"></a>    <span class="kw">where</span> accumSum n l <span class="ot">=</span></span>
<span id="cb56-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-5" aria-hidden="true"></a>            <span class="kw">if</span> l <span class="op">==</span> []</span>
<span id="cb56-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-6" aria-hidden="true"></a>                <span class="kw">then</span> n</span>
<span id="cb56-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-7" aria-hidden="true"></a>                <span class="kw">else</span> <span class="kw">let</span> x <span class="ot">=</span> <span class="fu">head</span> l</span>
<span id="cb56-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-8" aria-hidden="true"></a>                         xs <span class="ot">=</span> <span class="fu">tail</span> l</span>
<span id="cb56-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-9" aria-hidden="true"></a>                     <span class="kw">in</span> <span class="kw">if</span> <span class="fu">even</span> x</span>
<span id="cb56-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-10" aria-hidden="true"></a>                            <span class="kw">then</span> accumSum (n<span class="op">+</span>x) xs</span>
<span id="cb56-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb56-11" aria-hidden="true"></a>                            <span class="kw">else</span> accumSum n xs</span></code></pre></div><p>Next, we can use pattern matching.</p><div class="m" id="cb57" data-tangle="evenSum_v3.hs"><pre class="m haskell"><code class="m haskell"><span id="cb57-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-1" aria-hidden="true"></a><span class="co">-- Version 3</span></span>
<span id="cb57-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-2" aria-hidden="true"></a>evenSum l <span class="ot">=</span> accumSum <span class="dv">0</span> l</span>
<span id="cb57-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-3" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb57-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-4" aria-hidden="true"></a>        accumSum n [] <span class="ot">=</span> n</span>
<span id="cb57-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-5" aria-hidden="true"></a>        accumSum n (x<span class="op">:</span>xs) <span class="ot">=</span></span>
<span id="cb57-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-6" aria-hidden="true"></a>             <span class="kw">if</span> <span class="fu">even</span> x</span>
<span id="cb57-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-7" aria-hidden="true"></a>                <span class="kw">then</span> accumSum (n<span class="op">+</span>x) xs</span>
<span id="cb57-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb57-8" aria-hidden="true"></a>                <span class="kw">else</span> accumSum n xs</span></code></pre></div><p>What is pattern matching? Use values instead of general parameter names<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn3" class="g" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p><p>Instead of saying: <code>foo l = if l =</code> [] then &lt;x> else &lt;y>= you simply state:</p><div class="m" id="cb58"><pre class="m haskell"><code class="m haskell"><span id="cb58-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb58-1" aria-hidden="true"></a>foo [] <span class="ot">=</span>  <span class="op">&lt;</span>x<span class="op">&gt;</span></span>
<span id="cb58-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb58-2" aria-hidden="true"></a>foo l  <span class="ot">=</span>  <span class="op">&lt;</span>y<span class="op">&gt;</span></span></code></pre></div><p>But pattern matching goes even further. It is also able to inspect the inner data of a complex value. We can replace</p><div class="m" id="cb59"><pre class="m haskell"><code class="m haskell"><span id="cb59-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb59-1" aria-hidden="true"></a>foo l <span class="ot">=</span>  <span class="kw">let</span> x  <span class="ot">=</span> <span class="fu">head</span> l</span>
<span id="cb59-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb59-2" aria-hidden="true"></a>             xs <span class="ot">=</span> <span class="fu">tail</span> l</span>
<span id="cb59-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb59-3" aria-hidden="true"></a>         <span class="kw">in</span> <span class="kw">if</span> <span class="fu">even</span> x</span>
<span id="cb59-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb59-4" aria-hidden="true"></a>             <span class="kw">then</span> foo (n<span class="op">+</span>x) xs</span>
<span id="cb59-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb59-5" aria-hidden="true"></a>             <span class="kw">else</span> foo n xs</span></code></pre></div><p>with</p><div class="m" id="cb60"><pre class="m haskell"><code class="m haskell"><span id="cb60-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb60-1" aria-hidden="true"></a>foo (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="kw">if</span> <span class="fu">even</span> x</span>
<span id="cb60-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb60-2" aria-hidden="true"></a>                 <span class="kw">then</span> foo (n<span class="op">+</span>x) xs</span>
<span id="cb60-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb60-3" aria-hidden="true"></a>                 <span class="kw">else</span> foo n xs</span></code></pre></div><p>This is a very useful feature. It makes our code both terser and easier to read.</p><p>In Haskell you can simplify function definitions by Î·-reducing them. For example, instead of writing:</p><div class="m" id="cb61"><pre class="m haskell"><code class="m haskell"><span id="cb61-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb61-1" aria-hidden="true"></a>f x <span class="ot">=</span> (some expresion) x</span></code></pre></div><p>you can simply write</p><div class="m" id="cb62"><pre class="m haskell"><code class="m haskell"><span id="cb62-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb62-1" aria-hidden="true"></a>f <span class="ot">=</span> (some expression)</span></code></pre></div><p>We use this method to remove the <code>l</code>:</p><div class="m" id="cb63" data-tangle="evenSum_v4.hs"><pre class="m haskell"><code class="m haskell"><span id="cb63-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-1" aria-hidden="true"></a><span class="co">-- Version 4</span></span>
<span id="cb63-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-2" aria-hidden="true"></a><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb63-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-3" aria-hidden="true"></a>evenSum <span class="ot">=</span> accumSum <span class="dv">0</span></span>
<span id="cb63-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-4" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb63-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-5" aria-hidden="true"></a>        accumSum n [] <span class="ot">=</span> n</span>
<span id="cb63-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-6" aria-hidden="true"></a>        accumSum n (x<span class="op">:</span>xs) <span class="ot">=</span></span>
<span id="cb63-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-7" aria-hidden="true"></a>             <span class="kw">if</span> <span class="fu">even</span> x</span>
<span id="cb63-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-8" aria-hidden="true"></a>                <span class="kw">then</span> accumSum (n<span class="op">+</span>x) xs</span>
<span id="cb63-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb63-9" aria-hidden="true"></a>                <span class="kw">else</span> accumSum n xs</span></code></pre></div><h3 id="higher-order-functions">Higher Order Functions</h3><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/escher_polygon.png" alt="Escher"></img><figcaption aria-hidden="true">Escher</figcaption></figure><p>To make things even better we should use higher order functions. What are these beasts? Higher order functions are functions taking functions as parameters.</p><p>Here are some examples:</p><div class="m" id="cb64"><pre class="m haskell"><code class="m haskell"><span id="cb64-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb64-1" aria-hidden="true"></a><span class="fu">filter</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb64-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb64-2" aria-hidden="true"></a><span class="fu">map</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb64-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb64-3" aria-hidden="true"></a><span class="fu">foldl</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [b] <span class="ot">-&gt;</span> a</span></code></pre></div><p>Let's proceed by small steps.</p><div class="m" id="cb65" data-tangle="evenSum_v5.hs"><pre class="m haskell"><code class="m haskell"><span id="cb65-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb65-1" aria-hidden="true"></a><span class="co">-- Version 5</span></span>
<span id="cb65-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb65-2" aria-hidden="true"></a>evenSum l <span class="ot">=</span> mysum <span class="dv">0</span> (<span class="fu">filter</span> <span class="fu">even</span> l)</span>
<span id="cb65-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb65-3" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb65-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb65-4" aria-hidden="true"></a>      mysum n [] <span class="ot">=</span> n</span>
<span id="cb65-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb65-5" aria-hidden="true"></a>      mysum n (x<span class="op">:</span>xs) <span class="ot">=</span> mysum (n<span class="op">+</span>x) xs</span></code></pre></div><p>where</p><div class="m" id="cb66"><pre class="m haskell"><code class="m haskell"><span id="cb66-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb66-1" aria-hidden="true"></a><span class="fu">filter</span> <span class="fu">even</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>] â  [<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>]</span></code></pre></div><p>The function <code>filter</code> takes a function of type (<code>a -> Bool</code>) and a list of type <code>[a]</code>. It returns a list containing only elements for which the function returned <code>True</code>.</p><p>Our next step is to use another technique to accomplish the same thing as a loop. We will use the <code>foldl</code> function to accumulate a value as we pass through the list. The function <code>foldl</code> captures a general coding pattern:</p><div class="m" id="cb67"><pre class="m haskell"><code class="m haskell"><span id="cb67-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb67-1" aria-hidden="true"></a>myfunc list <span class="ot">=</span> foo initialValue list</span>
<span id="cb67-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb67-2" aria-hidden="true"></a>foo accumulated []     <span class="ot">=</span> accumulated</span>
<span id="cb67-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb67-3" aria-hidden="true"></a>foo tmpValue    (x<span class="op">:</span>xs) <span class="ot">=</span> foo (bar tmpValue x) xs</span></code></pre></div><p>Which can be replaced by:</p><div class="m" id="cb68"><pre class="m haskell"><code class="m haskell"><span id="cb68-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb68-1" aria-hidden="true"></a>myfunc list <span class="ot">=</span> <span class="fu">foldl</span> bar initialValue list</span></code></pre></div><p>If you really want to know how the magic works, here is the definition of <code>foldl</code>:</p><div class="m" id="cb69"><pre class="m haskell"><code class="m haskell"><span id="cb69-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb69-1" aria-hidden="true"></a><span class="fu">foldl</span> f z [] <span class="ot">=</span> z</span>
<span id="cb69-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb69-2" aria-hidden="true"></a><span class="fu">foldl</span> f z (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="fu">foldl</span> f (f z x) xs</span></code></pre></div><div class="m" id="cb70"><pre class="m haskell"><code class="m haskell"><span id="cb70-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb70-1" aria-hidden="true"></a><span class="fu">foldl</span> f z [x1,<span class="op">...</span>xn]</span>
<span id="cb70-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb70-2" aria-hidden="true"></a>â  f (<span class="op">...</span> (f (f z x1) x2) <span class="op">...</span>) xn</span></code></pre></div><p>But as Haskell is lazy, it doesn't evaluate <code>(f z x)</code> and simply pushes it onto the stack. This is why we generally use <code>foldl'</code> instead of <code>foldl</code>; <code>foldl'</code> is a <em>strict</em> version of <code>foldl</code>. If you don't understand what lazy and strict means, don't worry, just follow the code as if <code>foldl</code> and <code>foldl'</code> were identical.</p><p>Now our new version of <code>evenSum</code> becomes:</p><div class="m" id="cb71" data-tangle="evenSum_v6.hs"><pre class="m haskell"><code class="m haskell"><span id="cb71-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb71-1" aria-hidden="true"></a><span class="co">-- Version 6</span></span>
<span id="cb71-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb71-2" aria-hidden="true"></a><span class="co">-- foldl&#39; isn&#39;t accessible by default</span></span>
<span id="cb71-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb71-3" aria-hidden="true"></a><span class="co">-- we need to import it from the module Data.List</span></span>
<span id="cb71-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb71-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span></span>
<span id="cb71-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb71-5" aria-hidden="true"></a>evenSum l <span class="ot">=</span> foldl&#39; mysum <span class="dv">0</span> (<span class="fu">filter</span> <span class="fu">even</span> l)</span>
<span id="cb71-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb71-6" aria-hidden="true"></a>  <span class="kw">where</span> mysum acc value <span class="ot">=</span> acc <span class="op">+</span> value</span></code></pre></div><p>We can also simplify this by using directly a lambda notation. This way we don't have to create the temporary name <code>mysum</code>.</p><div class="m" id="cb72" data-tangle="evenSum_v7.hs"><pre class="m haskell"><code class="m haskell"><span id="cb72-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb72-1" aria-hidden="true"></a><span class="co">-- Version 7</span></span>
<span id="cb72-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb72-2" aria-hidden="true"></a><span class="co">-- Generally it is considered a good practice</span></span>
<span id="cb72-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb72-3" aria-hidden="true"></a><span class="co">-- to import only the necessary function(s)</span></span>
<span id="cb72-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb72-4" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span> (foldl&#39;)</span>
<span id="cb72-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb72-5" aria-hidden="true"></a>evenSum l <span class="ot">=</span> foldl&#39; (\x y <span class="ot">-&gt;</span> x<span class="op">+</span>y) <span class="dv">0</span> (<span class="fu">filter</span> <span class="fu">even</span> l)</span></code></pre></div><p>And of course, we note that</p><div class="m" id="cb73"><pre class="m haskell"><code class="m haskell"><span id="cb73-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb73-1" aria-hidden="true"></a>(\x y <span class="ot">-&gt;</span> x<span class="op">+</span>y) â (<span class="op">+</span>)</span></code></pre></div><p>Finally</p><div class="m" id="cb74" data-tangle="evenSum_v8.hs"><pre class="m haskell"><code class="m haskell"><span id="cb74-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb74-1" aria-hidden="true"></a><span class="co">-- Version 8</span></span>
<span id="cb74-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb74-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span> (foldl&#39;)</span>
<span id="cb74-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb74-3" aria-hidden="true"></a><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb74-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb74-4" aria-hidden="true"></a>evenSum l <span class="ot">=</span> foldl&#39; (<span class="op">+</span>) <span class="dv">0</span> (<span class="fu">filter</span> <span class="fu">even</span> l)</span></code></pre></div><p><code>foldl'</code> isn't the easiest function to grasp. If you are not used to it, you should study it a bit.</p><p>To help you understand what's going on here, let's look at a step by step evaluation:</p><div class="m" id="cb75"><pre class="m haskell"><code class="m haskell"><span id="cb75-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-1" aria-hidden="true"></a>  evenSum [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb75-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-2" aria-hidden="true"></a><span class="ot">â</span> foldl&#39; (<span class="op">+</span>) <span class="dv">0</span> (<span class="fu">filter</span> <span class="fu">even</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>])</span>
<span id="cb75-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-3" aria-hidden="true"></a><span class="ot">â</span> foldl&#39; (<span class="op">+</span>) <span class="dv">0</span> [<span class="dv">2</span>,<span class="dv">4</span>]</span>
<span id="cb75-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-4" aria-hidden="true"></a><span class="ot">â</span> foldl&#39; (<span class="op">+</span>) (<span class="dv">0</span><span class="op">+</span><span class="dv">2</span>) [<span class="dv">4</span>]</span>
<span id="cb75-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-5" aria-hidden="true"></a><span class="ot">â</span> foldl&#39; (<span class="op">+</span>) <span class="dv">2</span> [<span class="dv">4</span>]</span>
<span id="cb75-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-6" aria-hidden="true"></a><span class="ot">â</span> foldl&#39; (<span class="op">+</span>) (<span class="dv">2</span><span class="op">+</span><span class="dv">4</span>) []</span>
<span id="cb75-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-7" aria-hidden="true"></a><span class="ot">â</span> foldl&#39; (<span class="op">+</span>) <span class="dv">6</span> []</span>
<span id="cb75-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb75-8" aria-hidden="true"></a><span class="ot">â</span> <span class="dv">6</span></span></code></pre></div><p>Another useful higher order function is <code>(.)</code>. The <code>(.)</code> function corresponds to mathematical composition.</p><div class="m" id="cb76"><pre class="m haskell"><code class="m haskell"><span id="cb76-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb76-1" aria-hidden="true"></a>(f <span class="op">.</span> g <span class="op">.</span> h) x â  f ( g (h x))</span></code></pre></div><p>We can take advantage of this operator to Î·-reduce our function:</p><div class="m" id="cb77" data-tangle="evenSum_v9.hs"><pre class="m haskell"><code class="m haskell"><span id="cb77-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb77-1" aria-hidden="true"></a><span class="co">-- Version 9</span></span>
<span id="cb77-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb77-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span> (foldl&#39;)</span>
<span id="cb77-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb77-3" aria-hidden="true"></a><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb77-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb77-4" aria-hidden="true"></a>evenSum <span class="ot">=</span> (foldl&#39; (<span class="op">+</span>) <span class="dv">0</span>) <span class="op">.</span> (<span class="fu">filter</span> <span class="fu">even</span>)</span></code></pre></div><p>Also, we could rename some parts to make it clearer:</p><div class="m" id="cb78" data-tangle="evenSum_v10.hs"><pre class="m haskell"><code class="m haskell"><span id="cb78-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb78-1" aria-hidden="true"></a><span class="co">-- Version 10</span></span>
<span id="cb78-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb78-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.List</span> (foldl&#39;)</span>
<span id="cb78-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb78-3" aria-hidden="true"></a><span class="ot">sum&#39; ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb78-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb78-4" aria-hidden="true"></a>sum&#39; <span class="ot">=</span> foldl&#39; (<span class="op">+</span>) <span class="dv">0</span></span>
<span id="cb78-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb78-5" aria-hidden="true"></a><span class="ot">evenSum ::</span> <span class="dt">Integral</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb78-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb78-6" aria-hidden="true"></a>evenSum <span class="ot">=</span> sum&#39; <span class="op">.</span> (<span class="fu">filter</span> <span class="fu">even</span>)</span></code></pre></div><p>It is time to discuss the direction our code has moved as we introduced more functional idioms. What did we gain by using higher order functions?</p><p>At first, you might think the main difference is terseness. But in fact, it has more to do with better thinking. Suppose we want to modify our function slightly, for example, to get the sum of all even squares of elements of the list.</p><pre class="example"><code>[1,2,3,4] â· [1,4,9,16] â· [4,16] â· 20
</code></pre><p>Updating version 10 is extremely easy:</p><div class="m" id="cb80"><pre class="m haskell"><code class="m haskell"><span id="cb80-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb80-1" aria-hidden="true"></a>squareEvenSum <span class="ot">=</span> sum&#39; <span class="op">.</span> (<span class="fu">filter</span> <span class="fu">even</span>) <span class="op">.</span> (<span class="fu">map</span> (<span class="op">^</span><span class="dv">2</span>))</span>
<span id="cb80-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb80-2" aria-hidden="true"></a>squareEvenSum&#39; <span class="ot">=</span> evenSum <span class="op">.</span> (<span class="fu">map</span> (<span class="op">^</span><span class="dv">2</span>))</span></code></pre></div><p>We just had to add another "transformation function".</p><pre class="example"><code>map (^2) [1,2,3,4] â [1,4,9,16]
</code></pre><p>The <code>map</code> function simply applies a function to all the elements of a list.</p><p>We didn't have to modify anything <em>inside</em> the function definition. This makes the code more modular. But in addition you can think more mathematically about your functions. You can also use your functions interchangeably with others, as needed. That is, you can <em>compose</em>, map, fold, filter using your new function.</p><p>Modifying version 1 is left as an exercise to the reader âº.</p><p>If you believe we have reached the end of generalization, then know you are very wrong. For example, there is a way to not only use this function on lists but on any recursive type. If you want to know how, I suggest you to read this quite fun article: <a href="http://eprints.eemcs.utwente.nl/7281/01/db-utwente-40501F46.pdf">Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire by Meijer, Fokkinga and Paterson</a>.</p><p>This example should show you how great pure functional programming is. Unfortunately, using pure functional programming isn't well suited to all usages. Or at least such a language hasn't been found yet.</p><p>One of the great powers of Haskell is the ability to create DSL (Domain Specific Language) making it easy to change the programming paradigm.</p><p>In fact, Haskell is also great when you want to write imperative style programming. Understanding this was really hard for me to grasp when first learning Haskell. A lot of effort tends to go into explaining the superiority of the functional approach. Then when you start using an imperative style with Haskell, it can be hard to understand when and how to use it.</p><p>But before talking about this Haskell super-power, we must talk about another essential aspect of Haskell: <em>Types</em>.</p><h2 id="types">Types</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/salvador-dali-the-madonna-of-port-lligat.jpg" alt="Dali, the madonna of port Lligat"></img><figcaption aria-hidden="true">Dali, the madonna of port Lligat</figcaption></figure><blockquote><p><abbr title="too long; didn't read">tl;dr:</abbr></p><ul><li><code>type Name = AnotherType</code> is just an alias and the compiler doesn't mark any difference between <code>Name</code> and <code>AnotherType</code>.</li><li><code>data Name = NameConstructor AnotherType</code> does mark a difference.</li><li><code>data</code> can construct structures which can be recursives.</li><li><code>deriving</code> is magic and creates functions for you.</li></ul></blockquote><p>In Haskell, types are strong and static.</p><p>Why is this important? It will help you <em>greatly</em> to avoid mistakes. In Haskell, most bugs are caught during the compilation of your program. And the main reason is because of the type checking during compilation. Type checking makes it easy to detect where you used the wrong parameter at the wrong place, for example.</p><h3 id="type-inference">Type inference</h3><p>Static typing is generally essential for fast execution. But most statically typed languages are bad at generalizing concepts. Haskell's saving grace is that it can <em>infer</em> types.</p><p>Here is a simple example, the <code>square</code> function in Haskell:</p><div class="m" id="cb82"><pre class="m haskell"><code class="m haskell"><span id="cb82-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb82-1" aria-hidden="true"></a>square x <span class="ot">=</span> x <span class="op">*</span> x</span></code></pre></div><p>This function can <code>square</code> any Numeral type. You can provide <code>square</code> with an <code>Int</code>, an <code>Integer</code>, a <code>Float</code> a <code>Fractional</code> and even <code>Complex</code>. Proof by example:</p><pre class="example"><code>~/t/hsenv&gt; ghci
GHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help
Prelude&gt; let square x = x * x
Prelude&gt; square 2
4
Prelude&gt; square 2.1
4.41
Prelude&gt; :m Data.Complex
Prelude Data.Complex&gt; square (2 :+ 1)
3.0 :+ 4.0
</code></pre><p><code>x :+ y</code> is the notation for the complex (x + iy).</p><p>Now compare with the amount of code necessary in C:</p><div class="m" id="cb84" data-org-language="C"><pre class="m c"><code class="m c"><span id="cb84-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-1" aria-hidden="true"></a><span class="dt">int</span>     int_square(<span class="dt">int</span> x) { <span class="cf">return</span> x*x; }</span>
<span id="cb84-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-2" aria-hidden="true"></a><span class="dt">float</span>   float_square(<span class="dt">float</span> x) {<span class="cf">return</span> x*x; }</span>
<span id="cb84-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-3" aria-hidden="true"></a><span class="dt">complex</span> complex_square (<span class="dt">complex</span> z) {</span>
<span id="cb84-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-4" aria-hidden="true"></a>    <span class="dt">complex</span> tmp;</span>
<span id="cb84-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-5" aria-hidden="true"></a>    tmp.real = z.real * z.real - z.img * z.img;</span>
<span id="cb84-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-6" aria-hidden="true"></a>    tmp.img = <span class="dv">2</span> * z.img * z.real;</span>
<span id="cb84-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-7" aria-hidden="true"></a>}</span>
<span id="cb84-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-8" aria-hidden="true"></a><span class="dt">complex</span> x,y;</span>
<span id="cb84-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb84-9" aria-hidden="true"></a>y = complex_square(x);</span></code></pre></div><p>For each type, you need to write a new function. The only way to work around this problem is to use some meta-programming trick, for example using the pre-processor. In C++ there is a better way, C++ templates:</p><div class="m" id="cb85"><pre class="m cpp"><code class="m cpp"><span id="cb85-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-1" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb85-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-2" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&lt;complex&gt;</span></span>
<span id="cb85-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-3" aria-hidden="true"></a><span class="kw">using</span> <span class="kw">namespace</span> std;</span>
<span id="cb85-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-4" aria-hidden="true"></a></span>
<span id="cb85-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-5" aria-hidden="true"></a><span class="kw">template</span>&lt;<span class="kw">typename</span> T&gt;</span>
<span id="cb85-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-6" aria-hidden="true"></a>T square(T x)</span>
<span id="cb85-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-7" aria-hidden="true"></a>{</span>
<span id="cb85-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-8" aria-hidden="true"></a>    <span class="cf">return</span> x*x;</span>
<span id="cb85-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-9" aria-hidden="true"></a>}</span>
<span id="cb85-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-10" aria-hidden="true"></a></span>
<span id="cb85-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-11" aria-hidden="true"></a><span class="dt">int</span> main() {</span>
<span id="cb85-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-12" aria-hidden="true"></a>    <span class="co">// int</span></span>
<span id="cb85-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-13" aria-hidden="true"></a>    <span class="dt">int</span> sqr_of_five = square(<span class="dv">5</span>);</span>
<span id="cb85-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-14" aria-hidden="true"></a>    cout &lt;&lt; sqr_of_five &lt;&lt; endl;</span>
<span id="cb85-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-15" aria-hidden="true"></a>    <span class="co">// double</span></span>
<span id="cb85-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-16" aria-hidden="true"></a>    cout &lt;&lt; (<span class="dt">double</span>)square(<span class="fl">5.3</span>) &lt;&lt; endl;</span>
<span id="cb85-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-17" aria-hidden="true"></a>    <span class="co">// complex</span></span>
<span id="cb85-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-18" aria-hidden="true"></a>    cout &lt;&lt; square( complex&lt;<span class="dt">double</span>&gt;(<span class="dv">5</span>,<span class="dv">3</span>) )</span>
<span id="cb85-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-19" aria-hidden="true"></a>         &lt;&lt; endl;</span>
<span id="cb85-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-20" aria-hidden="true"></a>    <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb85-21"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb85-21" aria-hidden="true"></a>}</span></code></pre></div><p>C++ does a far better job than C in this regard. But for more complex functions the syntax can be hard to follow: see <a href="http://bartoszmilewski.com/2009/10/21/what-does-haskell-have-to-do-with-c/">this article</a> for example.</p><p>In C++ you must declare that a function can work with different types. In Haskell, the opposite is the case. The function will be as general as possible by default.</p><p>Type inference gives Haskell the feeling of freedom that dynamically typed languages provide. But unlike dynamically typed languages, most errors are caught before run time. Generally, in Haskell:</p><blockquote><p>"if it compiles it certainly does what you intended"</p></blockquote><h3 id="type-construction">Type construction</h3><p>You can construct your own types. First, you can use aliases or type synonyms.</p><div class="m" id="cb86" data-tangle="type_constr_1.hs"><pre class="m haskell"><code class="m haskell"><span id="cb86-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Name</span>   <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb86-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Color</span>  <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb86-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-3" aria-hidden="true"></a></span>
<span id="cb86-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-4" aria-hidden="true"></a><span class="ot">showInfos ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span>  <span class="dt">Color</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb86-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-5" aria-hidden="true"></a>showInfos name color <span class="ot">=</span>  <span class="st">&quot;Name: &quot;</span> <span class="op">++</span> name</span>
<span id="cb86-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-6" aria-hidden="true"></a>                        <span class="op">++</span> <span class="st">&quot;, Color: &quot;</span> <span class="op">++</span> color</span>
<span id="cb86-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-7" aria-hidden="true"></a><span class="ot">name ::</span> <span class="dt">Name</span></span>
<span id="cb86-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-8" aria-hidden="true"></a>name <span class="ot">=</span> <span class="st">&quot;Robin&quot;</span></span>
<span id="cb86-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-9" aria-hidden="true"></a><span class="ot">color ::</span> <span class="dt">Color</span></span>
<span id="cb86-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-10" aria-hidden="true"></a>color <span class="ot">=</span> <span class="st">&quot;Blue&quot;</span></span>
<span id="cb86-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb86-11" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> showInfos name color</span></code></pre></div><p>But it doesn't protect you much. Try to swap the two parameter of <code>showInfos</code> and run the program:</p><div class="m" id="cb87"><pre class="m haskell"><code class="m haskell"><span id="cb87-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb87-1" aria-hidden="true"></a><span class="fu">putStrLn</span> <span class="op">$</span> showInfos color name</span></code></pre></div><p>It will compile and execute. In fact you can replace Name, Color and String everywhere. The compiler will treat them as completely identical.</p><p>Another method is to create your own types using the keyword <code>data</code>.</p><div class="m" id="cb88"><pre class="m haskell"><code class="m haskell"><span id="cb88-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Name</span>   <span class="ot">=</span> <span class="dt">NameConstr</span> <span class="dt">String</span></span>
<span id="cb88-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Color</span>  <span class="ot">=</span> <span class="dt">ColorConstr</span> <span class="dt">String</span></span>
<span id="cb88-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-3" aria-hidden="true"></a></span>
<span id="cb88-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-4" aria-hidden="true"></a><span class="ot">showInfos ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span>  <span class="dt">Color</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb88-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-5" aria-hidden="true"></a>showInfos (<span class="dt">NameConstr</span> name) (<span class="dt">ColorConstr</span> color) <span class="ot">=</span></span>
<span id="cb88-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-6" aria-hidden="true"></a>      <span class="st">&quot;Name: &quot;</span> <span class="op">++</span> name <span class="op">++</span> <span class="st">&quot;, Color: &quot;</span> <span class="op">++</span> color</span>
<span id="cb88-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-7" aria-hidden="true"></a></span>
<span id="cb88-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-8" aria-hidden="true"></a>name  <span class="ot">=</span> <span class="dt">NameConstr</span> <span class="st">&quot;Robin&quot;</span></span>
<span id="cb88-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-9" aria-hidden="true"></a>color <span class="ot">=</span> <span class="dt">ColorConstr</span> <span class="st">&quot;Blue&quot;</span></span>
<span id="cb88-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb88-10" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> showInfos name color</span></code></pre></div><p>Now if you switch parameters of <code>showInfos</code>, the compiler complains! So this is a potential mistake you will never make again and the only price is to be a bit more verbose.</p><p>Also notice that constructors are functions:</p><div class="m" id="cb89"><pre class="m haskell"><code class="m haskell"><span id="cb89-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb89-1" aria-hidden="true"></a><span class="dt">NameConstr</span><span class="ot">  ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Name</span></span>
<span id="cb89-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb89-2" aria-hidden="true"></a><span class="dt">ColorConstr</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Color</span></span></code></pre></div><p>The syntax of <code>data</code> is mainly:</p><div class="m" id="cb90"><pre class="m haskell"><code class="m haskell"><span id="cb90-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb90-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">TypeName</span> <span class="ot">=</span>   <span class="dt">ConstructorName</span>  [types]</span>
<span id="cb90-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb90-2" aria-hidden="true"></a>                <span class="op">|</span> <span class="dt">ConstructorName2</span> [types]</span>
<span id="cb90-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb90-3" aria-hidden="true"></a>                <span class="op">|</span> <span class="op">...</span></span></code></pre></div><p>Generally the usage is to use the same name for the DataTypeName and DataTypeConstructor.</p><p>Example:</p><div class="m" id="cb91"><pre class="m haskell"><code class="m haskell"><span id="cb91-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb91-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Complex</span> a <span class="ot">=</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Complex</span> a a</span></code></pre></div><p>Also you can use the record syntax:</p><div class="m" id="cb92"><pre class="m haskell"><code class="m haskell"><span id="cb92-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb92-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">DataTypeName</span> <span class="ot">=</span> <span class="dt">DataConstructor</span> {</span>
<span id="cb92-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb92-2" aria-hidden="true"></a><span class="ot">                      field1 ::</span> [<span class="kw">type</span> <span class="kw">of</span> field1]</span>
<span id="cb92-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb92-3" aria-hidden="true"></a>                    ,<span class="ot"> field2 ::</span> [<span class="kw">type</span> <span class="kw">of</span> field2]</span>
<span id="cb92-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb92-4" aria-hidden="true"></a>                    <span class="op">...</span></span>
<span id="cb92-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb92-5" aria-hidden="true"></a>                    ,<span class="ot"> fieldn ::</span> [<span class="kw">type</span> <span class="kw">of</span> fieldn] }</span></code></pre></div><p>And many accessors are made for you. Furthermore you can use another order when setting values.</p><p>Example:</p><div class="m" id="cb93"><pre class="m haskell"><code class="m haskell"><span id="cb93-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb93-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Complex</span> a <span class="ot">=</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Complex</span> {<span class="ot"> real ::</span> a,<span class="ot"> img ::</span> a}</span>
<span id="cb93-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb93-2" aria-hidden="true"></a>c <span class="ot">=</span> <span class="dt">Complex</span> <span class="fl">1.0</span> <span class="fl">2.0</span></span>
<span id="cb93-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb93-3" aria-hidden="true"></a>z <span class="ot">=</span> <span class="dt">Complex</span> { real <span class="ot">=</span> <span class="dv">3</span>, img <span class="ot">=</span> <span class="dv">4</span> }</span>
<span id="cb93-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb93-4" aria-hidden="true"></a>real c <span class="ot">â</span> <span class="fl">1.0</span></span>
<span id="cb93-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb93-5" aria-hidden="true"></a>img z <span class="ot">â</span> <span class="dv">4</span></span></code></pre></div><h3 id="recursive-type">Recursive type</h3><p>You already encountered a recursive type: lists. You can re-create lists, but with a more verbose syntax:</p><div class="m" id="cb94"><pre class="m haskell"><code class="m haskell"><span id="cb94-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb94-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">List</span> a <span class="ot">=</span> <span class="dt">Empty</span> <span class="op">|</span> <span class="dt">Cons</span> a (<span class="dt">List</span> a)</span></code></pre></div><p>If you really want to use an easier syntax you can use an infix name for constructors.</p><div class="m" id="cb95"><pre class="m haskell"><code class="m haskell"><span id="cb95-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb95-1" aria-hidden="true"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:::</span></span>
<span id="cb95-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb95-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">List</span> a <span class="ot">=</span> <span class="dt">Nil</span> <span class="op">|</span> a <span class="op">:::</span> (<span class="dt">List</span> a)</span></code></pre></div><p>The number after <code>infixr</code> gives the precedence.</p><p>If you want to be able to print (<code>Show</code>), read (<code>Read</code>), test equality (<code>Eq</code>) and compare (<code>Ord</code>) your new data structure you can tell Haskell to derive the appropriate functions for you.</p><div class="m" id="cb96" data-tangle="list.hs"><pre class="m haskell"><code class="m haskell"><span id="cb96-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb96-1" aria-hidden="true"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:::</span></span>
<span id="cb96-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb96-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">List</span> a <span class="ot">=</span> <span class="dt">Nil</span> <span class="op">|</span> a <span class="op">:::</span> (<span class="dt">List</span> a)</span>
<span id="cb96-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb96-3" aria-hidden="true"></a>              <span class="kw">deriving</span> (<span class="dt">Show</span>,<span class="dt">Read</span>,<span class="dt">Eq</span>,<span class="dt">Ord</span>)</span></code></pre></div><p>When you add <code>deriving (Show)</code> to your data declaration, Haskell creates a <code>show</code> function for you. We'll see soon how you can use your own <code>show</code> function.</p><div class="m" id="cb97" data-tangle="list.hs"><pre class="m haskell"><code class="m haskell"><span id="cb97-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb97-1" aria-hidden="true"></a>convertList [] <span class="ot">=</span> <span class="dt">Nil</span></span>
<span id="cb97-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb97-2" aria-hidden="true"></a>convertList (x<span class="op">:</span>xs) <span class="ot">=</span> x <span class="op">:::</span> convertList xs</span></code></pre></div><div class="m" id="cb98" data-tangle="list.hs"><pre class="m haskell"><code class="m haskell"><span id="cb98-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb98-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb98-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb98-2" aria-hidden="true"></a>      <span class="fu">print</span> (<span class="dv">0</span> <span class="op">:::</span> <span class="dv">1</span> <span class="op">:::</span> <span class="dt">Nil</span>)</span>
<span id="cb98-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb98-3" aria-hidden="true"></a>      <span class="fu">print</span> (convertList [<span class="dv">0</span>,<span class="dv">1</span>])</span></code></pre></div><p>This prints:</p><pre class="example"><code>0 ::: (1 ::: Nil)
0 ::: (1 ::: Nil)
</code></pre><h3 id="trees">Trees</h3><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/magritte-l-arbre.jpg" alt="Magritte, l'Arbre"></img><figcaption aria-hidden="true">Magritte, l'Arbre</figcaption></figure><p>We'll just give another standard example: binary trees.</p><div class="m" id="cb100" data-tangle="tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb100-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb100-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">BinTree</span> a <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb100-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb100-2" aria-hidden="true"></a>                 <span class="op">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a)</span>
<span id="cb100-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb100-3" aria-hidden="true"></a>                              <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div><p>We will also create a function which turns a list into an ordered binary tree.</p><div class="m" id="cb101" data-tangle="tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb101-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb101-1" aria-hidden="true"></a><span class="ot">treeFromList ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a</span>
<span id="cb101-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb101-2" aria-hidden="true"></a>treeFromList [] <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb101-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb101-3" aria-hidden="true"></a>treeFromList (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="dt">Node</span> x (treeFromList (<span class="fu">filter</span> (<span class="op">&lt;</span>x) xs))</span>
<span id="cb101-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb101-4" aria-hidden="true"></a>                             (treeFromList (<span class="fu">filter</span> (<span class="op">&gt;</span>x) xs))</span></code></pre></div><p>Look at how elegant this function is. In plain English:</p><ul><li><p>an empty list will be converted to an empty tree.</p></li><li><p>a list <code>(x:xs)</code> will be converted to a tree where:</p><ul><li>The root is <code>x</code></li><li>Its left subtree is the tree created from members of the list <code>xs</code> which are strictly inferior to <code>x</code> and</li><li>the right subtree is the tree created from members of the list <code>xs</code> which are strictly superior to <code>x</code>.</li></ul></li></ul><div class="m" id="cb102" data-tangle="tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb102-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb102-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> treeFromList [<span class="dv">7</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">8</span>]</span></code></pre></div><p>You should obtain the following:</p><pre class="example"><code>Node 7 (Node 2 Empty (Node 4 Empty Empty)) (Node 8 Empty Empty)
</code></pre><p>This is an informative but quite unpleasant representation of our tree.</p><p>I've added the <code>containers</code> package in the <code>shell.nix</code> file, it is time to use this library which contain functions to show trees and list of trees (forest) named <code>drawTree</code> and <code>drawForest</code>.</p><div class="m" id="cb104" data-tangle="pretty_tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb104-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Data.Tree</span> (<span class="dt">Tree</span>,<span class="dt">Forest</span>(..))</span>
<span id="cb104-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-2" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Tree</span> <span class="kw">as</span> <span class="dt">Tree</span></span>
<span id="cb104-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-3" aria-hidden="true"></a></span>
<span id="cb104-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-4" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">BinTree</span> a <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb104-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-5" aria-hidden="true"></a>               <span class="op">|</span> <span class="dt">Node</span> a (<span class="dt">BinTree</span> a) (<span class="dt">BinTree</span> a)</span>
<span id="cb104-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-6" aria-hidden="true"></a>               <span class="kw">deriving</span> (<span class="dt">Eq</span>,<span class="dt">Ord</span>,<span class="dt">Show</span>)</span>
<span id="cb104-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-7" aria-hidden="true"></a></span>
<span id="cb104-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-8" aria-hidden="true"></a><span class="ot">treeFromList ::</span> (<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a</span>
<span id="cb104-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-9" aria-hidden="true"></a>treeFromList [] <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb104-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-10" aria-hidden="true"></a>treeFromList (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="dt">Node</span> x (treeFromList (<span class="fu">filter</span> (<span class="op">&lt;</span>x) xs))</span>
<span id="cb104-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-11" aria-hidden="true"></a>                      (treeFromList (<span class="fu">filter</span> (<span class="op">&gt;</span>x) xs))</span>
<span id="cb104-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-12" aria-hidden="true"></a></span>
<span id="cb104-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-13" aria-hidden="true"></a><span class="co">-- | Function to transform our internal BinTree type to the</span></span>
<span id="cb104-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-14" aria-hidden="true"></a><span class="co">-- type of Tree declared in Data.Tree (from containers package)</span></span>
<span id="cb104-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-15" aria-hidden="true"></a><span class="co">-- so that the function Tree.drawForest can use</span></span>
<span id="cb104-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-16" aria-hidden="true"></a><span class="ot">binTreeToForestString ::</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">BinTree</span> a <span class="ot">-&gt;</span> <span class="dt">Forest</span> <span class="dt">String</span></span>
<span id="cb104-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-17" aria-hidden="true"></a>binTreeToForestString <span class="dt">Empty</span> <span class="ot">=</span> []</span>
<span id="cb104-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-18" aria-hidden="true"></a>binTreeToForestString (<span class="dt">Node</span> x left right) <span class="ot">=</span></span>
<span id="cb104-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-19" aria-hidden="true"></a>  [<span class="dt">Tree.Node</span> (<span class="fu">show</span> x) ((binTreeToForestString left) <span class="op">++</span> (binTreeToForestString right))]</span>
<span id="cb104-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-20" aria-hidden="true"></a></span>
<span id="cb104-21"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-21" aria-hidden="true"></a><span class="co">-- | Function that given a BinTree print a representation of it in the console</span></span>
<span id="cb104-22"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-22" aria-hidden="true"></a><span class="ot">prettyPrintTree ::</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">BinTree</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb104-23"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-23" aria-hidden="true"></a>prettyPrintTree <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">.</span> Tree.drawForest <span class="op">.</span> binTreeToForestString</span>
<span id="cb104-24"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-24" aria-hidden="true"></a></span>
<span id="cb104-25"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-25" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb104-26"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-26" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Int binary tree:&quot;</span></span>
<span id="cb104-27"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-27" aria-hidden="true"></a>  prettyPrintTree <span class="op">$</span> treeFromList [<span class="dv">7</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">8</span>,<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">21</span>,<span class="dv">12</span>,<span class="dv">23</span>]</span>
<span id="cb104-28"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-28" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;\nNote we could also use another type\n&quot;</span></span>
<span id="cb104-29"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-29" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;String binary tree:&quot;</span></span>
<span id="cb104-30"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-30" aria-hidden="true"></a>  prettyPrintTree <span class="op">$</span></span>
<span id="cb104-31"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-31" aria-hidden="true"></a>    treeFromList [<span class="st">&quot;foo&quot;</span>,<span class="st">&quot;bar&quot;</span>,<span class="st">&quot;baz&quot;</span>,<span class="st">&quot;gor&quot;</span>,<span class="st">&quot;yog&quot;</span>]</span>
<span id="cb104-32"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-32" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;\nAs we can test equality and order trees, we can make tree of trees!\n&quot;</span></span>
<span id="cb104-33"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-33" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;\nBinary tree of Char binary trees:&quot;</span></span>
<span id="cb104-34"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-34" aria-hidden="true"></a>  prettyPrintTree (treeFromList</span>
<span id="cb104-35"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb104-35" aria-hidden="true"></a>                    (<span class="fu">map</span> treeFromList [<span class="st">&quot;foo&quot;</span>,<span class="st">&quot;bar&quot;</span>,<span class="st">&quot;zara&quot;</span>,<span class="st">&quot;baz&quot;</span>,<span class="st">&quot;foo&quot;</span>]))</span></code></pre></div><pre class="example"><code>~/t/hsenv&gt; runghc pretty_tree.hs
Int binary tree:
7
|
+- 2
|  |
|  +- 1
|  |
|  `- 4
|     |
|     +- 3
|     |
|     `- 6
|
`- 8
   |
   `- 21
      |
      +- 12
      |
      `- 23

Note we could also use another type

String binary tree:
&quot;foo&quot;
|
+- &quot;bar&quot;
|  |
|  `- &quot;baz&quot;
|
`- &quot;gor&quot;
   |
   `- &quot;yog&quot;

As we can test equality and order trees, we can make tree of trees!

Binary tree of Char binary trees:
Node &#39;f&#39; Empty (Node &#39;o&#39; Empty Empty)
|
+- Node &#39;b&#39; (Node &#39;a&#39; Empty Empty) (Node &#39;r&#39; Empty Empty)
|  |
|  `- Node &#39;b&#39; (Node &#39;a&#39; Empty Empty) (Node &#39;z&#39; Empty Empty)
|
`- Node &#39;z&#39; (Node &#39;a&#39; Empty (Node &#39;r&#39; Empty Empty)) Empty
</code></pre><p>Notice how duplicate elements aren't inserted in trees. For exemple the Char BinTree constructed from the list <code>foo</code> is just <code>f -> o</code>. When <code>o</code> is inserted another time the second <code>o</code> is not duplicated. But more importantly it works also for our own <code>BinTree</code> notice how the tree for <code>foo</code> is inserted only once. We have this for (almost) free, because we have declared Tree to be an instance of <code>Eq</code>.</p><p>See how awesome this structure is: we can make trees containing not only integers, strings and chars, but also other trees. And we can even make a tree containing a tree of trees!</p><h3 id="more-advanced-types">More Advanced Types</h3><p>So far we have presented types that are close to types we can see in most typed programming languages. But the real strength of Haskell is its type system. So I will try to give you an idea about what makes the Haskell type system more advanced than in most languages.</p><p>So as comparison, classical types/schemas, etcâ¦ are about products of different sub-types:</p><div class="m" id="cb106"><pre class="m haskell"><code class="m haskell"><span id="cb106-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb106-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">ProductType</span> <span class="ot">=</span> <span class="dt">P</span> <span class="dt">Int</span> <span class="dt">String</span></span>
<span id="cb106-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb106-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PersonRecord</span> <span class="ot">=</span> <span class="dt">Person</span> {<span class="ot"> age ::</span> <span class="dt">Int</span>,<span class="ot"> name ::</span> <span class="dt">String</span> }</span></code></pre></div><p>Haskell has also a notion of <code>sum types</code> that I often lack a lot in other programming languages I use.</p><p>You can define your type as a sum:</p><div class="m" id="cb107"><pre class="m haskell"><code class="m haskell"><span id="cb107-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb107-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Point</span> <span class="ot">=</span> <span class="dt">D1</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">D2</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">D3</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span></span></code></pre></div><p>So far so good. Sum types are already a nice thing to have, in particular within Haskell because now the compiler can warn you if you miss a case. For example if you write:</p><div class="m" id="cb108"><pre class="m haskell"><code class="m haskell"><span id="cb108-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb108-1" aria-hidden="true"></a><span class="kw">case</span> point <span class="kw">of</span></span>
<span id="cb108-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb108-2" aria-hidden="true"></a>  <span class="dt">D1</span> x <span class="ot">-&gt;</span> <span class="op">...</span></span>
<span id="cb108-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb108-3" aria-hidden="true"></a>  <span class="dt">D2</span> x y <span class="ot">-&gt;</span> <span class="op">...</span></span></code></pre></div><p>If you compile with the <code>-Wall</code> flag (as you should always do for serious development) then the compiler will warn you that you are forgetting some possible value.</p><p>Those are still not really advanced types. Advanced type are higher order types. Those are the one that help with making your code more polymorphic.</p><p>We will start with example I alreday provided, lists:</p><div class="m" id="cb109"><pre class="m haskell"><code class="m haskell"><span id="cb109-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb109-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">MyList</span> a <span class="ot">=</span> <span class="dt">Cons</span> a (<span class="dt">MyList</span> a) <span class="op">|</span> <span class="dt">Nil</span></span></code></pre></div><p>As you can see <code>MyList</code> takes a type parameter. So <code>MyList</code> is a higher order type. Generally, the intuition behind type is that a type is a data structure or a container. But in fact, Haskell types can be or can contain functions. This is for example the case for <code>IO</code>. And this is why it can be confusing to read the type of some functions. I will take as example <code>sequenceA</code>:</p><div class="m" id="cb110"><pre class="m haskell"><code class="m haskell"><span id="cb110-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb110-1" aria-hidden="true"></a><span class="fu">sequenceA</span><span class="ot"> ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> t (f a) <span class="ot">-&gt;</span> f (t a)</span></code></pre></div><p>So if you read this, it can be quite difficult to grasp what is the intended use of this function. A simple technique for example, is to try to replace the higher order types (here <code>t</code> and <code>f</code>) by a type you can have some intuition about. For example consider <code>t</code> to be the higher order type <code>Tree</code> and <code>f</code> to be the higher order type <code>[]</code> (list).</p><p>Now you can see that <code>sequenceA</code> sill take a Tree of lists and will return a list of trees. For it to work <code>[]</code> need to be part of the <code>Applicative</code> class type (which is the case). I will not enter into the details about what <code>Applicative</code> type class is here. But just with this, you should start to have a better intuition about what <code>sequenceA</code> is about.</p><h2 id="infinite-structures">Infinite Structures</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/escher_infinite_lizards.jpg" alt="Escher"></img><figcaption aria-hidden="true">Escher</figcaption></figure><p>It is often said that Haskell is <em>lazy</em>.</p><p>In fact, if you are a bit pedantic, you should say that <a href="http://www.haskell.org/haskellwiki/Lazy_vs._non-strict">Haskell is <em>non-strict</em></a>. Laziness is just a common implementation for non-strict languages.</p><p>Then what does "not-strict" mean? From the Haskell wiki:</p><blockquote><p>Reduction (the mathematical term for evaluation) proceeds from the outside in.</p><p>so if you have <code>(a+(b*c))</code> then you first reduce <code>+</code> first, then you reduce the inner <code>(b*c)</code></p></blockquote><p>For example in Haskell you can do:</p><div class="m" id="cb111"><pre class="m haskell"><code class="m haskell"><span id="cb111-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-1" aria-hidden="true"></a><span class="co">-- numbers = [1,2,..]</span></span>
<span id="cb111-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-2" aria-hidden="true"></a><span class="ot">numbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb111-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-3" aria-hidden="true"></a>numbers <span class="ot">=</span> <span class="dv">0</span><span class="op">:</span><span class="fu">map</span> (<span class="dv">1</span><span class="op">+</span>) numbers</span>
<span id="cb111-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-4" aria-hidden="true"></a></span>
<span id="cb111-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-5" aria-hidden="true"></a>take&#39; n [] <span class="ot">=</span> []</span>
<span id="cb111-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-6" aria-hidden="true"></a>take&#39; <span class="dv">0</span> l <span class="ot">=</span> []</span>
<span id="cb111-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-7" aria-hidden="true"></a>take&#39; n (x<span class="op">:</span>xs) <span class="ot">=</span> x<span class="op">:</span>take&#39; (n<span class="op">-</span><span class="dv">1</span>) xs</span>
<span id="cb111-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-8" aria-hidden="true"></a></span>
<span id="cb111-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb111-9" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> take&#39; <span class="dv">10</span> numbers</span></code></pre></div><p>And it stops.</p><p>How?</p><p>Instead of trying to evaluate <code>numbers</code> entirely, it evaluates elements only when needed.</p><p>Also, note in Haskell there is a notation for infinite lists</p><pre class="example"><code>[1..]   â [1,2,3,4...]
[1,3..] â [1,3,5,7,9,11...]
</code></pre><p>and most functions will work with them. Also, there is a built-in function <code>take</code> which is equivalent to our <code>take'</code>.</p><h3 id="infinite-trees">Infinite Trees</h3><p>Suppose we don't mind having an ordered binary tree. Here is an infinite binary tree:</p><div class="m" id="cb113" data-tangle="infinite_tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb113-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb113-1" aria-hidden="true"></a>nullTree <span class="ot">=</span> <span class="dt">Node</span> <span class="dv">0</span> nullTree nullTree</span></code></pre></div><p>A complete binary tree where each node is equal to 0. Now I will prove you can manipulate this object using the following function:</p><div class="m" id="cb114" data-tangle="infinite_tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb114-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-1" aria-hidden="true"></a><span class="co">-- take all element of a BinTree</span></span>
<span id="cb114-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-2" aria-hidden="true"></a><span class="co">-- up to some depth</span></span>
<span id="cb114-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-3" aria-hidden="true"></a>treeTakeDepth _ <span class="dt">Empty</span> <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb114-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-4" aria-hidden="true"></a>treeTakeDepth <span class="dv">0</span> _     <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb114-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-5" aria-hidden="true"></a>treeTakeDepth n (<span class="dt">Node</span> x left right) <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb114-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-6" aria-hidden="true"></a>          nl <span class="ot">=</span> treeTakeDepth (n<span class="op">-</span><span class="dv">1</span>) left</span>
<span id="cb114-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-7" aria-hidden="true"></a>          nr <span class="ot">=</span> treeTakeDepth (n<span class="op">-</span><span class="dv">1</span>) right</span>
<span id="cb114-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-8" aria-hidden="true"></a>          <span class="kw">in</span></span>
<span id="cb114-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb114-9" aria-hidden="true"></a>              <span class="dt">Node</span> x nl nr</span></code></pre></div><p>See what occurs for this program:</p><div class="m" id="cb115" data-tangle="infinite_tree.hs"><pre class="m haskell"><code class="m haskell"><span id="cb115-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb115-1" aria-hidden="true"></a>main <span class="ot">=</span> prettyPrintTree (treeTakeDepth <span class="dv">4</span> nullTree)</span></code></pre></div><p>This code compiles, runs and stops giving the following result:</p><pre class="example"><code>[hs:hsenv]&gt; runghc infinite_tree.hs
0
|
+- 0
|  |
|  +- 0
|  |  |
|  |  +- 0
|  |  |
|  |  `- 0
|  |
|  `- 0
|     |
|     +- 0
|     |
|     `- 0
|
`- 0
   |
   +- 0
   |  |
   |  +- 0
   |  |
   |  `- 0
   |
   `- 0
      |
      +- 0
      |
      `- 0

</code></pre><p>Just to heat up your neurones a bit more, let's make a slightly more interesting tree:</p><div class="m" id="cb117" data-tangle="infinite_tree_2.hs"><pre class="m haskell"><code class="m haskell"><span id="cb117-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb117-1" aria-hidden="true"></a>iTree <span class="ot">=</span> <span class="dt">Node</span> <span class="dv">0</span> (dec iTree) (inc iTree)</span>
<span id="cb117-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb117-2" aria-hidden="true"></a>        <span class="kw">where</span></span>
<span id="cb117-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb117-3" aria-hidden="true"></a>           dec (<span class="dt">Node</span> x l r) <span class="ot">=</span> <span class="dt">Node</span> (x<span class="op">-</span><span class="dv">1</span>) (dec l) (dec r)</span>
<span id="cb117-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb117-4" aria-hidden="true"></a>           inc (<span class="dt">Node</span> x l r) <span class="ot">=</span> <span class="dt">Node</span> (x<span class="op">+</span><span class="dv">1</span>) (inc l) (inc r)</span></code></pre></div><p>Another way to create this tree is to use a higher order function. This function should be similar to <code>map</code>, but should work on <code>BinTree</code> instead of list. Here is such a function:</p><div class="m" id="cb118" data-tangle="infinite_tree_2.hs"><pre class="m haskell"><code class="m haskell"><span id="cb118-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb118-1" aria-hidden="true"></a><span class="co">-- apply a function to each node of Tree</span></span>
<span id="cb118-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb118-2" aria-hidden="true"></a><span class="ot">treeMap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">BinTree</span> a <span class="ot">-&gt;</span> <span class="dt">BinTree</span> b</span>
<span id="cb118-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb118-3" aria-hidden="true"></a>treeMap f <span class="dt">Empty</span> <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb118-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb118-4" aria-hidden="true"></a>treeMap f (<span class="dt">Node</span> x left right) <span class="ot">=</span> <span class="dt">Node</span> (f x)</span>
<span id="cb118-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb118-5" aria-hidden="true"></a>                                     (treeMap f left)</span>
<span id="cb118-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb118-6" aria-hidden="true"></a>                                     (treeMap f right)</span></code></pre></div><p><em>Hint</em>: I won't talk more about this here. If you are interested in the generalization of <code>map</code> to other data structures, search for functor and <code>fmap</code>.</p><p>Our definition is now:</p><div class="m" id="cb119" data-tangle="infinite_tree_2.hs"><pre class="m haskell"><code class="m haskell"><span id="cb119-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb119-1" aria-hidden="true"></a><span class="ot">infTreeTwo ::</span> <span class="dt">BinTree</span> <span class="dt">Int</span></span>
<span id="cb119-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb119-2" aria-hidden="true"></a>infTreeTwo <span class="ot">=</span> <span class="dt">Node</span> <span class="dv">0</span> (treeMap (\x <span class="ot">-&gt;</span> x<span class="op">-</span><span class="dv">1</span>) infTreeTwo)</span>
<span id="cb119-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb119-3" aria-hidden="true"></a>                    (treeMap (\x <span class="ot">-&gt;</span> x<span class="op">+</span><span class="dv">1</span>) infTreeTwo)</span></code></pre></div><p>Look at the result for</p><div class="m" id="cb120" data-tangle="infinite_tree_2.hs"><pre class="m haskell"><code class="m haskell"><span id="cb120-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb120-1" aria-hidden="true"></a>main <span class="ot">=</span> prettyPrintTree <span class="op">$</span> treeTakeDepth <span class="dv">4</span> infTreeTwo</span></code></pre></div><pre class="example"><code>[hs:hsenv]&gt; runghc infinite_tree_2.hs
0
|
+- -1
|  |
|  +- -2
|  |  |
|  |  +- -3
|  |  |
|  |  `- -1
|  |
|  `- 0
|     |
|     +- -1
|     |
|     `- 1
|
`- 1
   |
   +- 0
   |  |
   |  +- -1
   |  |
   |  `- 1
   |
   `- 2
      |
      +- 1
      |
      `- 3
</code></pre><h3 id="fibonnacci-infinite-list">Fibonnacci infinite list</h3><p>The important things to remember. Haskell handle infinite structures naturally mostly because it is not strict.</p><p>So you can write, infinite tree, but also, you can generate infinite list like this common example:</p><div class="m" id="cb122" data-tangle="fib_lazy.hs"><pre class="m haskell"><code class="m haskell"><span id="cb122-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb122-1" aria-hidden="true"></a><span class="ot">fib ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb122-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb122-2" aria-hidden="true"></a>fib <span class="ot">=</span> <span class="dv">1</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span><span class="fu">zipWith</span> (<span class="op">+</span>) fib (<span class="fu">tail</span> fib)</span>
<span id="cb122-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb122-3" aria-hidden="true"></a></span>
<span id="cb122-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb122-4" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">traverse</span> <span class="fu">print</span> (<span class="fu">take</span> <span class="dv">20</span> (<span class="fu">drop</span> <span class="dv">200</span> fib))</span></code></pre></div><p>Many new details in this small code. Don't worry if you do not get all details:</p><ul><li><code>fib</code> is a list of Integer, not a function</li><li><code>drop n</code> remove n element of a list</li><li><code>take n</code> keep the first n elements of a list</li><li><code>zipWith op [a1,a2,a3,...] [b1,b2,b3,...]</code> will generate the list <code>[op a1 b1,op a2 b2,op a3 b3, .... ]</code></li><li><code>traverse</code> is like map but for performing effects (in this case print)</li></ul><p>This progam print all fibonnacci numbers from 201 to 221 instantaneously. Because, <code>fib</code> is a list that will be used as "cache" to compute each number even considering the code looks a bit like a double recursion.</p><pre class="example"><code>[hs:0010-Haskell-Now]&gt; time runghc fib_lazy.hs
453973694165307953197296969697410619233826
734544867157818093234908902110449296423351
1188518561323126046432205871807859915657177
1923063428480944139667114773918309212080528
3111581989804070186099320645726169127737705
5034645418285014325766435419644478339818233
8146227408089084511865756065370647467555938
13180872826374098837632191485015125807374171
21327100234463183349497947550385773274930109
34507973060837282187130139035400899082304280
55835073295300465536628086585786672357234389
90343046356137747723758225621187571439538669
146178119651438213260386312206974243796773058
236521166007575960984144537828161815236311727
382699285659014174244530850035136059033084785
619220451666590135228675387863297874269396512
1001919737325604309473206237898433933302481297
1621140188992194444701881625761731807571877809
2623059926317798754175087863660165740874359106
4244200115309993198876969489421897548446236915

real    0m1.000s
user    0m0.192s
sys 0m0.058s
</code></pre><p>Let's see how this work using <code>Debug.Trace</code>:</p><div class="m" id="cb124" data-tangle="fib_lazy_trace.hs"><pre class="m haskell"><code class="m haskell"><span id="cb124-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Debug.Trace</span></span>
<span id="cb124-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-2" aria-hidden="true"></a></span>
<span id="cb124-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-3" aria-hidden="true"></a><span class="co">-- like + but each time this is evaluated print a trace</span></span>
<span id="cb124-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-4" aria-hidden="true"></a>tracedPlus x y <span class="ot">=</span> trace (<span class="st">&quot;&gt; &quot;</span> <span class="op">++</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot; + &quot;</span> <span class="op">++</span> <span class="fu">show</span> y) (x <span class="op">+</span> y)</span>
<span id="cb124-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-5" aria-hidden="true"></a></span>
<span id="cb124-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-6" aria-hidden="true"></a><span class="ot">fib ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb124-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-7" aria-hidden="true"></a>fib <span class="ot">=</span> <span class="dv">1</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span><span class="fu">zipWith</span> tracedPlus fib (<span class="fu">tail</span> fib)</span>
<span id="cb124-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-8" aria-hidden="true"></a></span>
<span id="cb124-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-9" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb124-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-10" aria-hidden="true"></a>  <span class="fu">print</span> (fib <span class="op">!!</span> <span class="dv">10</span>)</span>
<span id="cb124-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb124-11" aria-hidden="true"></a>  <span class="fu">print</span> (fib <span class="op">!!</span> <span class="dv">12</span>)</span></code></pre></div><pre class="example"><code>[hs:hsenv]&gt; runghc fib_lazy_trace.hs
&gt; 1 + 1
&gt; 1 + 2
&gt; 2 + 3
&gt; 3 + 5
&gt; 5 + 8
&gt; 8 + 13
&gt; 13 + 21
&gt; 21 + 34
&gt; 34 + 55
89
&gt; 55 + 89
&gt; 89 + 144
233
</code></pre><p>Notice how, once computed, the list is kept in memory. This is why when the second time we ask for the 12th element of fib we only perform two more additions. This is both a blessing and a curse. A blessing if you know when to use this as in this example. And a curse as if do not take care about lazyness it will come back at you with memory leaks.</p><p>After a bit of experience, most Haskellers can avoid memory leaks naturally.</p><h1 id="dive-into-the-impure">Dive into the impure</h1><p>Congratulations for getting so far!</p><p>You have been introduced to the functional style and how to deal with <em>pure</em> code. Understand code that is only evaluated without changing the state of the external world.</p><p>If you are like me, you should get the functional style. You should also understand a bit more the advantages of laziness by default. But you also don't really understand where to start in order to make a real program. And in particular:</p><ul><li>How do you deal with effects?</li><li>Why is there a strange imperative-like notation for dealing with IO?</li></ul><p>Be prepared, the answers might be complex. But they are all very rewarding.</p><p>In this section you will first introduced about how to <em>use</em> IO. That should not be that hard. Then, a harder section should explain how IO works. And the last part will talk about how we can generalize why we learned so far with IO to many different types.</p><h2 id="deal-with-io">Deal With IO</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/magritte_carte_blanche.jpg" alt="Magritte, Carte blanche"></img><figcaption aria-hidden="true">Magritte, Carte blanche</figcaption></figure><blockquote><p><abbr title="too long; didn't read">tl;dr:</abbr></p><p>A typical function doing <code>IO</code> looks a lot like an imperative program:</p><div class="m" id="cb126"><pre class="m haskell"><code class="m haskell"><span id="cb126-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb126-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">IO</span> a</span>
<span id="cb126-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb126-2" aria-hidden="true"></a>f <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb126-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb126-3" aria-hidden="true"></a>  x <span class="ot">&lt;-</span> action1</span>
<span id="cb126-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb126-4" aria-hidden="true"></a>  action2 x</span>
<span id="cb126-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb126-5" aria-hidden="true"></a>  y <span class="ot">&lt;-</span> action3</span>
<span id="cb126-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb126-6" aria-hidden="true"></a>  action4 x y</span></code></pre></div><ul><li><p>To set a value to an object we use <code>&lt;-</code> .</p></li><li><p>The type of each line is <code>IO *</code>; in this example:</p><div class="m" id="cb127"><pre class="m haskell"><code class="m haskell"><span id="cb127-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb127-1" aria-hidden="true"></a><span class="op">-</span><span class="ot"> action1     ::</span> <span class="dt">IO</span> b</span>
<span id="cb127-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb127-2" aria-hidden="true"></a><span class="op">-</span><span class="ot"> x           ::</span> b</span>
<span id="cb127-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb127-3" aria-hidden="true"></a><span class="op">-</span> action2<span class="ot"> x   ::</span> <span class="dt">IO</span> ()</span>
<span id="cb127-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb127-4" aria-hidden="true"></a><span class="op">-</span><span class="ot"> action3     ::</span> <span class="dt">IO</span> c</span>
<span id="cb127-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb127-5" aria-hidden="true"></a><span class="op">-</span><span class="ot"> y           ::</span> c</span>
<span id="cb127-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb127-6" aria-hidden="true"></a><span class="op">-</span> action4 x<span class="ot"> y ::</span> <span class="dt">IO</span> a</span></code></pre></div></li><li><p>Few objects have the type <code>IO a</code>, this should help you choose. In particular you cannot use pure functions directly here. To use pure functions you could do <code>action2 (purefunction x)</code> for example.</p></li></ul></blockquote><p>In this section, I will explain how to use IO, not how it works. You'll see how Haskell separates the pure from the impure parts of the program.</p><p>Don't stop because you're trying to understand the details of the syntax. Answers will come in the next section.</p><p>What to achieve?</p><blockquote><p>Ask a user to enter a list of numbers. Print the sum of the numbers.</p></blockquote><div class="m" id="cb128" data-tangle="io_sum.hs"><pre class="m haskell"><code class="m haskell"><span id="cb128-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-1" aria-hidden="true"></a><span class="ot">toList ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb128-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-2" aria-hidden="true"></a>toList input <span class="ot">=</span> <span class="fu">read</span> (<span class="st">&quot;[&quot;</span> <span class="op">++</span> input <span class="op">++</span> <span class="st">&quot;]&quot;</span>)</span>
<span id="cb128-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-3" aria-hidden="true"></a></span>
<span id="cb128-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-4" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb128-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-5" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers (separated by comma):&quot;</span></span>
<span id="cb128-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-6" aria-hidden="true"></a>  input <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb128-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb128-7" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">sum</span> (toList input)</span></code></pre></div><p>It should be straightforward to understand the behavior of this program. Let's analyze the types in more detail.</p><div class="m" id="cb129"><pre class="m haskell"><code class="m haskell"><span id="cb129-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb129-1" aria-hidden="true"></a><span class="fu">putStrLn</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb129-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb129-2" aria-hidden="true"></a><span class="fu">getLine</span><span class="ot">  ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb129-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb129-3" aria-hidden="true"></a><span class="fu">print</span><span class="ot">    ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div><p>Or more interestingly, we note that each expression in the <code>do</code> block has a type of <code>IO a</code>.</p><div class="m" id="cb130"><pre class="m haskell"><code class="m haskell"><span id="cb130-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb130-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb130-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb130-2" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter ... &quot;</span><span class="ot"> ::</span> <span class="dt">IO</span> ()</span>
<span id="cb130-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb130-3" aria-hidden="true"></a><span class="ot">  getLine               ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb130-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb130-4" aria-hidden="true"></a>  <span class="fu">print</span> <span class="dt">Something</span><span class="ot">       ::</span> <span class="dt">IO</span> ()</span></code></pre></div><p>We should also pay attention to the effect of the <code>&lt;-</code> symbol.</p><div class="m" id="cb131"><pre class="m haskell"><code class="m haskell"><span id="cb131-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb131-1" aria-hidden="true"></a><span class="kw">do</span></span>
<span id="cb131-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb131-2" aria-hidden="true"></a>  x <span class="ot">&lt;-</span> something</span></code></pre></div><p>If <code>something :: IO a</code> then <code>x :: a</code>.</p><p>Another important note about using <code>IO</code>: all lines in a do block must be of one of the two forms:</p><div class="m" id="cb132"><pre class="m haskell"><code class="m haskell"><span id="cb132-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb132-1" aria-hidden="true"></a><span class="ot">action1 ::</span> <span class="dt">IO</span> a</span>
<span id="cb132-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb132-2" aria-hidden="true"></a>        <span class="co">-- in this case, generally a = ()</span></span></code></pre></div><p>or</p><div class="m" id="cb133"><pre class="m haskell"><code class="m haskell"><span id="cb133-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb133-1" aria-hidden="true"></a>value <span class="ot">&lt;-</span> action2    <span class="co">-- where</span></span>
<span id="cb133-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb133-2" aria-hidden="true"></a>                    <span class="co">-- action2 :: IO b</span></span>
<span id="cb133-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb133-3" aria-hidden="true"></a>                    <span class="co">-- value   :: b</span></span></code></pre></div><p>These two kinds of line will correspond to two different ways of sequencing actions. The meaning of this sentence should be clearer by the end of the next section.</p><p>Now let's see how this program behaves. For example, what happens if the user enters something strange? Let's try:</p><pre class="example"><code>[hs:hsenv]&gt; runghc io_sum.hs
Enter a list of numbers (separated by comma):
foo
Prelude.read: no parse
</code></pre><p>Argh! An evil error message and a crash! Our first improvement will simply be to answer with a more friendly message.</p><p>In order to do this, we must detect that something went wrong. Here is one way to do this: use the type <code>Maybe</code>. This is a very common type in Haskell.</p><div class="m" id="cb135" data-tangle="io_sum_safe.hs"><pre class="m haskell"><code class="m haskell"><span id="cb135-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb135-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb135-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb135-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Read</span> (readMaybe)</span></code></pre></div><p>What is this thing? <code>Maybe</code> is a type which takes one parameter. Its definition is:</p><div class="m" id="cb136"><pre class="m haskell"><code class="m haskell"><span id="cb136-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb136-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a</span></code></pre></div><p>This is a nice way to tell there was an error while trying to create/compute a value. The <code>readMaybe</code> function is a great example of this. This is a function similar to the function <code>read</code><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn4" class="g" id="fnref4" role="doc-noteref"><sup>4</sup></a>, but if something goes wrong the returned value is <code>Nothing</code>. If the value is right, it returns <code>Just &lt;the value></code>.</p><p>Now to be a bit more readable, we define a function which goes like this: If the string has the wrong format, it will return <code>Nothing</code>. Otherwise, for example for "1,2,3", it will return <code>Just [1,2,3]</code>.</p><div class="m" id="cb137" data-tangle="io_sum_safe.hs"><pre class="m haskell"><code class="m haskell"><span id="cb137-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb137-1" aria-hidden="true"></a><span class="ot">getListFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Integer</span>]</span>
<span id="cb137-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb137-2" aria-hidden="true"></a>getListFromString str <span class="ot">=</span> readMaybe <span class="op">$</span> <span class="st">&quot;[&quot;</span> <span class="op">++</span> str <span class="op">++</span> <span class="st">&quot;]&quot;</span></span></code></pre></div><p>We simply have to test the value in our main function.</p><div class="m" id="cb138" data-tangle="io_sum_safe.hs"><pre class="m haskell"><code class="m haskell"><span id="cb138-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb138-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb138-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-3" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers (separated by comma):&quot;</span></span>
<span id="cb138-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-4" aria-hidden="true"></a>  input <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb138-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-5" aria-hidden="true"></a>  <span class="kw">let</span> maybeList <span class="ot">=</span> getListFromString input</span>
<span id="cb138-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-6" aria-hidden="true"></a>  <span class="kw">case</span> maybeList <span class="kw">of</span></span>
<span id="cb138-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-7" aria-hidden="true"></a>    <span class="dt">Just</span> l  <span class="ot">-&gt;</span> <span class="fu">print</span> (<span class="fu">sum</span> l)</span>
<span id="cb138-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb138-8" aria-hidden="true"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;Bad format. Good Bye.&quot;</span></span></code></pre></div><p>In case of error, we display a nice error message.</p><p>Note that the type of each expression in the main's <code>do</code> block remains of the form <code>IO a</code>.</p><p>One very important thing to note is the type of all the functions defined so far. There is only one function which contains <code>IO</code> in its type: <code>main</code>. This means main is impure. But main uses <code>getListFromString</code> which is pure. So it's clear just by looking at declared types which functions are pure and which are impure.</p><p>Why does purity matter? Among the many advantages, here are three:</p><ul><li>It is far easier to think about pure code than impure code.</li><li>Purity protects you from all the hard-to-reproduce bugs that are due to side effects.</li><li>You can evaluate pure functions in any order or in parallel without risk.</li></ul><p>This is why you should generally put as most code as possible inside pure functions.</p><p>Our next iteration will be to prompt the user again and again until she enters a valid answer.</p><p>We keep the first part:</p><div class="m" id="cb139" data-tangle="io_sum_ask.hs"><pre class="m haskell"><code class="m haskell"><span id="cb139-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb139-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb139-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb139-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Read</span> (readMaybe)</span>
<span id="cb139-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb139-3" aria-hidden="true"></a></span>
<span id="cb139-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb139-4" aria-hidden="true"></a><span class="ot">getListFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Integer</span>]</span>
<span id="cb139-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb139-5" aria-hidden="true"></a>getListFromString str <span class="ot">=</span> readMaybe <span class="op">$</span> <span class="st">&quot;[&quot;</span> <span class="op">++</span> str <span class="op">++</span> <span class="st">&quot;]&quot;</span></span></code></pre></div><p>Now we create a function which will ask the user for an list of integers until the input is right.</p><div class="m" id="cb140" data-tangle="io_sum_ask.hs"><pre class="m haskell"><code class="m haskell"><span id="cb140-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-1" aria-hidden="true"></a><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]</span>
<span id="cb140-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-2" aria-hidden="true"></a>askUser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb140-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-3" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers (separated by comma):&quot;</span></span>
<span id="cb140-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-4" aria-hidden="true"></a>  input <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb140-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-5" aria-hidden="true"></a>  <span class="kw">let</span> maybeList <span class="ot">=</span> getListFromString input</span>
<span id="cb140-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-6" aria-hidden="true"></a>  <span class="kw">case</span> maybeList <span class="kw">of</span></span>
<span id="cb140-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-7" aria-hidden="true"></a>      <span class="dt">Just</span> l  <span class="ot">-&gt;</span> <span class="fu">return</span> l</span>
<span id="cb140-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb140-8" aria-hidden="true"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</span></code></pre></div><p>This function is of type <code>IO [Integer]</code>. Such a type means that we retrieved a value of type <code>[Integer]</code> through some IO actions. Some people might explain while waving their hands:</p><blockquote><p>Â«This is an <code>[Integer]</code> inside an <code>IO</code>.Â»</p></blockquote><p>If you want to understand the details behind all of this, you'll have to read the next section. But really, if you just want to <em>use</em> IO just practice a little and remember to think about the type.</p><p>Finally our main function is much simpler:</p><div class="m" id="cb141" data-tangle="io_sum_ask.hs"><pre class="m haskell"><code class="m haskell"><span id="cb141-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb141-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb141-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb141-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb141-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb141-3" aria-hidden="true"></a>  list <span class="ot">&lt;-</span> askUser</span>
<span id="cb141-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb141-4" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">sum</span> list</span></code></pre></div><p>We have finished with our introduction to <code>IO</code>. This was quite fast. Here are the main things to remember:</p><ul><li>in the <code>do</code> block, each expression must have the type <code>IO a</code>. You are then limited with regard to the range of expressions available. For example, <code>getLine</code>, <code>print</code>, <code>putStrLn</code>, etcâ¦</li><li>Try to externalize the pure functions as much as possible.</li><li>the <code>IO a</code> type means: an IO <em>action</em> which returns an element of type <code>a</code>. <code>IO</code> represents actions; under the hood, <code>IO a</code> is the type of a function. Read the next section if you are curious.</li></ul><p>If you practice a bit, you should be able to <em>use</em> <code>IO</code>.</p><blockquote><p><em>Exercises</em>:</p><ul><li>Make a program that sums all of its arguments. Hint: use the function <code>getArgs</code>.</li></ul></blockquote><h2 id="io-trick-explained">IO trick explained</h2><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/magritte_pipe.jpg" alt="Magritte, ceci n'est pas une pipe"></img><figcaption aria-hidden="true">Magritte, ceci n'est pas une pipe</figcaption></figure><blockquote><p><abbr title="too long; didn't read">tl;dr:</abbr></p><p>To separate pure and impure parts, <code>main</code> is defined as a function which modifies the state of the world.</p><pre class="example"><code>main :: World -&gt; World
</code></pre><p>A function is guaranteed to have side effects only if it has this type. But look at a typical main function:</p><div class="m" id="cb143"><pre class="m haskell"><code class="m haskell"><span id="cb143-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb143-1" aria-hidden="true"></a>main w0 <span class="ot">=</span></span>
<span id="cb143-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb143-2" aria-hidden="true"></a>    <span class="kw">let</span> (v1,w1) <span class="ot">=</span> action1 w0 <span class="kw">in</span></span>
<span id="cb143-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb143-3" aria-hidden="true"></a>    <span class="kw">let</span> (v2,w2) <span class="ot">=</span> action2 v1 w1 <span class="kw">in</span></span>
<span id="cb143-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb143-4" aria-hidden="true"></a>    <span class="kw">let</span> (v3,w3) <span class="ot">=</span> action3 v2 w2 <span class="kw">in</span></span>
<span id="cb143-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb143-5" aria-hidden="true"></a>    action4 v3 w3</span></code></pre></div><p>We have a lot of temporary elements (here <code>w1</code>, <code>w2</code> and <code>w3</code>) which must be passed on to the next action.</p><p>We create a function <code>bind</code> or <code>(>>=)</code>. With <code>bind</code> we don't need temporary names anymore.</p><div class="m" id="cb144"><pre class="m haskell"><code class="m haskell"><span id="cb144-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb144-1" aria-hidden="true"></a>main <span class="ot">=</span></span>
<span id="cb144-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb144-2" aria-hidden="true"></a>  action1 <span class="op">&gt;&gt;=</span> action2 <span class="op">&gt;&gt;=</span> action3 <span class="op">&gt;&gt;=</span> action4</span></code></pre></div><p>Bonus: Haskell has syntactical sugar for us:</p><div class="m" id="cb145"><pre class="m haskell"><code class="m haskell"><span id="cb145-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb145-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb145-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb145-2" aria-hidden="true"></a>  v1 <span class="ot">&lt;-</span> action1</span>
<span id="cb145-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb145-3" aria-hidden="true"></a>  v2 <span class="ot">&lt;-</span> action2 v1</span>
<span id="cb145-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb145-4" aria-hidden="true"></a>  v3 <span class="ot">&lt;-</span> action3 v2</span>
<span id="cb145-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb145-5" aria-hidden="true"></a>  action4 v3</span></code></pre></div></blockquote><p>Why did we use this strange syntax, and what exactly is this <code>IO</code> type? It looks a bit like magic.</p><p>For now let's just forget all about the pure parts of our program, and focus on the impure parts:</p><div class="m" id="cb146"><pre class="m haskell"><code class="m haskell"><span id="cb146-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-1" aria-hidden="true"></a><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]</span>
<span id="cb146-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-2" aria-hidden="true"></a>askUser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb146-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-3" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers (separated by commas):&quot;</span></span>
<span id="cb146-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-4" aria-hidden="true"></a>  input <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb146-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-5" aria-hidden="true"></a>  <span class="kw">let</span> maybeList <span class="ot">=</span> getListFromString input</span>
<span id="cb146-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-6" aria-hidden="true"></a>  <span class="kw">case</span> maybeList <span class="kw">of</span></span>
<span id="cb146-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-7" aria-hidden="true"></a>      <span class="dt">Just</span> l  <span class="ot">-&gt;</span> <span class="fu">return</span> l</span>
<span id="cb146-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-8" aria-hidden="true"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</span>
<span id="cb146-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-9" aria-hidden="true"></a></span>
<span id="cb146-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-10" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb146-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-11" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb146-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-12" aria-hidden="true"></a>  list <span class="ot">&lt;-</span> askUser</span>
<span id="cb146-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb146-13" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">sum</span> list</span></code></pre></div><p>First remark: this looks imperative. Haskell is powerful enough to make impure code look imperative. For example, if you wish you could create a <code>while</code> in Haskell. In fact, for dealing with <code>IO</code>, an imperative style is generally more appropriate.</p><p>But you should have noticed that the notation is a bit unusual. Here is why, in detail.</p><p>In an impure language, the state of the world can be seen as a huge hidden global variable. This hidden variable is accessible by all functions of your language. For example, you can read and write a file in any function. Whether a file exists or not is a difference in the possible states that the world can take.</p><p>In Haskell the current state of the world is not hidden. Rather, it is <em>explicitly</em> said that <code>main</code> is a function that <em>potentially</em> changes the state of the world. Its type is then something like:</p><div class="m" id="cb147"><pre class="m haskell"><code class="m haskell"><span id="cb147-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb147-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> <span class="dt">World</span></span></code></pre></div><p>Not all functions may access this variable. Those which have access to this variable are impure. Functions to which the world variable isn't provided are pure<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn5" class="g" id="fnref5" role="doc-noteref"><sup>5</sup></a>.</p><p>Haskell considers the state of the world as an input variable to <code>main</code>. But the real type of main is closer to this one<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn6" class="g" id="fnref6" role="doc-noteref"><sup>6</sup></a>:</p><div class="m" id="cb149"><pre class="m haskell"><code class="m haskell"><span id="cb149-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb149-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> ((),<span class="dt">World</span>)</span></code></pre></div><p>The <code>()</code> type is the unit type. Nothing to see here.</p><p>Now let's rewrite our main function with this in mind:</p><div class="m" id="cb150"><pre class="m haskell"><code class="m haskell"><span id="cb150-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb150-1" aria-hidden="true"></a>main w0 <span class="ot">=</span></span>
<span id="cb150-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb150-2" aria-hidden="true"></a>    <span class="kw">let</span> (list,w1) <span class="ot">=</span> askUser w0 <span class="kw">in</span></span>
<span id="cb150-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb150-3" aria-hidden="true"></a>    <span class="kw">let</span> (x,w2) <span class="ot">=</span> <span class="fu">print</span> (<span class="fu">sum</span> list,w1) <span class="kw">in</span></span>
<span id="cb150-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb150-4" aria-hidden="true"></a>    x</span></code></pre></div><p>First, we note that all functions which have side effects must have the type:</p><div class="m" id="cb151"><pre class="m haskell"><code class="m haskell"><span id="cb151-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb151-1" aria-hidden="true"></a><span class="dt">World</span> <span class="ot">-&gt;</span> (a,<span class="dt">World</span>)</span></code></pre></div><p>where <code>a</code> is the type of the result. For example, a <code>getChar</code> function should have the type <code>World -> (Char,
World)</code>.</p><p>Another thing to note is the trick to fix the order of evaluation. In Haskell, in order to evaluate <code>f a b</code>, you have many choices:</p><ul><li>first eval <code>a</code> then <code>b</code> then <code>f a b</code></li><li>first eval <code>b</code> then <code>a</code> then <code>f a b</code>.</li><li>eval <code>a</code> and <code>b</code> in parallel then <code>f a b</code></li></ul><p>This is true because we're working in a pure part of the language.</p><p>Now, if you look at the main function, it is clear you must eval the first line before the second one since to evaluate the second line you have to get a parameter given by the evaluation of the first line.</p><p>This trick works like a charm. The compiler will at each step provide a pointer to a new real world id. Under the hood, <code>print</code> will evaluate as:</p><ul><li>print something on the screen</li><li>modify the id of the world</li><li>evaluate as <code>((),new world id)</code>.</li></ul><p>Now, if you look at the style of the main function, it is clearly awkward. Let's try to do the same to the <code>askUser</code> function:</p><div class="m" id="cb152"><pre class="m haskell"><code class="m haskell"><span id="cb152-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb152-1" aria-hidden="true"></a><span class="ot">askUser ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> ([<span class="dt">Integer</span>],<span class="dt">World</span>)</span></code></pre></div><p>Before:</p><div class="m" id="cb153"><pre class="m haskell"><code class="m haskell"><span id="cb153-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-1" aria-hidden="true"></a><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]</span>
<span id="cb153-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-2" aria-hidden="true"></a>askUser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb153-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-3" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers:&quot;</span></span>
<span id="cb153-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-4" aria-hidden="true"></a>  input <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb153-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-5" aria-hidden="true"></a>  <span class="kw">let</span> maybeList <span class="ot">=</span> getListFromString input <span class="kw">in</span></span>
<span id="cb153-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-6" aria-hidden="true"></a>      <span class="kw">case</span> maybeList <span class="kw">of</span></span>
<span id="cb153-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-7" aria-hidden="true"></a>          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> <span class="fu">return</span> l</span>
<span id="cb153-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb153-8" aria-hidden="true"></a>          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</span></code></pre></div><p>After:</p><div class="m" id="cb154"><pre class="m haskell"><code class="m haskell"><span id="cb154-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-1" aria-hidden="true"></a>askUser w0 <span class="ot">=</span></span>
<span id="cb154-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-2" aria-hidden="true"></a>    <span class="kw">let</span> (_,w1)     <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers:&quot;</span> <span class="kw">in</span></span>
<span id="cb154-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-3" aria-hidden="true"></a>    <span class="kw">let</span> (input,w2) <span class="ot">=</span> <span class="fu">getLine</span> w1 <span class="kw">in</span></span>
<span id="cb154-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-4" aria-hidden="true"></a>    <span class="kw">let</span> (l,w3)     <span class="ot">=</span> <span class="kw">case</span> getListFromString input <span class="kw">of</span></span>
<span id="cb154-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-5" aria-hidden="true"></a>                      <span class="dt">Just</span> l   <span class="ot">-&gt;</span> (l,w2)</span>
<span id="cb154-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-6" aria-hidden="true"></a>                      <span class="dt">Nothing</span>  <span class="ot">-&gt;</span> askUser w2</span>
<span id="cb154-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-7" aria-hidden="true"></a>    <span class="kw">in</span></span>
<span id="cb154-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb154-8" aria-hidden="true"></a>        (l,w3)</span></code></pre></div><p>This is similar, but awkward. Look at all these temporary <code>w?</code> names.</p><p>The lesson is: naive IO implementation in Pure functional languages is awkward!</p><p>Fortunately, there is a better way to handle this problem. We see a pattern. Each line is of the form:</p><div class="m" id="cb155"><pre class="m haskell"><code class="m haskell"><span id="cb155-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb155-1" aria-hidden="true"></a><span class="kw">let</span> (y,w&#39;) <span class="ot">=</span> action x w <span class="kw">in</span></span></code></pre></div><p>Even if for some lines the first <code>x</code> argument isn't needed. The output type is a couple, <code>(answer, newWorldValue)</code>. Each function <code>f</code> must have a type similar to:</p><div class="m" id="cb156"><pre class="m haskell"><code class="m haskell"><span id="cb156-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb156-1" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">World</span> <span class="ot">-&gt;</span> (a,<span class="dt">World</span>)</span></code></pre></div><p>Not only this, but we can also note that we always follow the same usage pattern:</p><div class="m" id="cb157"><pre class="m haskell"><code class="m haskell"><span id="cb157-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb157-1" aria-hidden="true"></a><span class="kw">let</span> (y,w1) <span class="ot">=</span> action1 w0 <span class="kw">in</span></span>
<span id="cb157-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb157-2" aria-hidden="true"></a><span class="kw">let</span> (z,w2) <span class="ot">=</span> action2 w1 <span class="kw">in</span></span>
<span id="cb157-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb157-3" aria-hidden="true"></a><span class="kw">let</span> (t,w3) <span class="ot">=</span> action3 w2 <span class="kw">in</span></span>
<span id="cb157-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb157-4" aria-hidden="true"></a><span class="op">...</span></span></code></pre></div><p>Each action can take from 0 to n parameters. And in particular, each action can take a parameter from the result of a line above.</p><p>For example, we could also have:</p><div class="m" id="cb158"><pre class="m haskell"><code class="m haskell"><span id="cb158-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb158-1" aria-hidden="true"></a><span class="kw">let</span> (_,w1) <span class="ot">=</span> action1 x w0   <span class="kw">in</span></span>
<span id="cb158-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb158-2" aria-hidden="true"></a><span class="kw">let</span> (z,w2) <span class="ot">=</span> action2 w1     <span class="kw">in</span></span>
<span id="cb158-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb158-3" aria-hidden="true"></a><span class="kw">let</span> (_,w3) <span class="ot">=</span> action3 z w2 <span class="kw">in</span></span>
<span id="cb158-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb158-4" aria-hidden="true"></a><span class="op">...</span></span></code></pre></div><p>With, of course: <code>actionN w :: (World) -> (a,World)</code>.</p><blockquote><p><strong>IMPORTANT</strong>: there are only two important patterns to consider:</p><div class="m" id="cb159"><pre class="m haskell"><code class="m haskell"><span id="cb159-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb159-1" aria-hidden="true"></a><span class="kw">let</span> (x,w1) <span class="ot">=</span> action1 w0 <span class="kw">in</span></span>
<span id="cb159-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb159-2" aria-hidden="true"></a><span class="kw">let</span> (y,w2) <span class="ot">=</span> action2 x w1 <span class="kw">in</span></span></code></pre></div><p>and</p><div class="m" id="cb160"><pre class="m haskell"><code class="m haskell"><span id="cb160-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb160-1" aria-hidden="true"></a><span class="kw">let</span> (_,w1) <span class="ot">=</span> action1 w0 <span class="kw">in</span></span>
<span id="cb160-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb160-2" aria-hidden="true"></a><span class="kw">let</span> (y,w2) <span class="ot">=</span> action2 w1 <span class="kw">in</span></span></code></pre></div></blockquote><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/slave-market-with-the-disappearing-bust-of-voltaire.jpg" alt="Slave Market with the disappearing bust of Voltaire"></img><figcaption aria-hidden="true">Slave Market with the disappearing bust of Voltaire</figcaption></figure><p>Now, we will do a magic trick. We will make the temporary world symbols <em>disappear</em>. We will <code>bind</code> the two lines. Let's define the <code>bind</code> function. Its type is quite intimidating at first:</p><div class="m" id="cb161"><pre class="m haskell"><code class="m haskell"><span id="cb161-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb161-1" aria-hidden="true"></a><span class="ot">bind ::</span> (<span class="dt">World</span> <span class="ot">-&gt;</span> (a,<span class="dt">World</span>))</span>
<span id="cb161-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb161-2" aria-hidden="true"></a>        <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> (<span class="dt">World</span> <span class="ot">-&gt;</span> (b,<span class="dt">World</span>)))</span>
<span id="cb161-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb161-3" aria-hidden="true"></a>        <span class="ot">-&gt;</span> (<span class="dt">World</span> <span class="ot">-&gt;</span> (b,<span class="dt">World</span>))</span></code></pre></div><p>But remember that <code>(World -> (a,World))</code> is the type for an IO action. Now let's rename it for clarity:</p><div class="m" id="cb162"><pre class="m haskell"><code class="m haskell"><span id="cb162-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb162-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">IO</span> a <span class="ot">=</span> <span class="dt">World</span> <span class="ot">-&gt;</span> (a, <span class="dt">World</span>)</span></code></pre></div><p>Some examples of functions:</p><div class="m" id="cb163"><pre class="m haskell"><code class="m haskell"><span id="cb163-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb163-1" aria-hidden="true"></a><span class="fu">getLine</span><span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb163-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb163-2" aria-hidden="true"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div><p><code>getLine</code> is an IO action which takes world as a parameter and returns a couple <code>(String, World)</code>. This can be summarized as: <code>getLine</code> is of type <code>IO String</code>, which we also see as an IO action which will return a String "embeded inside an IO".</p><p>The function <code>print</code> is also interesting. It takes one argument which can be shown. In fact it takes two arguments. The first is the value to print and the other is the state of world. It then returns a couple of type <code>((), World)</code>. This means that it changes the state of the world, but doesn't yield any more data.</p><p>This new <code>IO a</code> type helps us simplify the type of <code>bind</code>:</p><div class="m" id="cb164"><pre class="m haskell"><code class="m haskell"><span id="cb164-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb164-1" aria-hidden="true"></a><span class="ot">bind ::</span> <span class="dt">IO</span> a</span>
<span id="cb164-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb164-2" aria-hidden="true"></a>        <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> b)</span>
<span id="cb164-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb164-3" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">IO</span> b</span></code></pre></div><p>It says that <code>bind</code> takes two IO actions as parameters and returns another IO action.</p><p>Now, remember the <em>important</em> patterns. The first was:</p><div class="m" id="cb165"><pre class="m haskell"><code class="m haskell"><span id="cb165-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb165-1" aria-hidden="true"></a>pattern1 w0 <span class="ot">=</span></span>
<span id="cb165-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb165-2" aria-hidden="true"></a>  <span class="kw">let</span> (x,w1) <span class="ot">=</span> action1 w0 <span class="kw">in</span></span>
<span id="cb165-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb165-3" aria-hidden="true"></a>  <span class="kw">let</span> (y,w2) <span class="ot">=</span> action2 x w1 <span class="kw">in</span></span>
<span id="cb165-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb165-4" aria-hidden="true"></a>  (y,w2)</span></code></pre></div><p>Look at the types:</p><div class="m" id="cb166"><pre class="m haskell"><code class="m haskell"><span id="cb166-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb166-1" aria-hidden="true"></a><span class="ot">action1  ::</span> <span class="dt">IO</span> a</span>
<span id="cb166-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb166-2" aria-hidden="true"></a><span class="ot">action2  ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b</span>
<span id="cb166-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb166-3" aria-hidden="true"></a><span class="ot">pattern1 ::</span> <span class="dt">IO</span> b</span></code></pre></div><p>Doesn't it seem familiar?</p><div class="m" id="cb167"><pre class="m haskell"><code class="m haskell"><span id="cb167-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb167-1" aria-hidden="true"></a>(bind action1 action2) w0 <span class="ot">=</span></span>
<span id="cb167-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb167-2" aria-hidden="true"></a>    <span class="kw">let</span> (x, w1) <span class="ot">=</span> action1 w0</span>
<span id="cb167-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb167-3" aria-hidden="true"></a>        (y, w2) <span class="ot">=</span> action2 x w1</span>
<span id="cb167-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb167-4" aria-hidden="true"></a>    <span class="kw">in</span>  (y, w2)</span></code></pre></div><p>The idea is to hide the World argument with this function. As an example imagine if we wanted to simulate:</p><div class="m" id="cb168"><pre class="m haskell"><code class="m haskell"><span id="cb168-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb168-1" aria-hidden="true"></a><span class="kw">let</span> (line1, w1) <span class="ot">=</span> <span class="fu">getLine</span> w0 <span class="kw">in</span></span>
<span id="cb168-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb168-2" aria-hidden="true"></a><span class="kw">let</span> ((), w2) <span class="ot">=</span> <span class="fu">print</span> line1 <span class="kw">in</span></span>
<span id="cb168-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb168-3" aria-hidden="true"></a>((), w2)</span></code></pre></div><p>Now, using the <code>bind</code> function:</p><div class="m" id="cb169"><pre class="m haskell"><code class="m haskell"><span id="cb169-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb169-1" aria-hidden="true"></a>(res, w2) <span class="ot">=</span> (bind <span class="fu">getLine</span> <span class="fu">print</span>) w0</span></code></pre></div><p>As print is of type <code>Show a => a -> (World -> ((), World))</code>, we know <code>res = ()</code> (<code>unit</code> type). If you didn't see what was magic here, let's try with three lines this time.</p><div class="m" id="cb170"><pre class="m haskell"><code class="m haskell"><span id="cb170-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb170-1" aria-hidden="true"></a><span class="kw">let</span> (line1,w1) <span class="ot">=</span> <span class="fu">getLine</span> w0 <span class="kw">in</span></span>
<span id="cb170-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb170-2" aria-hidden="true"></a><span class="kw">let</span> (line2,w2) <span class="ot">=</span> <span class="fu">getLine</span> w1 <span class="kw">in</span></span>
<span id="cb170-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb170-3" aria-hidden="true"></a><span class="kw">let</span> ((),w3) <span class="ot">=</span> <span class="fu">print</span> (line1 <span class="op">++</span> line2) <span class="kw">in</span></span>
<span id="cb170-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb170-4" aria-hidden="true"></a>((),w3)</span></code></pre></div><p>Which is equivalent to:</p><div class="m" id="cb171"><pre class="m haskell"><code class="m haskell"><span id="cb171-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb171-1" aria-hidden="true"></a>(res,w3) <span class="ot">=</span> (bind <span class="fu">getLine</span> (\line1 <span class="ot">-&gt;</span></span>
<span id="cb171-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb171-2" aria-hidden="true"></a>             (bind <span class="fu">getLine</span> (\line2 <span class="ot">-&gt;</span></span>
<span id="cb171-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb171-3" aria-hidden="true"></a>               <span class="fu">print</span> (line1 <span class="op">++</span> line2))))) w0</span></code></pre></div><p>Didn't you notice something? Yes, no temporary World variables are used anywhere! This is <em>MA</em>. <em>GIC</em>.</p><p>We can use a better notation. Let's use <code>(>>=)</code> instead of <code>bind</code>. <code>(>>=)</code> is an infix function like <code>(+)</code>; reminder <code>3 + 4 â (+) 3 4</code></p><div class="m" id="cb172"><pre class="m haskell"><code class="m haskell"><span id="cb172-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb172-1" aria-hidden="true"></a>(res,w3) <span class="ot">=</span> (<span class="fu">getLine</span> <span class="op">&gt;&gt;=</span></span>
<span id="cb172-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb172-2" aria-hidden="true"></a>           (\line1 <span class="ot">-&gt;</span> <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span></span>
<span id="cb172-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb172-3" aria-hidden="true"></a>           (\line2 <span class="ot">-&gt;</span> <span class="fu">print</span> (line1 <span class="op">++</span> line2)))) w0</span></code></pre></div><p>Merry Christmas Everyone! Haskell has made syntactical sugar for us:</p><div class="m" id="cb173"><pre class="m haskell"><code class="m haskell"><span id="cb173-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb173-1" aria-hidden="true"></a><span class="kw">do</span></span>
<span id="cb173-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb173-2" aria-hidden="true"></a>  x <span class="ot">&lt;-</span> action1</span>
<span id="cb173-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb173-3" aria-hidden="true"></a>  y <span class="ot">&lt;-</span> action2</span>
<span id="cb173-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb173-4" aria-hidden="true"></a>  z <span class="ot">&lt;-</span> action3</span>
<span id="cb173-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb173-5" aria-hidden="true"></a>  <span class="op">...</span></span></code></pre></div><p>Is replaced by:</p><div class="m" id="cb174"><pre class="m haskell"><code class="m haskell"><span id="cb174-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb174-1" aria-hidden="true"></a>action1 <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span></span>
<span id="cb174-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb174-2" aria-hidden="true"></a>action2 <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span></span>
<span id="cb174-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb174-3" aria-hidden="true"></a>action3 <span class="op">&gt;&gt;=</span> (\z <span class="ot">-&gt;</span></span>
<span id="cb174-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb174-4" aria-hidden="true"></a><span class="op">...</span></span>
<span id="cb174-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb174-5" aria-hidden="true"></a>)))</span></code></pre></div><p>Note that you can use <code>x</code> in <code>action2</code> and <code>x</code> and <code>y</code> in <code>action3</code>.</p><p>But what about the lines not using the <code>&lt;-</code>? Easy, another function <code>blindBind</code>:</p><div class="m" id="cb175"><pre class="m haskell"><code class="m haskell"><span id="cb175-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb175-1" aria-hidden="true"></a><span class="ot">blindBind ::</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> b</span>
<span id="cb175-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb175-2" aria-hidden="true"></a>blindBind action1 action2 w0 <span class="ot">=</span></span>
<span id="cb175-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb175-3" aria-hidden="true"></a>    bind action (\_ <span class="ot">-&gt;</span> action2) w0</span></code></pre></div><p>I didn't simplify this definition for the purposes of clarity. Of course, we can use a better notation: we'll use the <code>(>>)</code> operator.</p><p>And</p><div class="m" id="cb176"><pre class="m haskell"><code class="m haskell"><span id="cb176-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb176-1" aria-hidden="true"></a><span class="kw">do</span></span>
<span id="cb176-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb176-2" aria-hidden="true"></a>    action1</span>
<span id="cb176-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb176-3" aria-hidden="true"></a>    action2</span>
<span id="cb176-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb176-4" aria-hidden="true"></a>    action3</span></code></pre></div><p>Is transformed into</p><div class="m" id="cb177"><pre class="m haskell"><code class="m haskell"><span id="cb177-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb177-1" aria-hidden="true"></a>action1 <span class="op">&gt;&gt;</span></span>
<span id="cb177-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb177-2" aria-hidden="true"></a>action2 <span class="op">&gt;&gt;</span></span>
<span id="cb177-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb177-3" aria-hidden="true"></a>action3</span></code></pre></div><p>Also, another function is quite useful.</p><div class="m" id="cb178"><pre class="m haskell"><code class="m haskell"><span id="cb178-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb178-1" aria-hidden="true"></a><span class="ot">putInIO ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb178-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb178-2" aria-hidden="true"></a>putInIO x <span class="ot">=</span> <span class="dt">IO</span> (\w <span class="ot">-&gt;</span> (x,w))</span></code></pre></div><p>This is the general way to put pure values inside the "IO context". The general name for <code>putInIO</code> is <code>pure</code> but you also see very often <code>return</code>. Historically <code>pure</code> was called <code>return</code>. This is quite a bad name when you learn Haskell. <code>return</code> is very different from what you might be used to.</p><p>To finish, let's translate our example:</p><div class="m" id="cb179"><pre class="m haskell"><code class="m haskell"><span id="cb179-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-1" aria-hidden="true"></a><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]</span>
<span id="cb179-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-2" aria-hidden="true"></a>askUser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb179-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-3" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers (separated by commas):&quot;</span></span>
<span id="cb179-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-4" aria-hidden="true"></a>  input <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb179-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-5" aria-hidden="true"></a>  <span class="kw">let</span> maybeList <span class="ot">=</span> getListFromString input <span class="kw">in</span></span>
<span id="cb179-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-6" aria-hidden="true"></a>      <span class="kw">case</span> maybeList <span class="kw">of</span></span>
<span id="cb179-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-7" aria-hidden="true"></a>          <span class="dt">Just</span> l  <span class="ot">-&gt;</span> <span class="fu">return</span> l</span>
<span id="cb179-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-8" aria-hidden="true"></a>          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</span>
<span id="cb179-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-9" aria-hidden="true"></a></span>
<span id="cb179-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-10" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb179-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-11" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb179-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-12" aria-hidden="true"></a>  list <span class="ot">&lt;-</span> askUser</span>
<span id="cb179-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb179-13" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">sum</span> list</span></code></pre></div><p>Is translated into:</p><div class="m" id="cb180" data-tangle="io_bind.hs"><pre class="m haskell"><code class="m haskell"><span id="cb180-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Maybe</span></span>
<span id="cb180-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Read</span> (readMaybe)</span>
<span id="cb180-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-3" aria-hidden="true"></a></span>
<span id="cb180-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-4" aria-hidden="true"></a><span class="ot">getListFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Integer</span>]</span>
<span id="cb180-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-5" aria-hidden="true"></a>getListFromString str <span class="ot">=</span> readMaybe <span class="op">$</span> <span class="st">&quot;[&quot;</span> <span class="op">++</span> str <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb180-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-6" aria-hidden="true"></a><span class="ot">askUser ::</span> <span class="dt">IO</span> [<span class="dt">Integer</span>]</span>
<span id="cb180-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-7" aria-hidden="true"></a>askUser <span class="ot">=</span></span>
<span id="cb180-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-8" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;Enter a list of numbers (sep. by commas):&quot;</span> <span class="op">&gt;&gt;</span></span>
<span id="cb180-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-9" aria-hidden="true"></a>    <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span> \input <span class="ot">-&gt;</span></span>
<span id="cb180-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-10" aria-hidden="true"></a>    <span class="kw">let</span> maybeList <span class="ot">=</span> getListFromString input <span class="kw">in</span></span>
<span id="cb180-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-11" aria-hidden="true"></a>      <span class="kw">case</span> maybeList <span class="kw">of</span></span>
<span id="cb180-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-12" aria-hidden="true"></a>        <span class="dt">Just</span> l <span class="ot">-&gt;</span> <span class="fu">return</span> l</span>
<span id="cb180-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-13" aria-hidden="true"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> askUser</span>
<span id="cb180-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-14" aria-hidden="true"></a></span>
<span id="cb180-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-15" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb180-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-16" aria-hidden="true"></a>main <span class="ot">=</span> askUser <span class="op">&gt;&gt;=</span></span>
<span id="cb180-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb180-17" aria-hidden="true"></a>  \list <span class="ot">-&gt;</span> <span class="fu">print</span> <span class="op">$</span> <span class="fu">sum</span> list</span></code></pre></div><p>You can compile this code to verify that it works.</p><p>Imagine what it would look like without the <code>(>>)</code> and <code>(>></code>)=.</p><h2 id="monads">Monads</h2><p>Now the secret can be revealed: <code>IO</code> is a <em>monad</em>. Being a monad means you have access to some syntactical sugar with the <code>do</code> notation. But mainly, you have access to a coding pattern which will ease the flow of your code.</p><blockquote><p><strong>Important remarks</strong>:</p><ul><li>Monad are not necessarily about effects! There are a lot of <em>pure</em> monads.</li><li>Monad are more about sequencing</li></ul></blockquote><p>In Haskell, <code>Monad</code> is a type class. To be an instance of this type class, you must provide the functions <code>(>>=)</code> and <code>return</code>. The function <code>(>>)</code> is derived from <code>(>>=)</code>. Here is how the type class <code>Monad</code> is declared (from <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Base.html#Monad">hackage GHC.Base</a>):</p><div class="m" id="cb181"><pre class="m haskell"><code class="m haskell"><span id="cb181-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> <span class="dt">Monad</span> m <span class="kw">where</span></span>
<span id="cb181-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-2" aria-hidden="true"></a>    <span class="co">-- | Sequentially compose two actions, passing any value produced</span></span>
<span id="cb181-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-3" aria-hidden="true"></a>    <span class="co">-- by the first as an argument to the second.</span></span>
<span id="cb181-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-4" aria-hidden="true"></a><span class="ot">    (&gt;&gt;=)       ::</span> <span class="kw">forall</span> a b<span class="op">.</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span>
<span id="cb181-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-5" aria-hidden="true"></a></span>
<span id="cb181-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-6" aria-hidden="true"></a>    <span class="co">-- | Sequentially compose two actions, discarding any value produced</span></span>
<span id="cb181-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-7" aria-hidden="true"></a>    <span class="co">-- by the first, like sequencing operators (such as the semicolon)</span></span>
<span id="cb181-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-8" aria-hidden="true"></a>    <span class="co">-- in imperative languages.</span></span>
<span id="cb181-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-9" aria-hidden="true"></a><span class="ot">    (&gt;&gt;)        ::</span> <span class="kw">forall</span> a b<span class="op">.</span> m a <span class="ot">-&gt;</span> m b <span class="ot">-&gt;</span> m b</span>
<span id="cb181-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-10" aria-hidden="true"></a>    m <span class="op">&gt;&gt;</span> k <span class="ot">=</span> m <span class="op">&gt;&gt;=</span> \_ <span class="ot">-&gt;</span> k <span class="co">-- See Note [Recursive bindings for Applicative/Monad]</span></span>
<span id="cb181-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-11" aria-hidden="true"></a>    <span class="ot">{-# INLINE (&gt;&gt;) #-}</span></span>
<span id="cb181-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-12" aria-hidden="true"></a></span>
<span id="cb181-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-13" aria-hidden="true"></a>    <span class="co">-- | Inject a value into the monadic type.</span></span>
<span id="cb181-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-14" aria-hidden="true"></a><span class="ot">    return      ::</span> a <span class="ot">-&gt;</span> m a</span>
<span id="cb181-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-15" aria-hidden="true"></a>    <span class="fu">return</span>      <span class="ot">=</span> <span class="fu">pure</span></span>
<span id="cb181-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-16" aria-hidden="true"></a></span>
<span id="cb181-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-17" aria-hidden="true"></a>    <span class="co">-- | Fail with a message.  This operation is not part of the</span></span>
<span id="cb181-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-18" aria-hidden="true"></a>    <span class="co">-- mathematical definition of a monad, but is invoked on pattern-match</span></span>
<span id="cb181-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-19" aria-hidden="true"></a>    <span class="co">-- failure in a @do@ expression.</span></span>
<span id="cb181-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-20" aria-hidden="true"></a>    <span class="co">--</span></span>
<span id="cb181-21"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-21" aria-hidden="true"></a>    <span class="co">-- As part of the MonadFail proposal (MFP), this function is moved</span></span>
<span id="cb181-22"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-22" aria-hidden="true"></a>    <span class="co">-- to its own class &#39;MonadFail&#39; (see &quot;Control.Monad.Fail&quot; for more</span></span>
<span id="cb181-23"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-23" aria-hidden="true"></a>    <span class="co">-- details). The definition here will be removed in a future</span></span>
<span id="cb181-24"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-24" aria-hidden="true"></a>    <span class="co">-- release.</span></span>
<span id="cb181-25"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-25" aria-hidden="true"></a><span class="ot">    fail        ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m a</span>
<span id="cb181-26"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb181-26" aria-hidden="true"></a>    <span class="fu">fail</span> s      <span class="ot">=</span> errorWithoutStackTrace s</span></code></pre></div><blockquote><p>Remarks:</p><ul><li><p>the keyword <code>class</code> is not your friend. A Haskell class is <em>not</em> a class of the kind you will find in object-oriented programming. A Haskell class has a lot of similarities with Java interfaces. A better word would have been <code>typeclass</code>, since that means a set of types. For a type to belong to a class, all functions of the class must be provided for this type.</p></li><li><p>In this particular example of type class, the type <code>m</code> must be a type that takes an argument. For example <code>IO a</code>, but also <code>Maybe a</code>, <code>[a]</code>, etcâ¦</p></li><li><p>To be a useful monad, your function must obey some rules. If your construction does not obey these rules strange things might happens:</p><div class="m" id="cb182"><pre class="m haskell"><code class="m haskell"><span id="cb182-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb182-1" aria-hidden="true"></a><span class="fu">return</span> a <span class="op">&gt;&gt;=</span> k  <span class="op">==</span>  k a</span>
<span id="cb182-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb182-2" aria-hidden="true"></a>m <span class="op">&gt;&gt;=</span> <span class="fu">return</span>  <span class="op">==</span>  m</span>
<span id="cb182-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb182-3" aria-hidden="true"></a>m <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> k x <span class="op">&gt;&gt;=</span> h)  <span class="op">==</span>  (m <span class="op">&gt;&gt;=</span> k) <span class="op">&gt;&gt;=</span> h</span></code></pre></div></li><li><p>Furthermore the <code>Monad</code> and <code>Applicative</code> operations should relate as follow:</p><div class="m" id="cb183"><pre class="m haskell"><code class="m haskell"><span id="cb183-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb183-1" aria-hidden="true"></a><span class="fu">pure</span> <span class="ot">=</span> <span class="fu">return</span></span>
<span id="cb183-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb183-2" aria-hidden="true"></a>(<span class="op">&lt;*&gt;</span>) <span class="ot">=</span> ap</span></code></pre></div><p>The above laws imply:</p><div class="m" id="cb184"><pre class="m haskell"><code class="m haskell"><span id="cb184-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb184-1" aria-hidden="true"></a><span class="fu">fmap</span> f xs <span class="ot">=</span> xs <span class="op">&gt;&gt;=</span> <span class="fu">return</span> <span class="op">.</span> f</span>
<span id="cb184-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb184-2" aria-hidden="true"></a>(<span class="op">&gt;&gt;</span>) <span class="ot">=</span> (<span class="op">*&gt;</span>)</span></code></pre></div></li></ul></blockquote><h3 id="monad-intuition">Monad Intuition</h3><p>I explained how to use the IO Monad. In the previous chapter I explained how it works behind the scene. Notice there is a huge difference between be a client of the Monad API and be an architect of the Monad API but also have an intuition about what is really a Monad.</p><p>So to try to give you an intuition, just remember a Monad is a construction that has to do with <em>composition</em> into higher order type constructors (types with a parameter). So if we consider <code>(&lt;=&lt;)</code> and <code>(>=>)</code> (Kleisli arrow composition) which are defined (simplified for the purpose of this article) as</p><div class="m" id="cb185"><pre class="m haskell"><code class="m haskell"><span id="cb185-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb185-1" aria-hidden="true"></a>f <span class="op">&gt;=&gt;</span> g <span class="ot">=</span> \x <span class="ot">-&gt;</span> f x <span class="op">&gt;&gt;=</span> g</span>
<span id="cb185-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb185-2" aria-hidden="true"></a>g <span class="op">&lt;=&lt;</span> f <span class="ot">=</span> f <span class="op">&gt;=&gt;</span> g</span></code></pre></div><p>Those operation constructed with the bind operator <code>(>>=)</code> are a generalisation of <code>(.)</code> and <code>(>>>)</code> where <code>f >>> g = g . f</code>. If you can look at the type this become visible, simply compare:</p><div class="m" id="cb186"><pre class="m haskell"><code class="m haskell"><span id="cb186-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb186-1" aria-hidden="true"></a><span class="ot">f ::</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb186-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb186-2" aria-hidden="true"></a><span class="ot">g ::</span> b <span class="ot">-&gt;</span> c</span>
<span id="cb186-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb186-3" aria-hidden="true"></a>g <span class="op">.</span><span class="ot"> f ::</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb186-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb186-4" aria-hidden="true"></a>f <span class="op">&gt;&gt;&gt;</span><span class="ot"> g ::</span> a <span class="ot">-&gt;</span> c</span></code></pre></div><p>with</p><div class="m" id="cb187"><pre class="m haskell"><code class="m haskell"><span id="cb187-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb187-1" aria-hidden="true"></a><span class="ot">f ::</span> a <span class="ot">-&gt;</span> m b</span>
<span id="cb187-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb187-2" aria-hidden="true"></a><span class="ot">g ::</span> b <span class="ot">-&gt;</span> m c</span>
<span id="cb187-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb187-3" aria-hidden="true"></a>g <span class="op">&lt;=&lt;</span><span class="ot"> f ::</span> a <span class="ot">-&gt;</span> m c</span>
<span id="cb187-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb187-4" aria-hidden="true"></a>f <span class="op">&gt;=&gt;</span><span class="ot"> g ::</span> a <span class="ot">-&gt;</span> m c</span></code></pre></div><p>As I said, this is a generalisation of the composition operation to functions that returns types within a higher order type constructor.</p><p>To give you better example, consider:</p><ul><li><p><code>m = []</code>; <code>[]</code> is a higher order type constructor as it takes a type parameter, the <em>kind</em> of this type is <code>* -> *</code>. So if values have types, types have <em>kinds</em>. You can see them in <code>ghci</code>:</p><pre class="example"><code>[hs:hsenv]&gt; ghci
GHCi, version 8.6.5: http://www.haskell.org/ghc/  :? for help
Prelude&gt; :kind Int
Int :: *
Prelude&gt; :kind []
[] :: * -&gt; *
</code></pre><p>We see that the kind of <code>Int</code> is <code>*</code> so, it is a monotype, but the kind of <code>[]</code> is <code>* -> *</code> so it takes one type parameter.</p></li><li><p><code>a</code>, <code>b</code> to be <code>Int</code> and <code>c</code> to be <code>String</code></p></li><li><p><code>f n = [n, n+1]</code></p></li><li><p><code>g n = [show n,">"++show (n+1)]</code></p></li></ul><p>So</p><div class="m" id="cb189"><pre class="m haskell"><code class="m haskell"><span id="cb189-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb189-1" aria-hidden="true"></a>f <span class="dv">2</span> <span class="ot">=</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb189-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb189-2" aria-hidden="true"></a>g <span class="dv">2</span> <span class="ot">=</span> [<span class="st">&quot;2&quot;</span>,<span class="st">&quot;&gt;3&quot;</span>]</span>
<span id="cb189-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb189-3" aria-hidden="true"></a>g <span class="dv">3</span> <span class="ot">=</span> [<span class="st">&quot;3&quot;</span>,<span class="st">&quot;&gt;4&quot;</span>]</span></code></pre></div><p>One would expect to <em>combine</em> <code>f</code> and <code>g</code> such that <code>(combine f g) 0 â ["2",">3","3",">4"]</code>. Unfortunately <code>(.)</code> will not work directly and this would be cumbersome to write. But thanks to the Monad abstraction we can write:</p><div class="m" id="cb190"><pre class="m haskell"><code class="m haskell"><span id="cb190-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb190-1" aria-hidden="true"></a>(f <span class="op">&gt;=&gt;</span> g) <span class="dv">2</span> <span class="ot">â</span> [<span class="st">&quot;2&quot;</span>,<span class="st">&quot;&gt;3&quot;</span>,<span class="st">&quot;3&quot;</span>,<span class="st">&quot;&gt;4&quot;</span>]</span></code></pre></div><div class="m" id="cb191" data-tangle="monad_composition.hs"><pre class="m haskell"><code class="m haskell"><span id="cb191-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> ((&gt;=&gt;))</span>
<span id="cb191-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-2" aria-hidden="true"></a></span>
<span id="cb191-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-3" aria-hidden="true"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb191-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-4" aria-hidden="true"></a>f n <span class="ot">=</span> [n, n<span class="op">+</span><span class="dv">1</span>]</span>
<span id="cb191-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-5" aria-hidden="true"></a></span>
<span id="cb191-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-6" aria-hidden="true"></a><span class="ot">g ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb191-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-7" aria-hidden="true"></a>g n <span class="ot">=</span> [<span class="fu">show</span> n,<span class="st">&quot;&gt;&quot;</span><span class="op">++</span><span class="fu">show</span> (n<span class="op">+</span><span class="dv">1</span>)]</span>
<span id="cb191-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-8" aria-hidden="true"></a></span>
<span id="cb191-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb191-9" aria-hidden="true"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> (f <span class="op">&gt;=&gt;</span> g) <span class="dv">2</span></span></code></pre></div><p>The next chapters are simply about providing some examples of useful Monads.</p><h3 id="maybe-is-a-monad">Maybe is a monad</h3><p>There are a lot of different types that are instances of <code>Monad</code>. One of the easiest to describe is <code>Maybe</code>. If you have a sequence of <code>Maybe</code> values, you can use monads to manipulate them. It is particularly useful to remove very deep <code>if..then..else..</code> constructions.</p><p>Imagine a complex bank operation. You are eligible to gain about 700â¬ only if you can afford to follow a list of operations without your balance dipping below zero.</p><div class="m" id="cb192" data-tangle="maybe_monad_1.hs"><pre class="m haskell"><code class="m haskell"><span id="cb192-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-1" aria-hidden="true"></a>deposit  value account <span class="ot">=</span> account <span class="op">+</span> value</span>
<span id="cb192-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-2" aria-hidden="true"></a>withdraw value account <span class="ot">=</span> account <span class="op">-</span> value</span>
<span id="cb192-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-3" aria-hidden="true"></a></span>
<span id="cb192-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-4" aria-hidden="true"></a><span class="ot">eligible ::</span> (<span class="dt">Num</span> a,<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb192-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-5" aria-hidden="true"></a>eligible account <span class="ot">=</span></span>
<span id="cb192-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-6" aria-hidden="true"></a>  <span class="kw">let</span> account1 <span class="ot">=</span> deposit <span class="dv">100</span> account <span class="kw">in</span></span>
<span id="cb192-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-7" aria-hidden="true"></a>    <span class="kw">if</span> (account1 <span class="op">&lt;</span> <span class="dv">0</span>)</span>
<span id="cb192-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-8" aria-hidden="true"></a>    <span class="kw">then</span> <span class="dt">False</span></span>
<span id="cb192-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-9" aria-hidden="true"></a>    <span class="kw">else</span></span>
<span id="cb192-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-10" aria-hidden="true"></a>      <span class="kw">let</span> account2 <span class="ot">=</span> withdraw <span class="dv">200</span> account1 <span class="kw">in</span></span>
<span id="cb192-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-11" aria-hidden="true"></a>      <span class="kw">if</span> (account2 <span class="op">&lt;</span> <span class="dv">0</span>)</span>
<span id="cb192-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-12" aria-hidden="true"></a>      <span class="kw">then</span> <span class="dt">False</span></span>
<span id="cb192-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-13" aria-hidden="true"></a>      <span class="kw">else</span></span>
<span id="cb192-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-14" aria-hidden="true"></a>        <span class="kw">let</span> account3 <span class="ot">=</span> deposit <span class="dv">100</span> account2 <span class="kw">in</span></span>
<span id="cb192-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-15" aria-hidden="true"></a>        <span class="kw">if</span> (account3 <span class="op">&lt;</span> <span class="dv">0</span>)</span>
<span id="cb192-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-16" aria-hidden="true"></a>        <span class="kw">then</span> <span class="dt">False</span></span>
<span id="cb192-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-17" aria-hidden="true"></a>        <span class="kw">else</span></span>
<span id="cb192-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-18" aria-hidden="true"></a>          <span class="kw">let</span> account4 <span class="ot">=</span> withdraw <span class="dv">300</span> account3 <span class="kw">in</span></span>
<span id="cb192-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-19" aria-hidden="true"></a>          <span class="kw">if</span> (account4 <span class="op">&lt;</span> <span class="dv">0</span>)</span>
<span id="cb192-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-20" aria-hidden="true"></a>          <span class="kw">then</span> <span class="dt">False</span></span>
<span id="cb192-21"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-21" aria-hidden="true"></a>          <span class="kw">else</span></span>
<span id="cb192-22"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-22" aria-hidden="true"></a>            <span class="kw">let</span> account5 <span class="ot">=</span> deposit <span class="dv">1000</span> account4 <span class="kw">in</span></span>
<span id="cb192-23"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-23" aria-hidden="true"></a>            <span class="kw">if</span> (account5 <span class="op">&lt;</span> <span class="dv">0</span>)</span>
<span id="cb192-24"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-24" aria-hidden="true"></a>            <span class="kw">then</span> <span class="dt">False</span></span>
<span id="cb192-25"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-25" aria-hidden="true"></a>            <span class="kw">else</span></span>
<span id="cb192-26"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-26" aria-hidden="true"></a>              <span class="dt">True</span></span>
<span id="cb192-27"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-27" aria-hidden="true"></a></span>
<span id="cb192-28"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-28" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb192-29"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-29" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eligible <span class="dv">300</span> <span class="co">-- True</span></span>
<span id="cb192-30"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb192-30" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eligible <span class="dv">299</span> <span class="co">-- False</span></span></code></pre></div><p>Now, let's make it better using Maybe and the fact that it is a Monad.</p><div class="m" id="cb193" data-tangle="maybe_monad_2.hs"><pre class="m haskell"><code class="m haskell"><span id="cb193-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-1" aria-hidden="true"></a><span class="ot">deposit ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb193-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-2" aria-hidden="true"></a>deposit value account <span class="ot">=</span> <span class="dt">Just</span> (account <span class="op">+</span> value)</span>
<span id="cb193-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-3" aria-hidden="true"></a></span>
<span id="cb193-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-4" aria-hidden="true"></a><span class="ot">withdraw ::</span> (<span class="dt">Num</span> a,<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb193-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-5" aria-hidden="true"></a>withdraw value account <span class="ot">=</span> <span class="kw">if</span> (account <span class="op">&lt;</span> value)</span>
<span id="cb193-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-6" aria-hidden="true"></a>                         <span class="kw">then</span> <span class="dt">Nothing</span></span>
<span id="cb193-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-7" aria-hidden="true"></a>                         <span class="kw">else</span> <span class="dt">Just</span> (account <span class="op">-</span> value)</span>
<span id="cb193-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-8" aria-hidden="true"></a></span>
<span id="cb193-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-9" aria-hidden="true"></a><span class="ot">eligible ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Bool</span></span>
<span id="cb193-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-10" aria-hidden="true"></a>eligible account <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb193-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-11" aria-hidden="true"></a>  account1 <span class="ot">&lt;-</span> deposit <span class="dv">100</span> account</span>
<span id="cb193-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-12" aria-hidden="true"></a>  account2 <span class="ot">&lt;-</span> withdraw <span class="dv">200</span> account1</span>
<span id="cb193-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-13" aria-hidden="true"></a>  account3 <span class="ot">&lt;-</span> deposit <span class="dv">100</span> account2</span>
<span id="cb193-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-14" aria-hidden="true"></a>  account4 <span class="ot">&lt;-</span> withdraw <span class="dv">300</span> account3</span>
<span id="cb193-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-15" aria-hidden="true"></a>  account5 <span class="ot">&lt;-</span> deposit <span class="dv">1000</span> account4</span>
<span id="cb193-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-16" aria-hidden="true"></a>  <span class="dt">Just</span> <span class="dt">True</span></span>
<span id="cb193-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-17" aria-hidden="true"></a></span>
<span id="cb193-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-18" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb193-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-19" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eligible <span class="dv">300</span> <span class="co">-- Just True</span></span>
<span id="cb193-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb193-20" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eligible <span class="dv">299</span> <span class="co">-- Nothing</span></span></code></pre></div><p>Not bad, but we can make it even better:</p><div class="m" id="cb194" data-tangle="maybe_monad_3.hs"><pre class="m haskell"><code class="m haskell"><span id="cb194-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-1" aria-hidden="true"></a><span class="ot">deposit ::</span> (<span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb194-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-2" aria-hidden="true"></a>deposit value account <span class="ot">=</span> <span class="dt">Just</span> (account <span class="op">+</span> value)</span>
<span id="cb194-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-3" aria-hidden="true"></a></span>
<span id="cb194-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-4" aria-hidden="true"></a><span class="ot">withdraw ::</span> (<span class="dt">Num</span> a,<span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb194-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-5" aria-hidden="true"></a>withdraw value account <span class="ot">=</span> <span class="kw">if</span> (account <span class="op">&lt;</span> value) </span>
<span id="cb194-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-6" aria-hidden="true"></a>                         <span class="kw">then</span> <span class="dt">Nothing</span> </span>
<span id="cb194-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-7" aria-hidden="true"></a>                         <span class="kw">else</span> <span class="dt">Just</span> (account <span class="op">-</span> value)</span>
<span id="cb194-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-8" aria-hidden="true"></a></span>
<span id="cb194-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-9" aria-hidden="true"></a><span class="ot">eligible ::</span> (<span class="dt">Num</span> a, <span class="dt">Ord</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Bool</span></span>
<span id="cb194-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-10" aria-hidden="true"></a>eligible account <span class="ot">=</span></span>
<span id="cb194-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-11" aria-hidden="true"></a>  deposit <span class="dv">100</span> account <span class="op">&gt;&gt;=</span></span>
<span id="cb194-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-12" aria-hidden="true"></a>  withdraw <span class="dv">200</span> <span class="op">&gt;&gt;=</span></span>
<span id="cb194-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-13" aria-hidden="true"></a>  deposit <span class="dv">100</span>  <span class="op">&gt;&gt;=</span></span>
<span id="cb194-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-14" aria-hidden="true"></a>  withdraw <span class="dv">300</span> <span class="op">&gt;&gt;=</span></span>
<span id="cb194-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-15" aria-hidden="true"></a>  deposit <span class="dv">1000</span> <span class="op">&gt;&gt;</span></span>
<span id="cb194-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-16" aria-hidden="true"></a>  <span class="fu">return</span> <span class="dt">True</span></span>
<span id="cb194-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-17" aria-hidden="true"></a></span>
<span id="cb194-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-18" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb194-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-19" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eligible <span class="dv">300</span> <span class="co">-- Just True</span></span>
<span id="cb194-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb194-20" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eligible <span class="dv">299</span> <span class="co">-- Nothing</span></span></code></pre></div><p>We have proven that Monads are a good way to make our code more elegant. Note this idea of code organization, in particular for <code>Maybe</code> can be used in most imperative languages. In fact, this is the kind of construction we make naturally.</p><blockquote><p>An important remark:</p><p>The first element in the sequence being evaluated to <code>Nothing</code> will stop the complete evaluation. This means you don't execute all lines. You get this for free, thanks to laziness.</p></blockquote><p>You could also replay these example with the definition of <code>(>>=)</code> for <code>Maybe</code> in mind:</p><div class="m" id="cb195"><pre class="m haskell"><code class="m haskell"><span id="cb195-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb195-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">Maybe</span> <span class="kw">where</span></span>
<span id="cb195-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb195-2" aria-hidden="true"></a><span class="ot">    (&gt;&gt;=) ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb195-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb195-3" aria-hidden="true"></a>    <span class="dt">Nothing</span>  <span class="op">&gt;&gt;=</span> _  <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb195-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb195-4" aria-hidden="true"></a>    (<span class="dt">Just</span> x) <span class="op">&gt;&gt;=</span> f  <span class="ot">=</span> f x</span>
<span id="cb195-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb195-5" aria-hidden="true"></a></span>
<span id="cb195-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb195-6" aria-hidden="true"></a>    <span class="fu">return</span> x <span class="ot">=</span> <span class="dt">Just</span> x</span></code></pre></div><p>The <code>Maybe</code> monad proved to be useful while being a very simple example. We saw the utility of the <code>IO</code> monad. But now for a cooler example, lists.</p><h3 id="the-list-monad">The list monad</h3><figure><img src="https://her.esy.fun/posts/0010-Haskell-Now/golconde.jpg" alt="Golconde de Magritte"></img><figcaption aria-hidden="true">Golconde de Magritte</figcaption></figure><p>The list monad helps us to simulate non-deterministic computations. Here we go:</p><div class="m" id="cb196" data-tangle="list_monad.hs"><pre class="m haskell"><code class="m haskell"><span id="cb196-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> (guard)</span>
<span id="cb196-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-2" aria-hidden="true"></a></span>
<span id="cb196-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-3" aria-hidden="true"></a>allCases <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb196-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-4" aria-hidden="true"></a></span>
<span id="cb196-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-5" aria-hidden="true"></a><span class="ot">resolve ::</span> [(<span class="dt">Int</span>,<span class="dt">Int</span>,<span class="dt">Int</span>)]</span>
<span id="cb196-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-6" aria-hidden="true"></a>resolve <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb196-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-7" aria-hidden="true"></a>              x <span class="ot">&lt;-</span> allCases</span>
<span id="cb196-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-8" aria-hidden="true"></a>              y <span class="ot">&lt;-</span> allCases</span>
<span id="cb196-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-9" aria-hidden="true"></a>              z <span class="ot">&lt;-</span> allCases</span>
<span id="cb196-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-10" aria-hidden="true"></a>              guard <span class="op">$</span> <span class="dv">4</span><span class="op">*</span>x <span class="op">+</span> <span class="dv">2</span><span class="op">*</span>y <span class="op">&lt;</span> z</span>
<span id="cb196-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-11" aria-hidden="true"></a>              <span class="fu">return</span> (x,y,z)</span>
<span id="cb196-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-12" aria-hidden="true"></a></span>
<span id="cb196-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-13" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb196-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb196-14" aria-hidden="true"></a>  <span class="fu">print</span> resolve</span></code></pre></div><p>MA. GIC. :</p><pre class="example"><code>[(1,1,7),(1,1,8),(1,1,9),(1,1,10),(1,2,9),(1,2,10)]
</code></pre><p>For the list monad, there is also this syntactic sugar (Ã  la Python):</p><div class="m" id="cb198"><pre class="m haskell"><code class="m haskell"><span id="cb198-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb198-1" aria-hidden="true"></a><span class="fu">print</span> <span class="op">$</span> [ (x,y,z) <span class="op">|</span>Â x <span class="ot">&lt;-</span> allCases,</span>
<span id="cb198-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb198-2" aria-hidden="true"></a>                    y <span class="ot">&lt;-</span> allCases,</span>
<span id="cb198-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb198-3" aria-hidden="true"></a>                    z <span class="ot">&lt;-</span> allCases,</span>
<span id="cb198-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb198-4" aria-hidden="true"></a>                    <span class="dv">4</span><span class="op">*</span>x <span class="op">+</span> <span class="dv">2</span><span class="op">*</span>y <span class="op">&lt;</span> z ]</span></code></pre></div><p>I won't list all the monads, since there are many of them. Using monads simplifies the manipulation of several notions in pure languages. In particular, monads are very useful for:</p><ul><li>IO,</li><li>non-deterministic computation,</li><li>generating pseudo random numbers,</li><li>keeping configuration state,</li><li>writing state,</li><li>â¦</li></ul><p>If you have followed me until here, then you've done it! You know monads<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn7" class="g" id="fnref7" role="doc-noteref"><sup>7</sup></a>!</p><h1 id="start-swimming">Start swimming</h1><p>If you come this far, you can really congratulate yourself. This is already what I would personnaly call a tremendous achievement.</p><p>This chapter will focus on how to build applications with Haskell. How to use libraries inside your project.</p><p>Note application development is easier to introduce than library development. Mostly because dependency management will be a lot easier.</p><p>I first intended to provide a lot more informations about how to create a project and provide a few project examples. But it occurs this is harder than I first expected. So I will just provide the introduction about how to create a starting point with many pointers for other possible options.</p><h2 id="start-a-new-project">Start a new project</h2><p>There are multiple starting options to create a new project. The most common one is certainly to use <code>cabal-install</code>. Another popular option is to use <code>stack</code>. <code>stack</code> adds a layer on top of <code>cabal-install</code> and uses fixed set of libraries known to compile together. Another method is to <code>nix</code> to handle the dependencies and use <code>cabal-install</code> for the rest. That final choice is often considered as the most complex and difficult for beginners. Still this is the one I find the most elegant. This is the method I will use in this article.</p><p>Still, you shall not be intimidated. Look:</p><ul><li>To create a new project the steps will be:<ol><li>run <code>nix-shell</code> (to have <code>cabal</code> executable in your PATH)</li><li>run <code>cabal install -i</code> and answer a few questions</li><li>copy a few <code>.nix</code> files in your project directory</li><li>run another <code>nix-shell</code> in your new directory this time to enter in the local dev env of your new project.</li></ol></li><li>To add a new library:<ol><li>Just add it in the <code>.cabal</code> file, and enter again in your <code>nix-shell</code>.</li></ol></li></ul><p>I will just walk you through all the steps in detail. And mostly I will tell you not to take care about most warning messages. For our end-goal, those are mostly noise. I am aware of the level of complexity that it looks like at first. But really most of the apparent complexity is due to poor naming convention and not to any fundenmental core difficulty.</p><h3 id="bootstrap-a-project-template-files">Bootstrap a project template files</h3><ol><li>put the <a href="https://her.esy.fun/posts/0010-Haskell-Now/shell.nix">shell.nix</a> file in some directory</li><li>start <code>nix-shell --pure</code></li><li>in the nix shell create a new directory and then</li><li><code>cabal init -i</code></li><li>You should use the default value for most questions except:<ol><li>Should I generate a simple project with sensible defaults? [default: y] n</li><li>the package should build "Library AND Executable" (choice 3)</li><li>Cabal specification 2.4 (choice 4)</li><li>Application directory choose <code>app</code> (choice 3)</li><li>Library directory choose <code>lib</code> (choice 3)</li><li>Add informative comments, choose yes.</li></ol></li></ol><p>Here is a full interaction:</p><pre><code>~/dev/hsenv&gt; nix-shell

[hs:hsenv]&gt; mkdir my-app

[hs:hsenv]&gt; cd my-app/

[hs:my-app]&gt; cabal init -i
Warning: The package list for &#39;hackage.haskell.org&#39; does not exist. Run &#39;cabal
update&#39; to download it.
Should I generate a simple project with sensible defaults? [default: y] n
What does the package build:
   1) Executable
   2) Library
   3) Library and Executable
Your choice? 3
What is the main module of the executable:
 * 1) Main.hs (does not yet exist, but will be created)
   2) Main.lhs (does not yet exist, but will be created)
   3) Other (specify)
Your choice? [default: Main.hs (does not yet exist, but will be created)]
Please choose version of the Cabal specification to use:
 * 1) 1.10   (legacy)
   2) 2.0    (+ support for Backpack, internal sub-libs, &#39;^&gt;=&#39; operator)
   3) 2.2    (+ support for &#39;common&#39;, &#39;elif&#39;, redundant commas, SPDX)
   4) 2.4    (+ support for &#39;**&#39; globbing)
Your choice? [default: 1.10   (legacy)] 4
Package name? [default: my-app]
Package version? [default: 0.1.0.0]
Please choose a license:
   1) GPL-2.0-only
   2) GPL-3.0-only
   3) LGPL-2.1-only
   4) LGPL-3.0-only
   5) AGPL-3.0-only
   6) BSD-2-Clause
 * 7) BSD-3-Clause
   8) MIT
   9) ISC
  10) MPL-2.0
  11) Apache-2.0
  12) LicenseRef-PublicDomain
  13) NONE
  14) Other (specify)
Your choice? [default: BSD-3-Clause]
Author name? [default: Yann Esposito (Yogsototh)]
Maintainer email? [default: yann.esposito@gmail.com]
Project homepage URL?
Project synopsis?
Project category:
 * 1) (none)
   2) Codec
   3) Concurrency
   4) Control
   5) Data
   6) Database
   7) Development
   8) Distribution
   9) Game
  10) Graphics
  11) Language
  12) Math
  13) Network
  14) Sound
  15) System
  16) Testing
  17) Text
  18) Web
  19) Other (specify)
Your choice? [default: (none)]
Application (Main.hs) directory:
 * 1) (none)
   2) src-exe
   3) app
   4) Other (specify)
Your choice? [default: (none)] 3
Library source directory:
 * 1) (none)
   2) src
   3) lib
   4) src-lib
   5) Other (specify)
Your choice? [default: (none)] 2
Should I generate a test suite for the library? [default: y]
Test directory:
 * 1) test
   2) Other (specify)
Your choice? [default: test]
What base language is the package written in:
 * 1) Haskell2010
   2) Haskell98
   3) Other (specify)
Your choice? [default: Haskell2010]
Add informative comments to each field in the cabal file (y/n)? [default: n] y

Guessing dependencies...

Generating LICENSE...
Generating Setup.hs...
Generating CHANGELOG.md...
Generating src/MyLib.hs...
Generating app/Main.hs...
Generating test/MyLibTest.hs...
Generating my-app.cabal...

Warning: no synopsis given. You should edit the .cabal file and add one.
You may want to edit the .cabal file and add a Description field.

[hs:my-app]&gt;
</code></pre><div class="bf"><p>Please ignore the following warning:</p><pre class="example"><code>Warning: The package list for &#39;hackage.haskell.org&#39; does not exist. Run &#39;cabal
update&#39; to download it.
</code></pre><p>Nix should take care of handling Haskell libraries not <code>cabal-install</code>. No need to run <code>cabal update</code>.</p></div><p>After this step you should end up with the following set of files:</p><pre class="example"><code>[hs:my-app]&gt; tree
.
âââ CHANGELOG.md
âââ LICENSE
âââ Setup.hs
âââ app
âÂ Â  âââ Main.hs
âââ src
âÂ Â  âââ MyLib.hs
âââ my-app.cabal
âââ test
    âââ MyLibTest.hs

3 directories, 7 files
</code></pre><h3 id="create-a-few-nix-files">Create a few nix files</h3><div class="bf"><p>The goal of this tutorial is not to make you learn <code>nix</code> because it is a bit complex, but to explain you a bit, <code>nix</code> use a a <em>configuration language</em> and not just a <em>configuration format</em>. So to configure your <code>nix</code> environment you endup writing a <em>nix expression</em> in this <em>nix language</em>. And thus you can call the content of one nix-file in another one for example, or use variables.</p></div><p>The first file to create is the one that will pin the versions of all your packages and libraries:</p><div class="m" id="cb202" data-tangle="my-app/nixpkgs.nix" data-mkdirp="t"><pre class="m nix"><code class="m bash"><span id="cb202-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb202-1" aria-hidden="true"></a><span class="ex">import</span> (fetchTarball https://github.com/NixOS/nixpkgs/archive/19.09.tar.gz) {}</span></code></pre></div><p>The second file is the <code>default.nix</code> file:</p><div class="m" id="cb203" data-tangle="my-app/default.nix" data-mkdirp="t"><pre class="m nix"><code class="m bash"><span id="cb203-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-1" aria-hidden="true"></a><span class="kw">{</span> <span class="ex">nixpkgs</span> ? import ./nixpkgs.nix</span>
<span id="cb203-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-2" aria-hidden="true"></a>, <span class="ex">compiler</span> ? <span class="st">&quot;default&quot;</span></span>
<span id="cb203-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-3" aria-hidden="true"></a>, <span class="ex">doBenchmark</span> ? false <span class="kw">}</span>:</span>
<span id="cb203-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-4" aria-hidden="true"></a><span class="bu">let</span></span>
<span id="cb203-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-5" aria-hidden="true"></a>  <span class="ex">inherit</span> (nixpkgs) <span class="ex">pkgs</span><span class="kw">;</span></span>
<span id="cb203-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-6" aria-hidden="true"></a>  <span class="ex">name</span> = <span class="st">&quot;my-app&quot;</span><span class="kw">;</span></span>
<span id="cb203-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-7" aria-hidden="true"></a>  <span class="ex">haskellPackages</span> = pkgs.haskellPackages<span class="kw">;</span></span>
<span id="cb203-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-8" aria-hidden="true"></a>  <span class="ex">variant</span> = if doBenchmark</span>
<span id="cb203-9"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-9" aria-hidden="true"></a>            <span class="kw">then</span> <span class="ex">pkgs.haskell.lib.doBenchmark</span></span>
<span id="cb203-10"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-10" aria-hidden="true"></a>            <span class="kw">else</span> <span class="ex">pkgs.lib.id</span><span class="kw">;</span></span>
<span id="cb203-11"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-11" aria-hidden="true"></a>  <span class="ex">drv</span> = haskellPackages.callCabal2nix name ./. {};</span>
<span id="cb203-12"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-12" aria-hidden="true"></a><span class="kw">in</span></span>
<span id="cb203-13"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-13" aria-hidden="true"></a><span class="kw">{</span></span>
<span id="cb203-14"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-14" aria-hidden="true"></a>  <span class="ex">my_project</span> = drv<span class="kw">;</span></span>
<span id="cb203-15"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-15" aria-hidden="true"></a>  <span class="ex">shell</span> = haskellPackages.shellFor {</span>
<span id="cb203-16"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-16" aria-hidden="true"></a>    <span class="co"># generate hoogle doc</span></span>
<span id="cb203-17"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-17" aria-hidden="true"></a>    <span class="ex">withHoogle</span> = true<span class="kw">;</span></span>
<span id="cb203-18"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-18" aria-hidden="true"></a>    <span class="ex">packages</span> = p: [drv]<span class="kw">;</span></span>
<span id="cb203-19"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-19" aria-hidden="true"></a>    <span class="co"># packages dependencies (by default haskellPackages)</span></span>
<span id="cb203-20"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-20" aria-hidden="true"></a>    <span class="ex">buildInputs</span> = with haskellPackages<span class="kw">;</span></span>
<span id="cb203-21"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-21" aria-hidden="true"></a>      [ <span class="ex">hlint</span></span>
<span id="cb203-22"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-22" aria-hidden="true"></a>        <span class="ex">ghcid</span></span>
<span id="cb203-23"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-23" aria-hidden="true"></a>        <span class="ex">cabal-install</span></span>
<span id="cb203-24"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-24" aria-hidden="true"></a>        <span class="ex">cabal2nix</span></span>
<span id="cb203-25"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-25" aria-hidden="true"></a>        <span class="ex">hindent</span></span>
<span id="cb203-26"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-26" aria-hidden="true"></a>        <span class="co"># # if you want to add some system lib like ncurses</span></span>
<span id="cb203-27"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-27" aria-hidden="true"></a>        <span class="co"># # you could by writing it like:</span></span>
<span id="cb203-28"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-28" aria-hidden="true"></a>        <span class="co"># pkgs.ncurses</span></span>
<span id="cb203-29"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-29" aria-hidden="true"></a>      ];</span>
<span id="cb203-30"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-30" aria-hidden="true"></a>    <span class="co"># nice prompt for the nix-shell</span></span>
<span id="cb203-31"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-31" aria-hidden="true"></a>    <span class="ex">shellHook</span> = <span class="st">&#39;&#39;</span></span>
<span id="cb203-32"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-32" aria-hidden="true"></a>     <span class="bu">export</span> <span class="va">PS1=</span><span class="st">&quot;\n\[[</span><span class="va">${name}</span><span class="st">:\033[1;32m\]\W\[\033[0m\]]&gt; &quot;</span></span>
<span id="cb203-33"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-33" aria-hidden="true"></a>  <span class="st">&#39;&#39;</span>;</span>
<span id="cb203-34"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-34" aria-hidden="true"></a>  <span class="kw">}</span>;</span>
<span id="cb203-35"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb203-35" aria-hidden="true"></a>}</span></code></pre></div><p>It uses the <code>nixpkgs.nix</code> file. But also you can configure it to enable/disable benchmarks while building your application. I do not expect you to understand what is really going on here, but a short explanation is this file take cares of:</p><ol><li>use the pinned version of nixpkgs and should provide a working set of haskell libraries.</li><li>read you <code>.cabal</code> file and find the set of libraries you depends on so <code>nix</code> will be able to download them.</li><li>download a few useful packages for Haskell development, in particular <code>hlint</code>, <code>ghcid</code>, <code>cabal-install</code>, <code>cabal2nix</code> and <code>hindent</code>. I will talk about those tools later.</li><li>take care of handling the <code>nix-shell</code> prompt so you should see the name of your project.</li></ol><p>The only things you should manipulate for a new fresh project should be the <code>name</code> and perhaps the <code>buildInputs</code> list to add a few more libraries that could be either Haskell libraries or any library <code>nix</code> know about (for example <code>ncurses</code>, in that case you should write it <code>pkgs.ncurses</code>).</p><p>The two last file simply use the <code>default.nix</code> file:</p><p>The <code>shell.nix</code> file:</p><div class="m" id="cb204" data-tangle="my-app/shell.nix" data-mkdirp="t"><pre class="m nix"><code class="m bash"><span id="cb204-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb204-1" aria-hidden="true"></a><span class="kw">(</span><span class="ex">import</span> ./. {}<span class="kw">)</span><span class="ex">.shell</span></span></code></pre></div><p>And <code>release.nix</code>:</p><div class="m" id="cb205" data-tangle="my-app/release.nix" data-mkdirp="t"><pre class="m nix"><code class="m bash"><span id="cb205-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb205-1" aria-hidden="true"></a><span class="bu">let</span></span>
<span id="cb205-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb205-2" aria-hidden="true"></a>  <span class="ex">def</span> = import ./. {};</span>
<span id="cb205-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb205-3" aria-hidden="true"></a><span class="kw">in</span></span>
<span id="cb205-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb205-4" aria-hidden="true"></a> <span class="kw">{</span> <span class="ex">my_project</span> = def.my_project<span class="kw">;</span> <span class="kw">}</span></span></code></pre></div><p>So download those files as well as this <code>.gitignore</code> file:</p><pre class="q" data-tangle="my-app/.gitignore" data-mkdirp="t"><code>dist-newstyle/
result
</code></pre><h3 id="checking-your-environment">Checking your environment</h3><p>Now you should see those files in your project:</p><pre class="example"><code>[hs:my-app]&gt; tree
.
âââ CHANGELOG.md
âââ LICENSE
âââ Setup.hs
âââ app
âÂ Â  âââ Main.hs
âââ default.nix
âââ src
âÂ Â  âââ MyLib.hs
âââ my-app.cabal
âââ nixpkgs.nix
âââ release.nix
âââ shell.nix
âââ test
    âââ MyLibTest.hs

3 directories, 11 files
</code></pre><p>You shall now enter <code>nix-shell</code> again, but in your <code>my-app</code> directory this time.</p><pre class="example"><code>[hs:my-app]&gt; nix-shell
warning: Nix search path entry &#39;/nix/var/nix/profiles/per-user/root/channels&#39; does not exist, ignoring
building &#39;/nix/store/j3hi4wm9996wfga61arc2917klfgspwr-cabal2nix-my-app.drv&#39;...
installing
warning: Nix search path entry &#39;/nix/var/nix/profiles/per-user/root/channels/nixpkgs&#39; does not exist, ignoring
warning: file &#39;nixpkgs&#39; was not found in the Nix search path (add it using $NIX_PATH or -I), at (string):1:9; will use bash from your environment

[my-app:my-app]&gt; which ghcid
/nix/store/ckps9wgbmpckxdvs42p6sqz64dfqiv35-ghcid-0.7.5-bin/bin/ghcid

[my-app:my-app]&gt; cabal run my-app
Build profile: -w ghc-8.6.5 -O1
In order, the following will be built (use -v for more details):
 - my-app-0.1.0.0 (src) (first run)
 - my-app-0.1.0.0 (exe:my-app) (first run)
Configuring library for my-app-0.1.0.0..
Preprocessing library for my-app-0.1.0.0..
Building library for my-app-0.1.0.0..
[1 of 1] Compiling MyLib            ( src/MyLib.hs, /Users/y/hsenv/my-app/dist-newstyle/build/x86_64-osx/ghc-8.6.5/my-app-0.1.0.0/build/MyLib.o )
Configuring executable &#39;my-app&#39; for my-app-0.1.0.0..
Preprocessing executable &#39;my-app&#39; for my-app-0.1.0.0..
Building executable &#39;my-app&#39; for my-app-0.1.0.0..
[1 of 1] Compiling Main             ( app/Main.hs, /Users/y/hsenv/my-app/dist-newstyle/build/x86_64-osx/ghc-8.6.5/my-app-0.1.0.0/x/my-app/build/my-app/my-app-tmp/Main.o )
Linking /Users/y/hs-env/my-app/dist-newstyle/build/x86_64-osx/ghc-8.6.5/my-app-0.1.0.0/x/my-app/build/my-app/my-app ...
Hello, Haskell!
someFunc
</code></pre><p>Great! It works! Try to run it again:</p><pre class="example"><code>[my-app:my-app]&gt; cabal run my-app
Up to date
Hello, Haskell!
someFunc
</code></pre><p>This time, the compilation is not done again. <code>cabal</code> is smart enough not to repeat the compilation again.</p><div class="bf"><p>You could also use <code>nix-build</code> to compile your app. I think this is nice to do for releases. But for development, you should use <code>cabal</code>.</p></div><h3 id="add-a-library">Add a library</h3><div class="bf"><p><abbr title="too long; didn't read">tl;dr:</abbr> do not be afraid by the lenght of this section in fact, this is straightforward. I just take a lot of time to go through all intermediate steps.</p><ol><li>add the library in the <code>build-depends</code> inside your <code>.cabal</code> file.</li><li>restart <code>nix-shell</code> to download the new dependencies.</li></ol></div><p>If you open the <code>my-app.cabal</code> file in an editor you should see a <code>library</code> section and and <code>executable my-app</code> section. In particular for each section you can see a <code>build-depends</code> sub-section as this one:</p><pre class="bp"><code>...
library
  ...
  build-depends:       base ^&gt;=4.12.0.0
  ...
executable my-app
  ...
  build-depends:       base ^&gt;=4.12.0.0, my-app
  ...
</code></pre><div class="bf"><p>The <code>^>=4.12.0.0</code> means that it should use the latest non breaking version of the haskell package <code>base</code>. The author of the <code>base</code> package are responsible not to break the API for minor releases. Haskell libs uses a 4 number versionning quite similar to the semantic versionning scheme with just another minor number for non visible changes. I will not argue much, but mainly, semantic versionning and Haskell versionning are just a "right to break things to your users".</p><p>I don't want to talk a lot more about this, but, it would be nice if more people would watch this talk<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fn8" class="g" id="fnref8" role="doc-noteref"><sup>8</sup></a> related to versionning.</p><p>If you want to know more about Haskell versionning convention: <a href="https://pvp.haskell.org">https://pvp.haskell.org</a></p></div><p>Add the <code>protolude</code> lib in the library build-depends like this:</p><pre class="bp"><code>...
library
  ...
  build-depends:       base ^&gt;=4.12.0.0,
                       protolude
  ...
executable my-app
  ...
  build-depends:       base ^&gt;=4.12.0.0, my-app
  ...
</code></pre><div class="bf"><p>I did not include a version constraint here. This is ok if you do not deploy your library publicly. This would be absolutely awful if you deploy your library publicly. So while developing a private app nobody can see except you, nothing is wrong with this. But I would encourage you to write those version bounds. It is sane to do that, but be warned that your lib might rot if you want it to be part of a working set of libs. So you might be pinged time to time to update some bounds or to adap your code to the breaking change of a lib you are using. Do not think too much about this. This is generally quite trivial work to do to maintain your lib into a working lib set.</p></div><p>Now that you have added <code>protolude</code> modify slightly the code of your app to use it. Change the code inside <code>src/MyLib.hs</code>:</p><div class="m" id="cb212" data-tangle="my-app/src/MyLib.hs" data-mkdirp="t"><pre class="m haskell"><code class="m haskell"><span id="cb212-1"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE NoImplicitPrelude #-}</span></span>
<span id="cb212-2"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-2" aria-hidden="true"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb212-3"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-3" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">MyLib</span> (someFunc) <span class="kw">where</span></span>
<span id="cb212-4"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-4" aria-hidden="true"></a></span>
<span id="cb212-5"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Protolude</span></span>
<span id="cb212-6"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-6" aria-hidden="true"></a></span>
<span id="cb212-7"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-7" aria-hidden="true"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb212-8"><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#cb212-8" aria-hidden="true"></a>someFunc <span class="ot">=</span> putText <span class="st">&quot;someFunc&quot;</span></span></code></pre></div><p>Please do not try to search right now about what this change is doing. It should work mostly as before. The goal here is just to check that you can use another library easily.</p><p>So now you should get out of the <code>nix-shell</code> because <code>nix</code> dependencies changed. Generally just type <code>^D</code> (<code>Ctrl-d</code>) then launch <code>nix-shell --pure</code>.</p><pre class="example"><code>[my-app:my-app]&gt; cabal build
Warning: The package list for &#39;hackage.haskell.org&#39; does not exist. Run &#39;cabal
update&#39; to download it.
Resolving dependencies...
cabal: Could not resolve dependencies:
[__0] trying: my-app-0.1.0.0 (user goal)
[__1] unknown package: protolude (dependency of my-app)
[__1] fail (backjumping, conflict set: my-app, protolude)
After searching the rest of the dependency tree exhaustively, these were the
goals I&#39;ve had most trouble fulfilling: my-app, protolude


[my-app:my-app]&gt; exit

[hs:my-app]&gt; nix-shell
warning: Nix search path entry &#39;/nix/var/nix/profiles/per-user/root/channels&#39; does not exist, ignoring
building &#39;/nix/store/sr4838rnmzn30j3qc5ray4i2n6n0p8pq-cabal2nix-my-app.drv&#39;...
installing

[my-app:my-app]&gt; cabal build
Build profile: -w ghc-8.6.5 -O1
In order, the following will be built (use -v for more details):
 - my-app-0.1.0.0 (lib) (file src/MyLib.hs changed)
 - my-app-0.1.0.0 (exe:my-app) (configuration changed)
Preprocessing library for my-app-0.1.0.0..
Building library for my-app-0.1.0.0..
[1 of 1] Compiling MyLib            ( src/MyLib.hs, .../my-app/dist-newstyle/build/x86_64-osx/ghc-8.6.5/my-app-0.1.0.0/build/MyLib.o )
Configuring executable &#39;my-app&#39; for my-app-0.1.0.0..
Preprocessing executable &#39;my-app&#39; for my-app-0.1.0.0..
Building executable &#39;my-app&#39; for my-app-0.1.0.0..
[1 of 1] Compiling Main             ( app/Main.hs, .../my-app/dist-newstyle/build/x86_64-osx/ghc-8.6.5/my-app-0.1.0.0/x/my-app/build/my-app/my-app-tmp/Main.o ) [MyLib changed]
Linking .../my-app/dist-newstyle/build/x86_64-osx/ghc-8.6.5/my-app-0.1.0.0/x/my-app/build/my-app/my-app ...

[my-app:my-app]&gt; cabal run my-app
Up to date
Hello, Haskell!
someFunc
</code></pre><p>Yes!</p><h3 id="better-defaults">Better defaults</h3><p>Some of the default values in the cabal file are not the best for a professional and serious application development unfortunately. First, let create a new block called <code>common professional-properties</code> that will help us not repeat ourselve much and show more warning during compilation.</p><pre class="bp"><code>common professional-properties
  default-language: Haskell2010
  build-depends:
    base ^&gt;=4.12.0.0
  ghc-options:
    -Wall
    -Wcompat
    -Wincomplete-uni-patterns
    -Wredundant-constraints
    -Wnoncanonical-monad-instances
    -- -Werror
    -- -O2
</code></pre><p>This should then be used with import in all other sections (<code>library</code>, <code>executable</code> and <code>test</code>). Also add the <code>ghc-options</code> to enable the use of all core by default. This might not always be a good idea. But I think this is generally a better default for most modern application.</p><pre class="bp"><code>library
  import: professional-properties
  build-depends: protolude
  ...

executable my-app
  import: professional-properties
  ghc-options:
    -- enable parallelism
    -threaded
    &quot;-with-rtsopts=-N&quot;
  ...

test-suite my-app-test
  import: professional-properties
  ...
</code></pre><p>You can download the final cabal file: <a href="https://her.esy.fun/posts/0010-Haskell-Now/my-app/my-app.cabal">my-app.cabal</a></p><h1 id="conclusion">Conclusion</h1><p>This was a re-written fast Haskell tutorial. I will certainly complete this with more advanced tutorial explaining how to write a few Haskell projects.</p><p>Thanks for reading it.</p><h1 id="thanks">Thanks</h1><p>Thanks to <a href="http://reddit.com/r/haskell"><code>/r/haskell</code></a> and <a href="http://reddit.com/r/programming"><code>/r/programming</code></a>. Your comment were most than welcome.</p><p>Particularly, I want to thank <a href="https://github.com/Emm">Emm</a> a thousand times for the time he spent on correcting my English. Thank you man.</p><section class="s" role="doc-endnotes"><hr></hr><ol><li id="fn1" role="doc-endnote"><p>Even if most recent languages try to hide them, they are present.<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref1" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn2" role="doc-endnote"><p>I know I'm cheating. But I will talk about non-strictness later.<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref2" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn3" role="doc-endnote"><p>For the brave, a more complete explanation of pattern matching can be found <a href="http://www.cs.auckland.ac.nz/references/haskell/haskell-intro-html/patterns.html">here</a>.<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref3" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn4" role="doc-endnote"><p>Which is itself very similar to the javascript <code>eval</code> function, that is applied to a string containing JSON.<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref4" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn5" role="doc-endnote"><p>There are some <em>unsafe</em> exceptions to this rule. But you shouldn't see such use in a real application except maybe for debugging purposes.<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref5" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn6" role="doc-endnote"><p>For the curious ones, the real type looks like <code>data IO a = IO {unIO :: State# RealWorld -> (# State# RealWorld, a #)}</code>. All the <code>#</code> has to do with optimisation. I swapped the fields in my example. But this is the basic idea. As of today, the definition of <code>IO</code> is no more visible into <code>base</code>. We have the following explanation in <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.IO.html"><code>GHC.IO.hs</code></a>:</p><blockquote><pre><code>The IO Monad is just an instance of the ST monad, where the state is
the real world.  We use the exception mechanism (in GHC.Exception) to
implement IO exceptions.

NOTE: The IO representation is deeply wired in to various parts of the
system.  The following list may or may not be exhaustive:

Compiler  - types of various primitives in PrimOp.hs

RTS       - forceIO (StgStartup.cmm)
          - catchzh_fast, (un)?blockAsyncExceptionszh_fast, raisezh_fast
            (Exception.cmm)
          - raiseAsync (RaiseAsync.c)

Prelude   - GHC.IO.hs, and several other places including
            GHC.Exception.hs.

Libraries - parts of hslibs/lang.

--SDM
</code></pre></blockquote><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref6" class="c" role="doc-backlink">â©ï¸</a></li><li id="fn7" role="doc-endnote"><p>Well, you'll certainly need to practice a bit to get used to them and to understand when you can use them and create your own. But you already made a big step in this direction.<a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref7" class="c" role="doc-backlink">â©ï¸</a></p></li><li id="fn8" role="doc-endnote"><p><a href="https://www.youtube.com/watch?v=oyLBGkS5ICk">Spec-ulation Keynote - Rich Hickey</a><a href="https://her.esy.fun/posts/0010-Haskell-Now/index.html#fnref8" class="c" role="doc-backlink">â©ï¸</a></p></li></ol></section></div>
]]></description>
</item>


<item>
<title>Optimize the size of no js websites</title>
<guid>https://her.esy.fun/posts/0009-optim-nojs-website/index.html</guid>
<pubDate>Fri, 06 Dec 2019 00:00:00 +0100</pubDate>
<category>blog</category>
<category>shell</category>
<category>script</category>
<description><![CDATA[
<div id="content"><p>One of the major problem with CSS and HTML is that they are highly dependent from each other. For example, if you want to minimize your CSS, you are still forced to use the same class names even if they are long. Because the HTML uses them. And the same problem arise when you want to minimize the size of your HTML files.</p><p>It means that if you want to minimize a full website you must take care at the same time of HTML pages as well as CSS pages. And this is totally impossible to achieve if JS is involved because there is always the risk the JS code generate class names to manipulate the DOM.</p><p>So here is a small script I wanted to write from a long time that do the following:</p><ol><li>retrieve all class names in the HTML and in the CSS</li><li>create a map from those long names to shorter names</li><li>replace the class names in the HTML and CSS files.</li></ol><p>So if you have multiple HTML files with:</p><div class="m" id="cb1"><pre class="m html"><code class="m html"><span id="cb1-1"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#cb1-1" aria-hidden="true"></a><span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;long-org-class-generated-by-org-mode&quot;</span><span class="kw">&gt;</span>...<span class="kw">&lt;/div&gt;</span></span></code></pre></div><p>and CSS files with:</p><div class="m" id="cb2"><pre class="m css"><code class="m css"><span id="cb2-1"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#cb2-1" aria-hidden="true"></a>pre <span class="fu">.long-org-class-generated-by-org-mode</span> { <span class="fu">...</span> }</span></code></pre></div><p>Those will be replaced by something like:</p><div class="m" id="cb3"><pre class="m html"><code class="m html"><span id="cb3-1"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#cb3-1" aria-hidden="true"></a><span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;av&quot;</span><span class="kw">&gt;</span>...<span class="kw">&lt;/div&gt;</span></span></code></pre></div><p>and CSS files with:</p><div class="m" id="cb4"><pre class="m css"><code class="m css"><span id="cb4-1"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#cb4-1" aria-hidden="true"></a>pre <span class="fu">.av</span> { <span class="fu">...</span> }</span></code></pre></div><p>And thus removing many superfluous bytes.</p><p>In my personal website, I run this script after minifying my HTML and CSS with classical tools. And I still get up to 32% smaller HTML and 22% smaller CSS.</p><p>Many 25% smaller HTML if there are a lot of code, because org-mode use very long class names when generating the code.</p><p>Not bad for a very basic solution.</p><p>If you want to try it; here is the quick and dirty script I use:</p><div class="m" id="optim-classes.sh"><pre class="m bash"><code class="m bash"><span id="optim-classes.sh-1"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env zsh</span></span>
<span id="optim-classes.sh-2"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-2" aria-hidden="true"></a></span>
<span id="optim-classes.sh-3"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-3" aria-hidden="true"></a><span class="va">webdir=</span><span class="st">&quot;_site&quot;</span></span>
<span id="optim-classes.sh-4"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-4" aria-hidden="true"></a></span>
<span id="optim-classes.sh-5"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-5" aria-hidden="true"></a><span class="fu">retrieve_classes_in_html ()</span> <span class="kw">{</span></span>
<span id="optim-classes.sh-6"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-6" aria-hidden="true"></a>    <span class="fu">cat</span> <span class="va">$webdir</span>/**/*.html(N) <span class="kw">|</span> <span class="kw">\</span></span>
<span id="optim-classes.sh-7"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-7" aria-hidden="true"></a>        <span class="fu">perl</span> -pe <span class="st">&#39;s/class=&quot;?([a-zA-Z0-9_-]*)/\nCLASS: $1\n/g&#39;</span></span>
<span id="optim-classes.sh-8"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-8" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="optim-classes.sh-9"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-9" aria-hidden="true"></a></span>
<span id="optim-classes.sh-10"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-10" aria-hidden="true"></a><span class="fu">retrieve_classes_in_css ()</span> <span class="kw">{</span></span>
<span id="optim-classes.sh-11"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-11" aria-hidden="true"></a>    <span class="fu">cat</span> <span class="va">$webdir</span>/**/*.css(N) <span class="kw">|</span> <span class="kw">\</span></span>
<span id="optim-classes.sh-12"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-12" aria-hidden="true"></a>        <span class="fu">perl</span> -pe <span class="st">&#39;s/\.([a-zA-Z-_][a-zA-Z0-9-_]*)/\nCLASS: $1\n/g&#39;</span></span>
<span id="optim-classes.sh-13"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-13" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="optim-classes.sh-14"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-14" aria-hidden="true"></a></span>
<span id="optim-classes.sh-15"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-15" aria-hidden="true"></a><span class="va">classes=(</span> <span class="va">$(</span> {<span class="ex">retrieve_classes_in_html</span><span class="kw">;</span> <span class="ex">retrieve_classes_in_css</span>}<span class="kw">|</span> <span class="kw">\</span></span>
<span id="optim-classes.sh-16"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-16" aria-hidden="true"></a>                 <span class="fu">egrep</span> <span class="st">&quot;^CLASS: [^ ]*$&quot;</span> <span class="kw">|\</span></span>
<span id="optim-classes.sh-17"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-17" aria-hidden="true"></a>                 <span class="fu">sort</span> -u <span class="kw">|</span> <span class="kw">\</span></span>
<span id="optim-classes.sh-18"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-18" aria-hidden="true"></a>                 <span class="fu">awk</span> <span class="st">&#39;length($2)&gt;2 {print length($2),$2}&#39;</span><span class="kw">|\</span></span>
<span id="optim-classes.sh-19"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-19" aria-hidden="true"></a>                 <span class="fu">sort</span> -rn <span class="kw">|</span> <span class="kw">\</span></span>
<span id="optim-classes.sh-20"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-20" aria-hidden="true"></a>                 <span class="fu">awk</span> <span class="st">&#39;{print $2}&#39;</span><span class="va">)</span> <span class="va">)</span></span>
<span id="optim-classes.sh-21"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-21" aria-hidden="true"></a></span>
<span id="optim-classes.sh-22"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-22" aria-hidden="true"></a><span class="fu">chr()</span> <span class="kw">{</span></span>
<span id="optim-classes.sh-23"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-23" aria-hidden="true"></a>    [ <span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span> <span class="ex">-lt</span> 26 ] <span class="kw">||</span> <span class="bu">return</span> 1</span>
<span id="optim-classes.sh-24"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-24" aria-hidden="true"></a>    <span class="bu">printf</span> <span class="st">&quot;</span><span class="dt">\\</span><span class="va">$(</span><span class="bu">printf</span> <span class="st">&#39;%03o&#39;</span> <span class="va">$((</span> 97 + <span class="va">$1</span> <span class="va">)))</span><span class="st">&quot;</span></span>
<span id="optim-classes.sh-25"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-25" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="optim-classes.sh-26"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-26" aria-hidden="true"></a></span>
<span id="optim-classes.sh-27"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-27" aria-hidden="true"></a><span class="fu">shortName()</span> <span class="kw">{</span></span>
<span id="optim-classes.sh-28"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-28" aria-hidden="true"></a>    <span class="kw">if</span><span class="bu"> [</span> <span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span> <span class="ot">-gt</span> 25<span class="bu"> ]</span>; <span class="kw">then</span></span>
<span id="optim-classes.sh-29"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-29" aria-hidden="true"></a>        <span class="ex">print</span> -- <span class="va">$(</span><span class="ex">shortName</span> <span class="va">$((</span> ( <span class="va">$1</span> / 26 ) - 1 <span class="va">)))$(</span><span class="ex">shortName</span> <span class="va">$((</span> <span class="va">$1</span> % 26 <span class="va">)))</span></span>
<span id="optim-classes.sh-30"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-30" aria-hidden="true"></a>    <span class="kw">else</span></span>
<span id="optim-classes.sh-31"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-31" aria-hidden="true"></a>        <span class="ex">chr</span> <span class="va">$1</span></span>
<span id="optim-classes.sh-32"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-32" aria-hidden="true"></a>    <span class="kw">fi</span></span>
<span id="optim-classes.sh-33"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-33" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="optim-classes.sh-34"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-34" aria-hidden="true"></a></span>
<span id="optim-classes.sh-35"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-35" aria-hidden="true"></a><span class="va">i=</span>0;</span>
<span id="optim-classes.sh-36"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-36" aria-hidden="true"></a><span class="bu">typeset</span> -A <span class="va">assoc</span></span>
<span id="optim-classes.sh-37"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-37" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">c</span> in <span class="va">$classes</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="optim-classes.sh-38"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-38" aria-hidden="true"></a>    <span class="va">sn=$(</span><span class="ex">shortName</span> <span class="va">$i)</span></span>
<span id="optim-classes.sh-39"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-39" aria-hidden="true"></a>    <span class="ex">print</span> -- <span class="st">&quot;</span><span class="va">$c</span><span class="st"> -&gt; </span><span class="va">$sn</span><span class="st">&quot;</span></span>
<span id="optim-classes.sh-40"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-40" aria-hidden="true"></a>    <span class="va">assoc[$c]=$sn</span></span>
<span id="optim-classes.sh-41"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-41" aria-hidden="true"></a>    <span class="kw">((</span>i++<span class="kw">))</span></span>
<span id="optim-classes.sh-42"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-42" aria-hidden="true"></a><span class="kw">done</span></span>
<span id="optim-classes.sh-43"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-43" aria-hidden="true"></a></span>
<span id="optim-classes.sh-44"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-44" aria-hidden="true"></a><span class="va">htmlreplacer=</span><span class="st">&#39;&#39;</span></span>
<span id="optim-classes.sh-45"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-45" aria-hidden="true"></a><span class="va">cssreplacer=</span><span class="st">&#39;&#39;</span></span>
<span id="optim-classes.sh-46"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-46" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">long</span> in <span class="va">$classes</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="optim-classes.sh-47"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-47" aria-hidden="true"></a>    <span class="va">htmlreplacer=$htmlreplacer</span><span class="st">&#39;s#class=(&quot;?)&#39;</span><span class="va">${long}</span><span class="st">&#39;#class=$1&#39;</span><span class="va">${assoc[$long]}</span><span class="st">&#39;#g;&#39;</span></span>
<span id="optim-classes.sh-48"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-48" aria-hidden="true"></a>    <span class="va">cssreplacer=$cssreplacer</span><span class="st">&#39;s#\.&#39;</span><span class="va">${long}</span><span class="st">&#39;#.&#39;</span><span class="va">${assoc[$long]}</span><span class="st">&#39;#g;&#39;</span></span>
<span id="optim-classes.sh-49"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-49" aria-hidden="true"></a><span class="kw">done</span></span>
<span id="optim-classes.sh-50"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-50" aria-hidden="true"></a></span>
<span id="optim-classes.sh-51"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-51" aria-hidden="true"></a><span class="fu">sizeof()</span> <span class="kw">{</span></span>
<span id="optim-classes.sh-52"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-52" aria-hidden="true"></a>    <span class="fu">stat</span> --format=<span class="st">&quot;%s&quot;</span> <span class="st">&quot;</span><span class="va">$*</span><span class="st">&quot;</span></span>
<span id="optim-classes.sh-53"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-53" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="optim-classes.sh-54"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-54" aria-hidden="true"></a></span>
<span id="optim-classes.sh-55"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-55" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">fic</span> in <span class="va">$webdir</span>/**/*.<span class="dt">{html,xml}</span>(N); <span class="kw">do</span></span>
<span id="optim-classes.sh-56"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-56" aria-hidden="true"></a>    <span class="va">before=$(</span><span class="ex">sizeof</span> <span class="va">$fic)</span></span>
<span id="optim-classes.sh-57"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-57" aria-hidden="true"></a>    <span class="ex">print</span> -n -- <span class="st">&quot;</span><span class="va">$fic</span><span class="st"> (</span><span class="va">$before</span><span class="st">&quot;</span></span>
<span id="optim-classes.sh-58"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-58" aria-hidden="true"></a>    <span class="fu">perl</span> -pi -e <span class="va">$htmlreplacer</span> <span class="va">$fic</span></span>
<span id="optim-classes.sh-59"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-59" aria-hidden="true"></a>    <span class="va">after=$(</span><span class="ex">sizeof</span> <span class="va">$fic)</span></span>
<span id="optim-classes.sh-60"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-60" aria-hidden="true"></a>    <span class="ex">print</span> -- <span class="st">&quot; =&gt; </span><span class="va">$after</span><span class="st"> [</span><span class="va">$((</span> ((before - after) * 100) / before  <span class="va">))</span><span class="st">])&quot;</span></span>
<span id="optim-classes.sh-61"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-61" aria-hidden="true"></a><span class="kw">done</span></span>
<span id="optim-classes.sh-62"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-62" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">fic</span> in <span class="va">$webdir</span>/**/*.css(N); <span class="kw">do</span></span>
<span id="optim-classes.sh-63"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-63" aria-hidden="true"></a>    <span class="va">before=$(</span><span class="ex">sizeof</span> <span class="va">$fic)</span></span>
<span id="optim-classes.sh-64"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-64" aria-hidden="true"></a>    <span class="ex">print</span> -n -- <span class="st">&quot;</span><span class="va">$fic</span><span class="st"> (</span><span class="va">$before</span><span class="st">&quot;</span></span>
<span id="optim-classes.sh-65"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-65" aria-hidden="true"></a>    <span class="fu">perl</span> -pi  -e <span class="va">$cssreplacer</span> <span class="va">$fic</span></span>
<span id="optim-classes.sh-66"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-66" aria-hidden="true"></a>    <span class="va">after=$(</span><span class="ex">sizeof</span> <span class="va">$fic)</span></span>
<span id="optim-classes.sh-67"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-67" aria-hidden="true"></a>    <span class="ex">print</span> -- <span class="st">&quot; =&gt; </span><span class="va">$after</span><span class="st"> [</span><span class="va">$((</span> ((before - after) * 100) / before  <span class="va">))</span><span class="st">])&quot;</span></span>
<span id="optim-classes.sh-68"><a href="https://her.esy.fun/posts/0009-optim-nojs-website/index.html#optim-classes.sh-68" aria-hidden="true"></a><span class="kw">done</span></span></code></pre></div><p>A few remarks:</p><ul><li>to prevent doing the work twice, the script only takes care for classe names longer or equal to 3 chars. (<code>awk 'length($2)>2 {print
length($2),$2}'</code>). As consequence take care that your website does not use class name shorter than 3 chars otherwise it could mess with your css.</li><li>The script do not change ids because those can be used for anchors and thus can be part of public URLs.</li><li>The script replace the classes with the longuest name first to prevent bug if one class name is a prefix of another one.</li><li>We generate a long perl script to launch perl just once, this make the full find and replace way faster.</li></ul><p>Of course this could be improved by providing the shortest name to the most used classes, and also by using a better <code>shortName</code> function that could use more chars. But just this quick and dirty script already does a better work than existing methods that do not take into account all the CSS and HTML files.</p></div>
]]></description>
</item>


<item>
<title>Further Blog Engine change</title>
<guid>https://her.esy.fun/posts/0008-further-blog-changes/index.html</guid>
<pubDate>Sat, 30 Nov 2019 00:00:00 +0100</pubDate>
<category>blog</category>
<description><![CDATA[
<div id="content"><p>When I started this new blog, I wanted to find something minimal to be able to minimize my natural tendency to hack my blogging system.</p><p>Clearly it was a failure :), <code>org-publish</code> ecosystem is not easy enough to handle all my needs, so I had to hack a few external scripts. In particular regarding RSS.</p><p>Here are a few recent changes I did in my system:</p><ol><li>I changed how I reduce the size of the images.</li><li>I do not merge all CSS styles in the same CSS file, I splitted 4 different CSS each supporting light/dark theme. This way the size of each page is reduced.</li><li>I added an HTML minimize step. I could optimize this a lot I think.</li><li>I added a script that show the size of each webpage (HTML + CSS + Images). There is an example in all the footers of the pages of my website.</li></ol><p>So to compress the images I use:</p><div class="m" id="cb1"><pre class="m bash"><code class="m bash"><span id="cb1-1"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#cb1-1" aria-hidden="true"></a><span class="ex">convert</span> src.jpg <span class="kw">\</span></span>
<span id="cb1-2"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#cb1-2" aria-hidden="true"></a>        <span class="ex">-resize</span> 400x400<span class="dt">\&gt;</span> <span class="kw">\</span></span>
<span id="cb1-3"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#cb1-3" aria-hidden="true"></a>        <span class="ex">-colorspace</span> Gray <span class="kw">\</span></span>
<span id="cb1-4"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#cb1-4" aria-hidden="true"></a>        <span class="ex">-ordered-dither</span> o8x8,8 <span class="kw">\</span></span>
<span id="cb1-5"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#cb1-5" aria-hidden="true"></a>        <span class="ex">dst.jpg</span></span></code></pre></div><p>Somehow, I made 4 themes. This is too much, but, I don't know I guess I felt inspired. I'm particularly proud of the matrix theme (sci dark, try it by selecting sci and then choose dark theme). It takes care of making the images green, and inspired by this one I also added this trick to all other themes.</p><p>To note, one of the theme is a minimal one. It is used to minimize the size of the CSS, while I'm writting those lines, the css size is 728 bytes.</p><p>I'll certainly be able to optimize a lot more the size of my HTML files too. But I haven't invested much time in it yet. I just use the <code>minify</code> command line tool for them.</p><p>So right now to build my website here is the script I use:</p><div class="m" id="build.sh"><pre class="m bash"><code class="m bash"><span id="build.sh-1"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="build.sh-2"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-2" aria-hidden="true"></a></span>
<span id="build.sh-3"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-3" aria-hidden="true"></a><span class="co"># build the files via emacs</span></span>
<span id="build.sh-4"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-4" aria-hidden="true"></a><span class="ex">emacs</span> <span class="kw">\</span></span>
<span id="build.sh-5"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-5" aria-hidden="true"></a>  <span class="ex">--load</span> project.el <span class="kw">\</span></span>
<span id="build.sh-6"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-6" aria-hidden="true"></a>  <span class="ex">--eval</span> <span class="st">&quot;(progn (org-publish </span><span class="dt">\&quot;</span><span class="st">blog</span><span class="dt">\&quot;</span><span class="st"> t) (evil-quit))&quot;</span></span>
<span id="build.sh-7"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-7" aria-hidden="true"></a></span>
<span id="build.sh-8"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-8" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;Optim HTML size&quot;</span></span>
<span id="build.sh-9"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-9" aria-hidden="true"></a><span class="ex">./optim-html.sh</span></span>
<span id="build.sh-10"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-10" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;Gen themes clones&quot;</span></span>
<span id="build.sh-11"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-11" aria-hidden="true"></a><span class="ex">./dup-for-themes.sh</span></span>
<span id="build.sh-12"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-12" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;Update file size&quot;</span></span>
<span id="build.sh-13"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-13" aria-hidden="true"></a><span class="ex">./update-file-size.sh</span></span>
<span id="build.sh-14"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-14" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;Building RSS&quot;</span></span>
<span id="build.sh-15"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-15" aria-hidden="true"></a><span class="ex">./mkrss.sh</span></span>
<span id="build.sh-16"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#build.sh-16" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;RSS Built&quot;</span></span></code></pre></div><p>Where</p><div class="m" id="optim-html.sh"><pre class="m bash"><code class="m bash"><span id="optim-html.sh-1"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env nix-shell</span></span>
<span id="optim-html.sh-2"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-2" aria-hidden="true"></a><span class="co">#!nix-shell -i zsh</span></span>
<span id="optim-html.sh-3"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-3" aria-hidden="true"></a><span class="co">#!nix-shell -I nixpkgs=&quot;https://github.com/NixOS/nixpkgs/archive/19.09.tar.gz&quot;</span></span>
<span id="optim-html.sh-4"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-4" aria-hidden="true"></a></span>
<span id="optim-html.sh-5"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-5" aria-hidden="true"></a><span class="va">webdir=</span><span class="st">&quot;_site&quot;</span></span>
<span id="optim-html.sh-6"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-6" aria-hidden="true"></a></span>
<span id="optim-html.sh-7"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-7" aria-hidden="true"></a><span class="fu">debug ()</span> <span class="kw">{</span></span>
<span id="optim-html.sh-8"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-8" aria-hidden="true"></a> <span class="ex">print</span> -- <span class="va">$*</span> <span class="op">&gt;</span>/dev/null</span>
<span id="optim-html.sh-9"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-9" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="optim-html.sh-10"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-10" aria-hidden="true"></a></span>
<span id="optim-html.sh-11"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-11" aria-hidden="true"></a><span class="bu">type</span> -a filelist</span>
<span id="optim-html.sh-12"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-12" aria-hidden="true"></a><span class="ex">setopt</span> extendedglob</span>
<span id="optim-html.sh-13"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-13" aria-hidden="true"></a><span class="kw">if</span> <span class="kw">((</span><span class="va">$#</span>&gt;0<span class="kw">))</span>; <span class="kw">then</span></span>
<span id="optim-html.sh-14"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-14" aria-hidden="true"></a>    <span class="va">filelist=(</span> <span class="va">$*</span> <span class="va">)</span></span>
<span id="optim-html.sh-15"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-15" aria-hidden="true"></a><span class="kw">else</span></span>
<span id="optim-html.sh-16"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-16" aria-hidden="true"></a>    <span class="va">filelist=(</span> <span class="va">$webdir</span>/**/*.html(.<span class="va">)</span> )</span>
<span id="optim-html.sh-17"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-17" aria-hidden="true"></a><span class="kw">fi</span></span>
<span id="optim-html.sh-18"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-18" aria-hidden="true"></a></span>
<span id="optim-html.sh-19"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-19" aria-hidden="true"></a><span class="va">tmp=$(</span><span class="fu">mktemp</span><span class="va">)</span></span>
<span id="optim-html.sh-20"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-20" aria-hidden="true"></a></span>
<span id="optim-html.sh-21"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-21" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">fic</span> in <span class="va">$filelist</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="optim-html.sh-22"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-22" aria-hidden="true"></a>    <span class="kw">if</span> <span class="bu">echo</span> <span class="va">$fic</span><span class="kw">|</span><span class="fu">egrep</span> -- <span class="st">&#39;-(mk|min|sci|modern).html$&#39;</span><span class="op">&gt;</span>/dev/null<span class="kw">;</span> <span class="kw">then</span></span>
<span id="optim-html.sh-23"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-23" aria-hidden="true"></a>        <span class="bu">continue</span></span>
<span id="optim-html.sh-24"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-24" aria-hidden="true"></a>    <span class="kw">fi</span></span>
<span id="optim-html.sh-25"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-25" aria-hidden="true"></a>    <span class="ex">print</span> -n -- <span class="st">&quot;</span><span class="va">$fic</span><span class="st"> &quot;</span></span>
<span id="optim-html.sh-26"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-26" aria-hidden="true"></a>    <span class="fu">cp</span> <span class="va">$fic</span> <span class="va">$tmp</span><span class="kw">;</span> <span class="ex">minify</span> --mime text/html <span class="va">$tmp</span> <span class="op">&gt;</span> <span class="va">$fic</span></span>
<span id="optim-html.sh-27"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-27" aria-hidden="true"></a>    <span class="ex">print</span> <span class="st">&quot;[OK]&quot;</span></span>
<span id="optim-html.sh-28"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#optim-html.sh-28" aria-hidden="true"></a><span class="kw">done</span></span></code></pre></div><div class="m" id="dup-for-themes.sh"><pre class="m bash"><code class="m bash"><span id="dup-for-themes.sh-1"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env nix-shell</span></span>
<span id="dup-for-themes.sh-2"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-2" aria-hidden="true"></a><span class="co">#!nix-shell -i zsh</span></span>
<span id="dup-for-themes.sh-3"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-3" aria-hidden="true"></a><span class="co">#!nix-shell -I nixpkgs=&quot;https://github.com/NixOS/nixpkgs/archive/19.09.tar.gz&quot;</span></span>
<span id="dup-for-themes.sh-4"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-4" aria-hidden="true"></a></span>
<span id="dup-for-themes.sh-5"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-5" aria-hidden="true"></a><span class="va">webdir=</span><span class="st">&quot;_site&quot;</span></span>
<span id="dup-for-themes.sh-6"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-6" aria-hidden="true"></a></span>
<span id="dup-for-themes.sh-7"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-7" aria-hidden="true"></a><span class="fu">debug ()</span> <span class="kw">{</span></span>
<span id="dup-for-themes.sh-8"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-8" aria-hidden="true"></a> <span class="ex">print</span> -- <span class="va">$*</span> <span class="op">&gt;</span>/dev/null</span>
<span id="dup-for-themes.sh-9"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-9" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="dup-for-themes.sh-10"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-10" aria-hidden="true"></a></span>
<span id="dup-for-themes.sh-11"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-11" aria-hidden="true"></a><span class="kw">if</span> <span class="kw">((</span><span class="va">$#</span>&gt;0<span class="kw">))</span>; <span class="kw">then</span></span>
<span id="dup-for-themes.sh-12"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-12" aria-hidden="true"></a>    <span class="va">filelist=(</span> <span class="va">$*</span> <span class="va">)</span></span>
<span id="dup-for-themes.sh-13"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-13" aria-hidden="true"></a><span class="kw">else</span></span>
<span id="dup-for-themes.sh-14"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-14" aria-hidden="true"></a>    <span class="va">filelist=(</span> <span class="va">$webdir</span>/**/*.html(.<span class="va">)</span> )</span>
<span id="dup-for-themes.sh-15"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-15" aria-hidden="true"></a><span class="kw">fi</span></span>
<span id="dup-for-themes.sh-16"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-16" aria-hidden="true"></a></span>
<span id="dup-for-themes.sh-17"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-17" aria-hidden="true"></a><span class="fu">trans()</span><span class="kw">{</span></span>
<span id="dup-for-themes.sh-18"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-18" aria-hidden="true"></a>   <span class="bu">local</span> <span class="va">suff=$1</span>;</span>
<span id="dup-for-themes.sh-19"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-19" aria-hidden="true"></a>   <span class="bu">local</span> <span class="va">fic=$2</span>;</span>
<span id="dup-for-themes.sh-20"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-20" aria-hidden="true"></a>   <span class="fu">cat</span> <span class="va">$fic</span> <span class="kw">|</span> <span class="fu">perl</span> -p -e <span class="st">&#39;s#href=&quot;?/css/mk.css&quot;?#href=/css/&#39;</span><span class="va">$suff</span><span class="st">&#39;.css#;s#(/?(index|archive|slides|about-me)).html#$1-&#39;</span><span class="va">$suff</span><span class="st">&#39;.html#g;s#(posts/[a-zA-Z0-9_-]*).html#$1-&#39;</span><span class="va">$suff</span><span class="st">&#39;.html#g;s#-&#39;</span><span class="va">$suff</span><span class="st">&#39;.html&gt;mk#.html&gt;mk#g&#39;</span> <span class="op">&gt;</span> <span class="va">${fic:r}</span>-<span class="va">${suff}</span>.html</span>
<span id="dup-for-themes.sh-21"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-21" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="dup-for-themes.sh-22"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-22" aria-hidden="true"></a></span>
<span id="dup-for-themes.sh-23"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-23" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">fic</span> in <span class="va">$filelist</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="dup-for-themes.sh-24"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-24" aria-hidden="true"></a>    <span class="kw">if</span> <span class="bu">echo</span> <span class="va">$fic</span><span class="kw">|</span><span class="fu">egrep</span> -- <span class="st">&#39;-(mk|min|sci|modern).html$&#39;</span><span class="op">&gt;</span>/dev/null<span class="kw">;</span> <span class="kw">then</span></span>
<span id="dup-for-themes.sh-25"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-25" aria-hidden="true"></a>        <span class="bu">continue</span></span>
<span id="dup-for-themes.sh-26"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-26" aria-hidden="true"></a>    <span class="kw">fi</span></span>
<span id="dup-for-themes.sh-27"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-27" aria-hidden="true"></a>    <span class="ex">print</span> -n -- <span class="st">&quot;</span><span class="va">$fic</span><span class="st"> &quot;</span></span>
<span id="dup-for-themes.sh-28"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-28" aria-hidden="true"></a>    <span class="kw">for</span> <span class="ex">suff</span> in sci min modern<span class="kw">;</span> <span class="kw">do</span></span>
<span id="dup-for-themes.sh-29"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-29" aria-hidden="true"></a>        <span class="ex">trans</span> <span class="va">$suff</span> <span class="va">$fic</span></span>
<span id="dup-for-themes.sh-30"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-30" aria-hidden="true"></a>    <span class="kw">done</span></span>
<span id="dup-for-themes.sh-31"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-31" aria-hidden="true"></a>    <span class="ex">print</span> <span class="st">&quot;[OK]&quot;</span></span>
<span id="dup-for-themes.sh-32"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#dup-for-themes.sh-32" aria-hidden="true"></a><span class="kw">done</span></span></code></pre></div><p>and the script to write the size of the file inside the file:</p><div class="m" id="update-file-size.sh"><pre class="m bash"><code class="m bash"><span id="update-file-size.sh-1"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-1" aria-hidden="true"></a><span class="co">#!/usr/bin/env nix-shell</span></span>
<span id="update-file-size.sh-2"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-2" aria-hidden="true"></a><span class="co">#!nix-shell -i zsh</span></span>
<span id="update-file-size.sh-3"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-3" aria-hidden="true"></a><span class="co">#!nix-shell -I nixpkgs=&quot;https://github.com/NixOS/nixpkgs/archive/19.09.tar.gz&quot;</span></span>
<span id="update-file-size.sh-4"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-4" aria-hidden="true"></a></span>
<span id="update-file-size.sh-5"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-5" aria-hidden="true"></a><span class="va">webdir=</span><span class="st">&quot;_site&quot;</span></span>
<span id="update-file-size.sh-6"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-6" aria-hidden="true"></a></span>
<span id="update-file-size.sh-7"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-7" aria-hidden="true"></a><span class="fu">sizeof()</span> <span class="kw">{</span></span>
<span id="update-file-size.sh-8"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-8" aria-hidden="true"></a>    <span class="fu">stat</span> --format=<span class="st">&quot;%s&quot;</span> <span class="st">&quot;</span><span class="va">$*</span><span class="st">&quot;</span></span>
<span id="update-file-size.sh-9"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-9" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="update-file-size.sh-10"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-10" aria-hidden="true"></a></span>
<span id="update-file-size.sh-11"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-11" aria-hidden="true"></a><span class="fu">debug ()</span> <span class="kw">{</span></span>
<span id="update-file-size.sh-12"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-12" aria-hidden="true"></a> <span class="ex">print</span> -- <span class="va">$*</span> <span class="op">&gt;</span>/dev/null</span>
<span id="update-file-size.sh-13"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-13" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="update-file-size.sh-14"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-14" aria-hidden="true"></a></span>
<span id="update-file-size.sh-15"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-15" aria-hidden="true"></a><span class="fu">toh ()</span> <span class="kw">{</span></span>
<span id="update-file-size.sh-16"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-16" aria-hidden="true"></a>    <span class="ex">numfmt</span> --to=iec <span class="va">$*</span></span>
<span id="update-file-size.sh-17"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-17" aria-hidden="true"></a><span class="kw">}</span></span>
<span id="update-file-size.sh-18"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-18" aria-hidden="true"></a></span>
<span id="update-file-size.sh-19"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-19" aria-hidden="true"></a><span class="va">tmpdir=$(</span><span class="fu">mktemp</span> -d<span class="va">)</span></span>
<span id="update-file-size.sh-20"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-20" aria-hidden="true"></a></span>
<span id="update-file-size.sh-21"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-21" aria-hidden="true"></a><span class="bu">type</span> -a filelist</span>
<span id="update-file-size.sh-22"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-22" aria-hidden="true"></a><span class="kw">if</span> <span class="kw">((</span><span class="va">$#</span>&gt;0<span class="kw">))</span>; <span class="kw">then</span></span>
<span id="update-file-size.sh-23"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-23" aria-hidden="true"></a>    <span class="va">filelist=(</span> <span class="va">$*</span> <span class="va">)</span></span>
<span id="update-file-size.sh-24"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-24" aria-hidden="true"></a><span class="kw">else</span></span>
<span id="update-file-size.sh-25"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-25" aria-hidden="true"></a>    <span class="va">filelist=(</span> <span class="va">$webdir</span>/**/*.html(.<span class="va">)</span> )</span>
<span id="update-file-size.sh-26"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-26" aria-hidden="true"></a><span class="kw">fi</span></span>
<span id="update-file-size.sh-27"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-27" aria-hidden="true"></a></span>
<span id="update-file-size.sh-28"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-28" aria-hidden="true"></a><span class="kw">for</span> <span class="ex">fic</span> in <span class="va">$filelist</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="update-file-size.sh-29"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-29" aria-hidden="true"></a>    <span class="ex">print</span> -n -- <span class="st">&quot;</span><span class="va">$fic</span><span class="st">   &quot;</span></span>
<span id="update-file-size.sh-30"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-30" aria-hidden="true"></a></span>
<span id="update-file-size.sh-31"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-31" aria-hidden="true"></a>    <span class="va">htmlsize=$(</span><span class="ex">sizeof</span> <span class="va">$fic)</span></span>
<span id="update-file-size.sh-32"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-32" aria-hidden="true"></a>    <span class="ex">debug</span> HTML: <span class="va">$htmlsize</span></span>
<span id="update-file-size.sh-33"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-33" aria-hidden="true"></a></span>
<span id="update-file-size.sh-34"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-34" aria-hidden="true"></a>    <span class="va">xfic=$tmpdir</span>/<span class="va">$fic</span></span>
<span id="update-file-size.sh-35"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-35" aria-hidden="true"></a>    <span class="fu">mkdir</span> -p <span class="va">$(</span><span class="fu">dirname</span> <span class="va">$xfic)</span></span>
<span id="update-file-size.sh-36"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-36" aria-hidden="true"></a>    <span class="ex">hxclean</span> <span class="va">$fic</span> <span class="op">&gt;</span> <span class="va">$xfic</span></span>
<span id="update-file-size.sh-37"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-37" aria-hidden="true"></a></span>
<span id="update-file-size.sh-38"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-38" aria-hidden="true"></a>    <span class="va">images=(</span> <span class="va">$(</span> <span class="op">&lt;</span> <span class="va">$xfic</span> <span class="ex">hxselect</span> -i -c -s <span class="st">&#39;\n&#39;</span> <span class="st">&#39;img::attr(src)&#39;</span> <span class="kw">|</span> <span class="fu">sed</span> <span class="st">&#39;s/^\.\.\///&#39;</span> <span class="va">)</span> <span class="va">)</span></span>
<span id="update-file-size.sh-39"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-39" aria-hidden="true"></a>    <span class="va">imgsize=</span>0</span>
<span id="update-file-size.sh-40"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-40" aria-hidden="true"></a>    <span class="va">nbimg=</span>0</span>
<span id="update-file-size.sh-41"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-41" aria-hidden="true"></a>    <span class="kw">for</span> <span class="ex">i</span> in <span class="va">$images</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="update-file-size.sh-42"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-42" aria-hidden="true"></a>        <span class="kw">((</span>nbimg++<span class="kw">))</span></span>
<span id="update-file-size.sh-43"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-43" aria-hidden="true"></a>        <span class="va">isize=$(</span> <span class="ex">sizeof</span> <span class="va">${fic:h}</span>/<span class="va">$i</span> <span class="va">)</span></span>
<span id="update-file-size.sh-44"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-44" aria-hidden="true"></a>        <span class="ex">debug</span> <span class="va">$i</span> <span class="st">&#39;=&gt;&#39;</span> <span class="va">$isize</span></span>
<span id="update-file-size.sh-45"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-45" aria-hidden="true"></a>        <span class="kw">((</span> imgsize += isize <span class="kw">))</span></span>
<span id="update-file-size.sh-46"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-46" aria-hidden="true"></a>    <span class="kw">done</span></span>
<span id="update-file-size.sh-47"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-47" aria-hidden="true"></a>    <span class="ex">debug</span> IMG: <span class="va">$imgsize</span></span>
<span id="update-file-size.sh-48"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-48" aria-hidden="true"></a></span>
<span id="update-file-size.sh-49"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-49" aria-hidden="true"></a>    <span class="va">css=(</span> <span class="va">$(</span> <span class="op">&lt;</span> <span class="va">$xfic</span> <span class="ex">hxselect</span> -i -c -s <span class="st">&#39;\n&#39;</span> <span class="st">&#39;link[rel=stylesheet]::attr(href)&#39;</span><span class="va">))</span></span>
<span id="update-file-size.sh-50"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-50" aria-hidden="true"></a>    <span class="va">csssize=</span>0</span>
<span id="update-file-size.sh-51"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-51" aria-hidden="true"></a>    <span class="kw">for</span> <span class="ex">i</span> in <span class="va">$css</span><span class="kw">;</span> <span class="kw">do</span></span>
<span id="update-file-size.sh-52"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-52" aria-hidden="true"></a>        <span class="va">isize=$(</span> <span class="ex">sizeof</span> <span class="va">$webdir</span>/<span class="va">$i</span> <span class="va">)</span></span>
<span id="update-file-size.sh-53"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-53" aria-hidden="true"></a>        <span class="ex">debug</span> <span class="va">$i</span> <span class="st">&#39;=&gt;&#39;</span> <span class="va">$isize</span></span>
<span id="update-file-size.sh-54"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-54" aria-hidden="true"></a>        <span class="kw">((</span> csssize += isize <span class="kw">))</span></span>
<span id="update-file-size.sh-55"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-55" aria-hidden="true"></a>    <span class="kw">done</span></span>
<span id="update-file-size.sh-56"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-56" aria-hidden="true"></a>    <span class="ex">debug</span> CSS: <span class="va">$csssize</span></span>
<span id="update-file-size.sh-57"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-57" aria-hidden="true"></a>    <span class="va">total=$((</span> htmlsize + imgsize + csssize <span class="va">))</span></span>
<span id="update-file-size.sh-58"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-58" aria-hidden="true"></a>    <span class="va">sizeinfos=$(</span><span class="ex">print</span> -- <span class="st">&quot;Size: </span><span class="va">$(</span><span class="ex">toh</span> <span class="va">$total)</span><span class="st"> (HTML: </span><span class="va">$(</span><span class="ex">toh</span> <span class="va">$htmlsize)</span><span class="st">, CSS: </span><span class="va">$(</span><span class="ex">toh</span> <span class="va">$csssize)</span><span class="st">, IMG: </span><span class="va">$(</span><span class="ex">toh</span> <span class="va">$imgsize)</span><span class="st">)&quot;</span><span class="va">)</span></span>
<span id="update-file-size.sh-59"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-59" aria-hidden="true"></a>    <span class="ex">print</span> -- <span class="va">$sizeinfos</span></span>
<span id="update-file-size.sh-60"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-60" aria-hidden="true"></a>    <span class="fu">perl</span> -pi -e <span class="st">&#39;s#(&lt;span class=&quot;?web-file-size&quot;?&gt;)[^&lt;]*(&lt;/span&gt;)#$1&#39;&quot;</span><span class="va">$sizeinfos</span><span class="st">&quot;&#39;$2#&#39;</span> <span class="va">$fic</span></span>
<span id="update-file-size.sh-61"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-61" aria-hidden="true"></a><span class="kw">done</span></span>
<span id="update-file-size.sh-62"><a href="https://her.esy.fun/posts/0008-further-blog-changes/index.html#update-file-size.sh-62" aria-hidden="true"></a><span class="fu">rm</span> -rf <span class="va">$tmpdir</span></span></code></pre></div></div>
]]></description>
</item>

</channel>
</rss>
